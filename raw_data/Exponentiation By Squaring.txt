   In  |mathematics|Mathematics|  and  |computer_programming|Computer_Programming| ,  exponentiating by squaring is a general method for fast computation of large  |positive_integer|Positive_Integer|  powers of a  |number|Number| , or more generally of an element of a  |semigroup|Semigroup| , like a  |polynomial|Polynomial|  or a  |square_matrix|Square_Matrix| . Some variants are commonly referred to as square-and-multiply algorithms or binary exponentiation. These can be of quite general use, for example in  |modular_arithmetic|Modular_Arithmetic|  or powering of matrices. For semigroups for which  |additive_notation|Abelian_Groupnotation|  is commonly used, like  |elliptic_curves|Elliptic_Curve|  used in  |cryptography|Cryptography| , this method is also referred to as double-and-add.          The method is based on the observation that, for a positive integer n, we have   : xn       x   , &   n       , &   n             This method uses the bits of the exponent to determine which powers are computed.     This example shows how to compute x using this method.   The exponent, 13, is 1101 in binary. The bits are used in left to right order.   The exponent has 4 bits, so there are 4 iterations.     First, initialize the result to 1: r   1   .   : Step 1 x0 x1 .