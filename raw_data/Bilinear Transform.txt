The bilinear transform  is used in  |digital_signal_processing|Digital_Signal_Processing|  and discrete-time  |control_theory|Control_Theory|  to transform continuous-time system representations to discrete-time and vice versa.     The bilinear transform is a special case of a  |conformal_map|Conformal_Map| ping , often used to convert a  |transfer_function|Transfer_Function|  Ha   of a  |linear|Linear| ,  |time-invariant|Time-Invariant|   filter in the  |continuous|Continuous_Function| -time domain  to a transfer function Hd   of a linear, shift-invariant filter in the  |discrete|Discrete_Signal| -time domain . It maps positions on the j     axis, Re   , in the  |s-plane|S-Plane|  to the  |unit_circle|Unit_Circle| ,  z  1   , in the  |z-plane|Complex_Plane| . Other bilinear transforms can be used to warp the  |frequency_response|Frequency_Response|  of any discrete-time linear system and are implementable in the discrete domain by replacing a systems unit delays     with first order  |all-pass_filters|All-Pass_Filter| .     The transform preserves  |stability|Bibo_Stability|  and maps every point of the  |frequency_response|Frequency_Response|  of the continuous-time filter, Ha   to a corresponding point in the frequency response of the discrete-time filter, Hd   although to a somewhat different frequency, as shown in the  |Frequency_warping|Frequency_Warping|  section below. This means that for every feature that one sees in the frequency response of the analog filter, there is a corresponding feature, with identical gain and phase shift, in the frequency response of the digital filter but, perhaps, at a somewhat different frequency. This is barely noticeable at low frequencies but is quite evident at frequencies close to the  |Nyquist_frequency|Nyquist_Frequency| .       The bilinear transform is a first-order approximation of the natural logarithm function that is an exact mapping of the z-plane to the s-plane. When the  |Laplace_transform|Laplace_Transform|  is performed on a discrete-time signal , the result is precisely the  |Z_transform|Z_Transform|  of the discrete-time sequence with the substitution of     :       z & e     &       &               where T   is the  |numerical_integration|Numerical_Integration|  step size of the  |trapezoidal_rule|Trapezoidal_Rule|  used in the bilinear transform derivation;  or, in other words, the sampling period. The above bilinear approximation can be solved for s   or a similar approximation for s       can be performed.     The inverse of this mapping  is     :       s &         &         &           &               The bilinear transform essentially uses this first order approximation and substitutes into the continuous-time transfer function, Ha       : s           That is     : Hd Ha   Ha           A continuous-time causal filter is  |stable|Bibo_Stability|  if the  |poles|Pole|  of its transfer function fall in the left half of the  |complex|Complex_Number| |s-plane|S-Plane| . A discrete-time causal filter is stable if the poles of its transfer function fall inside the  |unit_circle|Unit_Circle|  in the  |complex_z-plane|Complex_Plane| . The bilinear transform maps the left half of the complex s-plane to the interior of the unit circle in the z-plane. Thus, filters designed in the continuous-time domain that are stable are converted to filters in the discrete-time domain that preserve that stability.     Likewise, a continuous-time filter is  |minimum-phase|Minimum-Phase|  if the  |zeros|Zero|  of its transfer function fall in the left half of the complex s-plane. A discrete-time filter is minimum-phase if the zeros of its transfer function fall inside the unit circle in the complex z-plane. Then the same mapping property assures that continuous-time filters that are minimum-phase are converted to discrete-time filters that preserve that property of being minimum-phase.       As an example take a simple  |low-pass|Low-Pass| |RC_filter|Rc_Filter| . This continuous-time filter has a transfer function     :     Ha &       &           If we wish to implement this filter as a digital filter, we can apply the bilinear transform by substituting for s the formula above; after some reworking, we get the following filter representation:     :     The coefficients of the denominator are the feed-backward coefficients and the coefficients of the numerator are the feed-forward coefficients used to implement a real-time  |digital_filter|Digital_Filter| .       It is possible to relate the coefficients of a continuous-time, analog filter with those of a similar discrete-time digital filter created through the bilinear transform process. Transforming a general, first-order continuous-time filter with the given transfer function     : Ha         using the bilinear transform requires the substitution of     : s   K       where     : K     .     However, if the frequency warping compensation as described below is used in the bilinear transform, so that both analog and digital filter gain and phase agree at frequency   , then     : K     .     This results in a discrete-time digital filter with coefficients expressed in terms of the coefficients of the original continuous time filter:   : Hd      Normally the constant term in the denominator must be normalized to 1 before deriving the corresponding  |difference_equation|Difference_Equation| . This results in     : Hd      The difference equation  is     :   y     x +     x -     y   .         A similar process can be used for a general second-order filter with the given transfer function     : Ha       .     This results in a discrete-time  |digital_biquad_filter|Digital_Biquad_Filter|  with coefficients expressed in terms of the coefficients of the original continuous time filter:   : Hd      Again, the constant term in the denominator is generally normalized to 1 before deriving the corresponding  |difference_equation|Difference_Equation| . This results in     : Hd      The difference equation  is     :   y     x +     x +     x -     y -     y   .         To determine the frequency response of a continuous-time filter, the  |transfer_function|Transfer_Function|  Ha is evaluated at s j   which is on the j   axis. Likewise, to determine the frequency response of a discrete-time filter, the transfer function Hd is evaluated at z e which is on the unit circle,  z  1 . The bilinear transform maps the j   axis of the s-plane to the unit circle of the z-plane,  z  1 , but it is not the same mapping z e which also maps the j   axis to the unit circle. When the actual frequency of   is input to the discrete-time filter designed by use of the bilinear transform, then it is desired to know at what frequency,   , for the continuous-time filter that this   is mapped to.     : Hd Ha       :     This shows that every point on the unit circle in the discrete-time filter z-plane, z e is mapped to a point on the j   axis on the continuous-time filter s-plane, s j   . That is, the discrete-time to continuous-time frequency mapping of the bilinear transform is     :             and the inverse mapping is     :             The discrete-time filter behaves at frequency   the same way that the continuous-time filter behaves at frequency   . Specifically, the gain and phase shift that the discrete-time filter has at frequency   is the same gain and phase shift that the continuous-time filter has at frequency   . This means that every feature, every bump that is visible in the frequency response of the continuous-time filter is also visible in the discrete-time filter, but at a different frequency. For low frequencies , then the features are mapped to a slightly different frequency;       .     One can see that the entire continuous frequency range     : -   .