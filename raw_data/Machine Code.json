[
    {
        "         Machine code is a computer program written in machine language ": null
    },
    {
        "instructions": "Instruction Set"
    },
    {
        " that can be executed directly by a ": null
    },
    {
        "computers": "Computer"
    },
    {
        " central processing unit": "Central Processing Unit"
    },
    {
        " . Each instruction causes the CPU to perform a very specific task, such as a load, a store, a ": null
    },
    {
        "jump": "Jump Instruction"
    },
    {
        ", or an ": null
    },
    {
        "ALU": "Arithmetic Logic Unit"
    },
    {
        " operation on one or more units of data in ": null
    },
    {
        "CPU registers": "Processor Register"
    },
    {
        " or memory.     Machine code is a strictly numerical language which is intended to run as fast as possible, and may be regarded as the lowest-level representation of a ": null
    },
    {
        "compiled": "Compiler"
    },
    {
        " or ": null
    },
    {
        "assembled": "Assembly Language"
    },
    {
        " computer program": "Computer Program"
    },
    {
        " or as a primitive and ": null
    },
    {
        "hardware": "Computer Hardware"
    },
    {
        "-dependent ": null
    },
    {
        "programming language": "Programming Language"
    },
    {
        ". While it is possible to write programs directly in machine code, it is tedious and error prone to manage individual bits and calculate numerical addresses and constants manually. For this reason, programs are very rarely written directly in machine code in modern contexts, but may be done for low level ": null
    },
    {
        "debugging": "Debugging"
    },
    {
        ", program ": null
    },
    {
        "patching": "Patch"
    },
    {
        " and ": null
    },
    {
        "assembly language": "Assembly Language"
    },
    {
        " disassembly": "Disassembly"
    },
    {
        ".     The overwhelming majority of practical programs today are written in ": null
    },
    {
        "higher-level languages": "High-Level Programming Language"
    },
    {
        " or assembly language. The source code is then translated to executable machine code by utilities such as ": null
    },
    {
        "compilers": "Compiler"
    },
    {
        ", ": null
    },
    {
        "assemblers": "Assembler"
    },
    {
        ", and ": null
    },
    {
        "linkers": "Linker"
    },
    {
        ", with the important exception of ": null
    },
    {
        "interpreted": "Interpreted Language"
    },
    {
        " programs, Such as many versions of ": null
    },
    {
        "BASIC": "Basic"
    },
    {
        ", especially early ones, as well as ": null
    },
    {
        "Smalltalk": "Smalltalk"
    },
    {
        ", ": null
    },
    {
        "MATLAB": "Matlab"
    },
    {
        ", ": null
    },
    {
        "Perl": "Perl"
    },
    {
        ", ": null
    },
    {
        "Python": "Python"
    },
    {
        ", ": null
    },
    {
        "Ruby": "Ruby"
    },
    {
        " and other special purpose or ": null
    },
    {
        "scripting languages": "Scripting Language"
    },
    {
        ". which are not translated into machine code. However, the  interpreter  itself, which may be seen as an executor or processor, performing the instructions of the source code, typically consists of directly executable machine code .     Machine code is by definition the lowest level of programming detail visible to the programmer, but internally many processors use ": null
    },
    {
        "microcode": "Microcode"
    },
    {
        " or optimise and transform machine code instructions into sequences of ": null
    },
    {
        "micro-ops": "Micro-Operation"
    },
    {
        ". This is not generally considered to be a machine code.          Every processor or processor family has its own ": null
    },
    {
        "instruction set": "Instruction Set"
    },
    {
        ". Instructions are patterns of ": null
    },
    {
        "bits": "Bit"
    },
    {
        " that by physical design correspond to different commands to the machine. Thus, the instruction set is specific to a class of processors using the same architecture. Successor or derivative processor designs often include all the instructions of a predecessor and may add additional instructions. Occasionally, a successor design will discontinue or alter the meaning of some instruction code , affecting code compatibility to some extent; even nearly completely compatible processors may show slightly different behavior for some instructions, but this is rarely a problem. Systems may also differ in other details, such as memory arrangement, operating systems, or ": null
    },
    {
        "peripheral devices": "Peripheral"
    },
    {
        ". Because a program normally relies on such factors, different systems will typically not run the same machine code, even when the same type of processor is used.     A processors instruction set may have all instructions of the same length, or it may have variable-length instructions. How the patterns are organized varies strongly with the particular architecture and often also with the type of instruction. Most instructions have one or more ": null
    },
    {
        "opcode": "Opcode"
    },
    {
        " fields which specifies the basic instruction type  and the actual operation and other fields that may give the type of the ": null
    },
    {
        "operand": "Operand"
    },
    {
        ", the ": null
    },
    {
        "addressing mode": "Addressing Mode"
    },
    {
        ", the addressing offset or index, or the actual value itself .      Not all machines or individual instructions have explicit operands. An ": null
    },
    {
        "accumulator machine": "Accumulator Machine"
    },
    {
        " has a combined left operand and result in an implicit accumulator for most arithmetic instructions. Other architectures have accumulator versions of common instructions, with the accumulator regarded as one of the general registers by longer instructions. A ": null
    },
    {
        "stack machine": "Stack Machine"
    },
    {
        " has most or all of its operands on an implicit stack. Special purpose instructions also often lack explicit operands . This distinction between explicit and implicit operands is important in code generators, especially in the register allocation and live range tracking parts. A good code optimizer can track implicit as well as explicit operands which may allow more frequent ": null
    },
    {
        "constant propagation": "Constant Propagation"
    },
    {
        ", ": null
    },
    {
        "constant folding": "Constant Folding"
    },
    {
        " of registers and other code enhancements.       A computer program is a list of instructions that can be executed by a central processing unit. A programs execution is done in order for the CPU that is executing it to solve a specific problem and thus accomplish a specific result. While simple processors are able to execute instructions one after another, ": null
    },
    {
        "superscalar": "Superscalar"
    },
    {
        " processors are capable of executing a variety of different instructions at once.     ": null
    },
    {
        "Program flow": "Program Flow"
    },
    {
        " may be influenced by special jump instructions that transfer execution to an instruction other than the numerically following one. ": null
    },
    {
        "Conditional jumps": "Conditional Branch"
    },
    {
        " are taken or not depending on some condition.          A much more readable rendition of machine language, called ": null
    },
    {
        "assembly language": "Assembly Language"
    },
    {
        ", uses ": null
    },
    {
        "mnemonic codes": "Assembly Languageopcode Mnemonics And Extended Mnemonics"
    },
    {
        " to refer to machine code instructions, rather than using the instructions numeric values directly. For example, on the ": null
    },
    {
        "Zilog Z80": "Zilog Z80"
    },
    {
        " processor, the machine code 00000101 , which causes the CPU to decrement the B ": null
    },
    {
        "processor register": "Processor Register"
    },
    {
        ", would be represented in assembly language as DEC B .       The ": null
    },
    {
        "MIPS architecture": "Mips Architecture"
    },
    {
        " provides a specific example for a machine code whose instructions are always 32 bits long. The general type of instruction is given by the op field, the highest 6 bits. J-type and I-type instructions are fully specified by op. R-type instructions include an additional field funct to determine the exact operation. The fields used in these types are:     6 5 5 5 5 6 bits   R-type   I-type   J-type     rs, rt, and rd indicate register operands; shamt gives a shift amount; and the address or immediate fields contain an operand directly.     For example, adding the registers 1 and 2 and placing the result in register 6 is encoded:       0 1 2 6 0 32 decimal   000000 00001 00010 00110 00000 100000 binary     Load a value into register 8, taken from the memory cell 68 cells after the location listed in register 3:       35 3 8 68 decimal   100011 00011 01000 00000 00001 000100 binary     Jumping to the address 1024:       2 1024 decimal   000010 00000 00000 00000 10000 000000 binary       In some ": null
    },
    {
        "computer architectures": "Computer Architecture"
    },
    {
        ", the machine code is implemented by an even more fundamental underlying layer called ": null
    },
    {
        "microcode": "Microcode"
    },
    {
        ", providing a common machine language interface across a line or family of different models of computer with widely different underlying ": null
    },
    {
        "dataflows": "Dataflow"
    },
    {
        ". This is done to facilitate ": null
    },
    {
        "porting": "Porting"
    },
    {
        " of machine language programs between different models. An example of this use is the IBM ": null
    },
    {
        "System/360": "System/360"
    },
    {
        " family of computers and their successors. With dataflow path widths of 8  bits to 64  bits and beyond, they nevertheless present a common architecture at the machine language level across the entire line.     Using microcode to implement an ": null
    },
    {
        "emulator": "Emulator"
    },
    {
        " enables the computer to present the architecture of an entirely different computer. The System/360 line used this to allow porting programs from earlier IBM machines to the new family of computers, e.g. an ": null
    },
    {
        "IBM 1401/1440/1460": "Ibm 1400 Series"
    },
    {
        " emulator on the IBM S/360 model 40.       Machine code is generally different from ": null
    },
    {
        "bytecode": "Bytecode"
    },
    {
        " , which is either executed by an interpreter or itself compiled into machine code for faster execution. An exception is when a processor is designed to use a particular bytecode directly as its machine code, such as is the case with ": null
    },
    {
        "Java processors": "Java Processor"
    },
    {
        ".     Machine code and assembly code are sometimes called  native code when referring to platform-dependent parts of language features or libraries.        The ": null
    },
    {
        "Harvard architecture": "Harvard Architecture"
    },
    {
        " is a computer architecture with physically separate storage and signal pathways for the code and ": null
    },
    {
        "data": "Data"
    },
    {
        ". Today, most processors implement such separate signal pathways for performance reasons but implement a ": null
    },
    {
        "Modified Harvard architecture": "Modified Harvard Architecture"
    },
    {
        ", so they can support tasks like loading an ": null
    },
    {
        "executable": "Executable"
    },
    {
        " program from ": null
    },
    {
        "disk storage": "Data Storage Device"
    },
    {
        " as data and then executing it. Harvard architecture is contrasted to the ": null
    },
    {
        "Von Neumann architecture": "Von Neumann Architecture"
    },
    {
        ", where data and code are stored in the same memory which is read by the processor allowing the computer to execute commands.     From the point of view of a ": null
    },
    {
        "process": "Process"
    },
    {
        ", the code space is the part of its ": null
    },
    {
        "address space": "Virtual Address Space"
    },
    {
        " where the code in execution is stored. In ": null
    },
    {
        "multitasking": "Computer Multitasking"
    },
    {
        " systems this comprises the programs ": null
    },
    {
        "code segment": "Code Segment"
    },
    {
        " and usually ": null
    },
    {
        "shared libraries": "Shared Libraries"
    },
    {
        ". In ": null
    },
    {
        "multi-threading": "Thread"
    },
    {
        " environment, different threads of one process share code space along with data space, which reduces the overhead of ": null
    },
    {
        "context switching": "Context Switching"
    },
    {
        " considerably as compared to process switching.       Pamela Samuelson wrote that machine code is so unreadable that the ": null
    },
    {
        "United States Copyright Office": "United States Copyright Office"
    },
    {
        " cannot identify whether a particular encoded program is an original work of authorship;  however, the US Copyright Office does allow for copyright registration of computer programs  and a programs machine code can sometimes be ": null
    },
    {
        "decompiled": "Decompiler"
    },
    {
        " in order to make its functioning more easily understandable to humans.      Cognitive science professor ": null
    },
    {
        "Douglas Hofstadter": "Douglas Hofstadter"
    },
    {
        " has compared machine code to ": null
    },
    {
        "genetic code": "Genetic Code"
    },
    {
        ", saying that Looking at a program written in machine language is vaguely comparable to looking at a ": null
    },
    {
        "DNA": "Dna"
    },
    {
        " molecule atom by atom. ": null
    }
]