[
    {
        "   Collation is the assembly of written information into a standard order. Many systems of collation are based on ": null
    },
    {
        "numerical order": "Number"
    },
    {
        " or ": null
    },
    {
        "alphabetical order": "Alphabetical Order"
    },
    {
        ", or extensions and combinations thereof. Collation is a fundamental element of most office ": null
    },
    {
        "filing systems": "Library Classification"
    },
    {
        ", ": null
    },
    {
        "library catalog": "Library Catalog"
    },
    {
        "s, and ": null
    },
    {
        "reference book": "Reference Book"
    },
    {
        "s.     Collation differs from  classification  in that classification is concerned with arranging information into logical categories, while collation is concerned with the ordering of items of information, usually based on the form of their ": null
    },
    {
        "identifier": "Identifier"
    },
    {
        "s. Formally speaking, a collation method typically defines a ": null
    },
    {
        "total order": "Total Order"
    },
    {
        " on a set of possible identifiers, called ": null
    },
    {
        "sort key": "Sort Key"
    },
    {
        "s, which consequently produces a ": null
    },
    {
        "total preorder": "Total Preorder"
    },
    {
        " on the set of items of information .     A collation algorithm such as the ": null
    },
    {
        "Unicode collation algorithm": "Unicode Collation Algorithm"
    },
    {
        " defines an order through the process of comparing two given ": null
    },
    {
        "character strings": "Character String"
    },
    {
        "and deciding which should come before the other. When an order has been defined in this way, a  sorting algorithm  can be used to put a list of any number of items into that order.     The main advantage of collation is that it makes it fast and easy for a user to find an element in the list, or to confirm that it is absent from the list. In automatic systems this can be done using a ": null
    },
    {
        "binary search algorithm": "Binary Search Algorithm"
    },
    {
        " or ": null
    },
    {
        "interpolation search": "Interpolation Search"
    },
    {
        "; manual searching may be performed using a roughly similar procedure, though this will often be done unconsciously. Other advantages are that one can easily find the first or last elements on the list , or elements in a given range .       Strings representing ": null
    },
    {
        "numbers": "Number"
    },
    {
        "may be sorted based on the values of the numbers that they represent. For example, âˆ’4 , 2.5 , 10 , 89 , 30,000 . Note that pure application of this method may provide only a partial ordering on the strings, since different strings can represent the same number .     A similar approach may be taken with strings representing ": null
    },
    {
        "dates": "Calendar Date"
    },
    {
        " or other items that can be ordered chronologically or in some other natural fashion.          ": null
    },
    {
        "Alphabetical order": "Alphabetical Order"
    },
    {
        " is the basis for many systems of collation where items of information are identified by strings consisting principally of ": null
    },
    {
        "letters": "Letter"
    },
    {
        " from an ": null
    },
    {
        "alphabet": "Alphabet"
    },
    {
        ". The ordering of the strings relies on the existence of a standard ordering for the letters of the alphabet in question.      To decide which of two strings comes first in alphabetical order, initially their first letters are compared. The string whose first letter appears earlier in the alphabet comes first in alphabetical order. If the first letters are the same, then the second letters are compared, and so on, until the order is decided. The result of arranging a set of strings in alphabetical order is that words with the same first letter are grouped together, and within such a group words with the same first two letters are grouped together, and so on.     ": null
    },
    {
        "Capital letters": "Capital Letter"
    },
    {
        "are typically treated as equivalent to their corresponding lowercase letters.      Certain limitations, complications, and special conventions may apply when alphabetical order is used:   When strings contain ": null
    },
    {
        "spaces": "Space"
    },
    {
        " or other word dividers, the decision must be taken whether to ignore these dividers or to treat them as symbols preceding all other letters of the alphabet. For example, if the first approach is taken then car park will come after carbon and carp , whereas in the second approach car park will come before those two words. The first rule is used in many ": null
    },
    {
        "dictionaries": "Dictionary"
    },
    {
        ", the second in ": null
    },
    {
        "telephone directories": "Telephone Directory"
    },
    {
        " .   Abbreviations may be treated as if they were spelt out in full. For example, names containing St.  are often ordered as if they were written out as Saint . There is also a traditional convention in English that surnames beginning Mc and ": null
    }
]