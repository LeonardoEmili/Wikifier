In  |theoretical_computer_science|Theoretical_Computer_Science|  and  |formal_language_theory|Formal_Language_Theory| , a regular grammar is a  |formal_grammar|Formal_Grammar|  that is right-regular or left-regular. Every regular grammar describes a  |regular_language|Regular_Language| .       A right regular grammar  is a  |formal_grammar|Formal_Grammar|   such that all the  |production_rules|Production|  in P are of one of the following forms:   A → a, where A is a  |non-terminal|Terminal_And_Nonterminal_Symbols|  in N and a is a terminal in Σ   A → aB, where A and B are non-terminals in N and a is in Σ   A → ε, where A is in N and ε denotes the  |empty_string|Empty_String| , i.e. the string of length 0.     In a left regular grammar , all rules obey the forms   A → a, where A is a non-terminal in N and a is a terminal in Σ   A → Ba, where A and B are in N and a is in Σ   A → ε, where A is in N and ε is the empty string.     A regular grammar is a left or right regular grammar.     Some textbooks and articles disallow empty production rules, and assume that the empty string is not present in languages.       An extended right regular grammar is one in which all rules obey one of   A → w, where A is a non-terminal in N and w is in a string of terminals Σ   A → wB, where A and B are in N and w is in Σ .     Some authors call this type of grammar a right regular grammar   Here: p.217 , p.79 and the type above a strictly right regular grammar . Hopcroft and Ullman 1979 call it a normal form for right-linear grammars.     An extended left regular grammar is one in which all rules obey one of   A → w, where A is a non-terminal in N and w is in Σ   A → Bw, where A and B are in N and w is in Σ .       An example of a right regular grammar G with N , Σ , P consists of the following rules   : S & rarr; aS   : S & rarr; bA   : A & rarr; & epsilon;   : A & rarr; cA   and S is the start symbol. This grammar describes the same language as the  |regular_expression|Regular_Expression|  abc, viz. the set of all strings consisting of arbitrarily many a s, followed by a single b , followed by arbitrarily many c s.     A somewhat longer but more explicit extended right regular grammar G for the same regular expression is given by N , Σ , where P consists of the following rules:   : S & rarr; A   : A & rarr; aA   : A & rarr; B   : B & rarr; bC   : C & rarr; & epsilon;   : C & rarr; cC   …where each uppercase letter corresponds to phrases starting at the next position in the regular expression.     As an example from the area of programming languages, the set of all strings denoting a floating point number can be described by an extended right regular grammar G with N , Σ , where S is the start symbol, and P consists of the following rules:     :       There is a direct one-to-one correspondence between the rules of a right regular grammar and those of a  |nondeterministic_finite_automaton|Nondeterministic_Finite_Automaton| , such that the grammar generates exactly the language the automaton accepts. Hopcroft and Ullman 1979, p.218-219, Theorem 9.1 and 9.2 Hence, the right regular grammars generate exactly all  |regular_languages|Regular_Language| . The left regular grammars describe the reverses of all such languages, that is, exactly the regular languages as well.     Every strict right regular grammar is extended right regular, while every extended right regular grammar can be made strict by inserting new nonterminals, such that the result generates the same language; hence, extended right regular grammars generate the regular languages as well. Analogously, so do the extended left regular grammars.     If empty productions are disallowed, only all regular languages that do not include the empty string can be generated. Hopcroft and Ullman 1979, p.229, Exercise 9.2     While regular grammars can only describe regular languages, the converse is not true: regular languages can also be described by non-regular grammars.       If mixing of left-regular and right-regular rules is allowed, we still have a  |linear_grammar|Linear_Grammar| , but not necessarily a regular one.   What is more, such a grammar need not generate a regular language: all linear grammars can be easily brought into this form, and hence, such grammars can generate exactly all  |linear_languages|Linear_Grammar| , including nonregular ones.     For instance, the grammar G with N , Σ , P with start symbol S .