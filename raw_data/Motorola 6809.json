[
    {
        "     The Motorola 6809  is an ": null
    },
    {
        "8-bit": "8-Bit"
    },
    {
        " microprocessor": "Microprocessor"
    },
    {
        " CPU": "Central Processing Unit"
    },
    {
        " with some ": null
    },
    {
        "16-bit": "16-Bit"
    },
    {
        " features from ": null
    },
    {
        "Motorola": "Motorola"
    },
    {
        ". It was designed by Terry Ritter and Joel Boney and introduced in 1978. It was a major advance over both its predecessor, the ": null
    },
    {
        "Motorola 6800": "Motorola 6800"
    },
    {
        ", and the related ": null
    },
    {
        "MOS Technology 6502": "Mos Technology 6502"
    },
    {
        ". Among the systems to use the 6809 are the ": null
    },
    {
        "Dragon": "Dragon 32/64"
    },
    {
        " home computers, ": null
    },
    {
        "TRS-80 Color Computer": "Trs-80 Color Computer"
    },
    {
        ", the ": null
    },
    {
        "Vectrex": "Vectrex"
    },
    {
        " home console, and early 1980s arcade machines including  Defender ,  Robotron: 2084 ,  Joust , and  Gyruss .     Unlike the 6800 and 6502, the 6809 allows fully position-independent code and fully reentrant code in a simple and straightforward way, without using difficult programming tricks. Along with the ": null
    },
    {
        "Intel 8086": "Intel 8086"
    },
    {
        ", it was one of the first microprocessors to implement a hardware multiplication instruction, and it features full 16-bit arithmetic and an especially fast ": null
    },
    {
        "interrupt": "Interrupt"
    },
    {
        " system.                 Among the significant enhancements introduced in the 6809 are the use of two 8-bit ": null
    },
    {
        "accumulators": "Accumulator"
    },
    {
        " , two 16-bit ": null
    },
    {
        "index registers": "Index Register"
    },
    {
        " and two 16-bit ": null
    },
    {
        "stack": "Stack"
    },
    {
        " pointer": "Pointer"
    },
    {
        "s. The index and stack registers allow advanced ": null
    },
    {
        "addressing mode": "Addressing Mode"
    },
    {
        "s. ": null
    },
    {
        "Program counter": "Program Counter"
    },
    {
        " relative addressing allowed for the easy creation of ": null
    },
    {
        "position-independent code": "Position-Independent Code"
    },
    {
        ", while a user stack pointer facilitates ": null
    },
    {
        "reentrant": "Reentrant"
    },
    {
        " code.     The 6809 is assembler ": null
    },
    {
        "source-compatible": "Source Code Compatibility"
    },
    {
        " with the 6800, though the 6800 has 78 instructions to the 6809s 59. Some instructions were replaced by more general ones which the ": null
    },
    {
        "assembler": "Assembly Language Assembler"
    },
    {
        " translated into equivalent operations and some were even replaced by ": null
    },
    {
        "addressing mode": "Addressing Mode"
    },
    {
        "s. The ": null
    },
    {
        "instruction set": "Instruction Set"
    },
    {
        " and register complement were highly ": null
    },
    {
        "orthogonal": "Orthogonal"
    },
    {
        ", making the 6809 easier to program than the 6800 or 6502. Like the 6800, the 6809 includes an undocumented address bus test instruction which came to be nicknamed ": null
    },
    {
        "Halt and Catch Fire ": "Halt And Catch Fire"
    },
    {
        ".      Unlike contemporary processors that often used a ": null
    },
    {
        "microcoded": "Microprogram"
    },
    {
        " architecture , the 6809s internal design was more similar to early simple CPU designs . Like most 8-bit microprocessors, the 6809 implementation can in be viewed as a ": null
    },
    {
        "register-transfer level": "Register-Transfer Level"
    },
    {
        " machine, using a central ": null
    },
    {
        "PLA": "Programmable Logic Array"
    },
    {
        "  to implement much of the instruction decoding as well as parts of the sequencing.     Just like the 6800 and 6502, the 6809 uses a ": null
    },
    {
        "two-phase clock": "Two-Phase Clock"
    },
    {
        " to gate the latches. This two phase clock cycle is used as a full machine cycle in these processors. Simple instructions can therefore execute in as little as two or three such cycles, although this also means that these cycles must be pretty slow.     As a comparison, the higher resolution state machine of a CPU like the ": null
    },
    {
        "Z80": "Zilog Z80"
    },
    {
        " allows clock frequencies 3-5 times as high with the same speed memory chips, which was often the limiting factor. This is because the Z80 combines two full clock cycles into a relatively long memory access period compared to the clock, while the more asynchronous 6809 instead has relatively short memory access times: depending on version and speed grade, approximately 40-60% of a single clock cycle is typically available for memory access in a 6800, 6502, or 6809.     The 6809 has an internal two-phase clock generator whereas the 6809E needed an external clock generator. There were also variants such as the 68A09 and 68B09; the internal letter indicates the processors rated clock speed.              A key aspect of the 6809 design is a series of built-in features to allow ": null
    },
    {
        "position-independent": "Position-Independent Code"
    },
    {
        " code. This came about because the design team believed that future system integrators would look to off-the-shelf code in ROMs to handle common tasks. Libraries of common routines like ": null
    },
    {
        "floating point": "Floating Point"
    },
    {
        " arithmetic, graphics primitives, Lempel-Ziv  and so forth would be available for integrators to license, combine together along with their own code, and burned to ROM. A larger example is found in Motorolas 6809 programming manual,  which contains the full listing of assist09, a so-called ": null
    },
    {
        "monitor": "Resident Monitor"
    },
    {
        ", a miniature operating system intended to be burned in ROM.     In this sort of pick and place programming enviornment, there was no way to predict where the code would end up in the ROM. Any instructions that referred to other locations in memory would normally have to be changed to reflect these changes in layout. In contrast, the 6809 allowed code to be placed anywhere in memory without modification. The 6809 design also focused on supporting ": null
    },
    {
        "reentrant": "Reentrant"
    },
    {
        " code, code that can be called from various different programs concurrently without concern for coordination between them, or that can recursively call itself. This means that any number of modules can share any other module in common without synchronization, mutual exclusion controls, or other restrictions on their shared access.     The design teams prediction was, ultimately, incorrect. The market for pre-rolled ROM modules never materialized: Motorolas only released example was the MC6839 floating-point ROM. The industry as a whole solved the problem of integrating code modules from multiple separate sources by using automatic relocating linkers and loaders  which is still the solution used today  instead of using relocatable ROM modules.     However, the decisions made by the design team yielded a very powerful processor and made possible advanced operating systems like ": null
    },
    {
        "OS-9": "Os-9"
    },
    {
        " and ": null
    },
    {
        "UniFlex": "Uniflex"
    },
    {
        ", which took advantage of the position-independence, re-entrancy orientated nature of the 6809 to create multi-user multitasking operating systems.     The 6809 is sometimes considered to be the conceptual precursor of the ": null
    },
    {
        "Motorola 68000": "Motorola 68000"
    },
    {
        " family of processors, though this is mostly a misunderstanding: the 6809 and 68000 design projects ran partly in parallel, and the two CPUs have quite differing architectures as well as radically different implementation principles. However, there is a certain amount of design philosophy similarity and also some ": null
    },
    {
        "assembly language": "Assembly Language"
    },
    {
        " syntax resemblance as well as opcode mnemonic similarity. though the assembly language is not a characteristic of the 6809 per se, as many assembly languages can be constructed for any given machine language: witness the assembly languages of the Z80 vs. the 8080, or the 8086/88 assembly language vs. the one that NEC developed for the V30/V20 Notwithstanding the common elements, the 6809 is a derivative of the 6800, whereas the 68000 was a totally new design.       The Motorola 6809 was originally produced in 1  ": null
    },
    {
        "MHz": "Hertz"
    },
    {
        ", 1.5  MHz and 2  MHz speed ratings. Faster versions were produced later by Hitachi. With little to improve, the 6809 marks the end of the evolution of Motorolas 8-bit processors; Motorola intended that future 8-bit products would be based on an 8-bit data bus version of the 68000 . A micro-controller version with a slightly modified instruction set, the ": null
    },
    {
        "6811": "Freescale 68Hc11"
    },
    {
        ", was discontinued as late as the second decade of the 21st century.     The ": null
    },
    {
        "Hitachi 6309": "Hitachi 6309"
    },
    {
        " was an enhanced version of the 6809 with extra registers and additional instructions, including block move, additional multiply instructions and hardware-implemented division. It was used in unofficially-upgraded Tandy Color Computer 3 computers and a version of OS-9 was written to take advantages of the 6309s extra features: ": null
    },
    {
        "NitrOS-9": "Nitros-9"
    },
    {
        ".               The 6809 is used in Commodores dual-CPU ": null
    },
    {
        "SuperPET": "Commodore Petsuperpet 9000 Series"
    },
    {
        " computer, and, in its 68A09 incarnation, in the unique vector graphics based ": null
    },
    {
        "Vectrex": "Vectrex"
    },
    {
        " home ": null
    },
    {
        "video game console": "Video Game Console"
    },
    {
        " with built-in screen display, and in the Milton Bradley Expansion system . The 6809E is CPU in the ": null
    },
    {
        "TRS-80 Color Computer": "Trs-80 Color Computer"
    },
    {
        ", the ": null
    },
    {
        "Acorn System 2": "Acorn System 2"
    },
    {
        ", 3 and 4 computers , the ": null
    },
    {
        "Fujitsu FM-7": "Fm-7"
    },
    {
        ", the ": null
    },
    {
        "Canon CX-1": "Canon Cx-1"
    },
    {
        ", the ": null
    },
    {
        "Welsh": "Wales"
    },
    {
        "-made ": null
    },
    {
        "Dragon 32/64": "Dragon 32/64"
    },
    {
        " home computers, and the ": null
    },
    {
        "SWTPC": "Swtpc"
    },
    {
        ", ": null
    },
    {
        "Gimix": "Gimix"
    },
    {
        ", ": null
    },
    {
        "Smoke Signal Broadcasting": "Smoke Signal Broadcasting"
    },
    {
        ", etc. ": null
    },
    {
        "SS-50 bus": "Ss-50 Bus"
    },
    {
        " bus systems, in addition to several of Motorolas own ": null
    },
    {
        "EXORmacs": "Exormacs"
    },
    {
        " and ": null
    },
    {
        "EXORset": "Exorset"
    },
    {
        " development systems. In France, ": null
    },
    {
        "Thomson micro-informatique": "Thomson Sa"
    },
    {
        " produced a series of micro-computers based on the 6809E .     In addition to home computers and game consoles, the 6809 is also found in a number of arcade games released during the early to mid-1980s. ": null
    },
    {
        "Williams Electronics": "Wms Industries"
    },
    {
        " was a prolific user of the processor, which was deployed in  Defender ,  Joust ,  Sinistar , and  Robotron: 2084  and other games. The 6809 CPU forms the core of the successful ": null
    },
    {
        "Williams Pinball Controller": "Williams Pinball Controller"
    },
    {
        ". The KONAMI-1 was a modified 6809 used by ": null
    },
    {
        "Konami": "Konami"
    },
    {
        " in  Rocn Rope ,  Gyruss , and  The Simpsons .      The 6809 CPU was also used in ": null
    },
    {
        "traffic signal": "Traffic Signal"
    },
    {
        " controllers made in the 1980s by several different manufacturers.      Software development company ": null
    },
    {
        "Microware": "Microware"
    },
    {
        " developed the original ": null
    },
    {
        "OS-9": "Os-9"
    },
    {
        " operating system  for the 6809, later porting it to the 68000 and i386 series of microprocessors. Some years later, enthusiasts developed the NitrOS9 operating system based upon the original Microware OS9.     Series II of the ": null
    },
    {
        "Fairlight CMI": "Fairlight Cmi"
    },
    {
        " used dual 6809 CPUs and OS9, and also used one 6809 CPU per voice card. The 6809 was often employed in music synthesizers from other manufacturers such as Oberheim , PPG , and Ensoniq . The latter used the 6809E as their main CPU. The version was used in order to synchronize the microprocessors clock to the sound chip in those machines; in the ESQ1 and SQ80 the 68B09E was used, requiring a dedicated arbiter logic in order to ensure 1  MHz bus timing when accessing the DOC chip.     ": null
    },
    {
        "Hitachi": "Hitachi, Ltd."
    },
    {
        " produced its own 6809-based machines, the MB6890 and later the S1. These were primarily for the Japanese market, but some were exported to and sold in ": null
    },
    {
        "Australia": "Australia"
    },
    {
        ". There the MB6890 was dubbed the Peach , probably in ironic reference to the popularity of the ": null
    },
    {
        "Apple II": "Apple Ii"
    },
    {
        ". The S1 was notable in that it contained ": null
    },
    {
        "paging": "Paging"
    },
    {
        " hardware extending the 6809s native 64 ": null
    },
    {
        "kilobyte": "Kilobyte"
    },
    {
        "  addressing range to a full 1 ": null
    },
    {
        "mebibyte": "Mebibyte"
    },
    {
        " in 4 KB pages. It was similar in this to machines produced by ": null
    },
    {
        "SWTPC": "Swtpc"
    },
    {
        ", ": null
    },
    {
        "Gimix": "Gimix"
    },
    {
        ", and several other suppliers. TSC produced a Unix-like operating system ": null
    },
    {
        "uniFlex": "Uniflex"
    },
    {
        " which ran only on such machines. ": null
    },
    {
        "OS-9": "Os-9"
    },
    {
        " Level II, also took advantage of such memory management facilities. Most other computers of the time with more than 64 KB of memory addressing were limited to ": null
    },
    {
        "bank switching": "Bank Switching"
    },
    {
        " where much if not all the 64 KB was simply swapped for another section of memory, although in the case of the 6809, Motorola offered their own MC6829 ": null
    },
    {
        "MMU": "Memory Management Unit"
    },
    {
        " design mapping 2 mebibytes  in 2 KB pages.      The very first Macintosh prototype, ": null
    },
    {
        "wire-wrapped": "Wire Wrapping"
    },
    {
        " by ": null
    },
    {
        "Burrell Smith": "Burrell Smith"
    },
    {
        ", contained a 6809.      The 6809 was used in the mid-1980s through the early 2000s in Motorola SMARTNET and SMARTZONE Trunked Central Controllers . These controllers were used as the central processors in many of Motorolas trunked two-way radio communications systems.       Motorola spun off its microprocessor division in 2004. The division changed its name to Freescale and has subsequently been acquired by ": null
    },
    {
        "NXP": "Nxp Semiconductors"
    },
    {
        ".     Neither Motorola nor Hitachi produce 6809 processors or derivatives anymore. 6809 cores are available in ": null
    },
    {
        "VHDL": "Vhdl"
    },
    {
        " and can be programmed into an FPGA and used as an embedded processor with speed ratings up to 40  MHz. Some 6809 opcodes also live on in the ": null
    },
    {
        "Freescale": "Freescale"
    },
    {
        " embedded processors. In 2015, Freescale authorized ": null
    },
    {
        "Rochester Electronics": "Rochester Electronics"
    },
    {
        " to start manufacturing the MC6809 once again as a drop-in replacement and copy of the original NMOS device. Freescale supplied Rochester the original ": null
    },
    {
        "GDSII": "Gdsii"
    },
    {
        " physical design database. At the end of 2016, Rochesters MC6809 is fully qualified and available in production.     Australian developer John Kent has synthesized the Motorola 6809 CPU in hardware description language .  This has made possible the use of the 6809 core at much higher clock speeds than were available with the original 6809. Gary Beckers  runs the Kent 6809 core at 25 MHz. Roger Taylors Matchbox CoCo runs at 7.16 MHz. Dave Philipsens  runs at 25 MHz.       ": null
    }
]