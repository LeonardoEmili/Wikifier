A file archiver is a  |computer_program|Computer_Program|  that combines a number of  |files|Computer_File|  together into one  |archive_file|Archive_File| , or a series of archive files, for easier transportation or storage. File archivers may employ  |lossless_data_compression|Lossless_Data_Compression|  in their  |archive_formats|Archive_Format|  to reduce the size of the archive.     Basic archivers just take a list of files and concatenate their contents sequentially into archives. The archive files need to store  |metadata|Metadata| , at least the names and lengths of the original files, if proper reconstruction is possible. More advanced archivers store additional metadata, such as the  |original_timestamps|Timestamping| ,  |file_attributes|File_Attribute|  or  |access_control_lists|Access_Control_List| .     The process of making an archive file is called archiving or packing. Reconstructing the original files from the archive is termed unarchiving, unpacking or extracting.       An early archiver was the  |Multics|Multics|  command archive, descended from the  |CTSS|Compatible_Time_Sharing_System|  command of the same name, which was a basic archiver and performed no compression. Multics also had a tapearchiver command, abbreviated ta, which was perhaps the forerunner of unix tar.        The  |Unix|Unix|  tools  ar ,  tar ,  cpio  act as archivers but not compressors. Users of the Unix tools use additional compression tools, such as  |gzip|Gzip| ,  |bzip2|Bzip2| , or  |xz|Xz_Utils| , to compress the archive file after packing or remove compression before unpacking the archive file. The  |filename_extensions|Filename_Extension|  are successively added at each step of this process. For example, archiving a collection of files with tar and then compressing the resulting archive file with gzip results a file with .tar.gz extension.     This approach has two goals:   It follows the  |Unix_philosophy|Unix_Philosophy|  that each program should accomplish a single task to perfection, as opposed to attempting to accomplish everything with one tool. As compression technology progresses, users may use different compression programs without having to modify or abandon their archiver.   The archives use  |solid_compression|Solid_Compression| . When the files are combined, the compressor can exploit redundancy across several archived files and achieve better compression than a compressor that compresses each files individually.     This approach, however, has disadvantages too:   Extracting or modifying one file is difficult. Extracting one file requires decompressing an entire archive, which can be time- and space-consuming. Modifying one means the file needs to be put back into archive and the archive recompressed again. This operation requires additional time and disk space.   The archive becomes damage-prone. If the area holding shared data for several files is damaged, all those files are lost.   Its impossible to take advantage of redundancy between files unless the compression window is larger than the size of an individual file. For example, gzip uses  |DEFLATE|Deflate| , which typically operates with a 32768 byte window, whereas bzip2 uses a  |Burrows_Wheeler_transform|Burrows_Wheeler_Transform|  roughly 27 times bigger. xz defaults to 8 MiB but supports significantly larger windows.       The built-in archiver of  |Microsoft_Windows|Microsoft_Windows|  as well as third-party archiving software, such as  |WinRAR|Winrar|  and  |7_zip|7_Zip| , often use a  |graphical_user_interface|Graphical_User_Interface| . They also offer an optional  |command_line_interface|Command_Line_Interface| , while Windows itself does not. Windows archivers perform both archiving and compression.  |Solid_compression|Solid_Compression| .