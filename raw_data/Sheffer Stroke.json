[
    {
        "In ": null
    },
    {
        "Boolean functions": "Boolean Function"
    },
    {
        " and ": null
    },
    {
        "propositional calculus": "Propositional Calculus"
    },
    {
        ", the Sheffer stroke denotes a ": null
    },
    {
        "logical operation": "Logical Operation"
    },
    {
        " that is equivalent to the ": null
    },
    {
        "negation": "Logical Negation"
    },
    {
        " of the ": null
    },
    {
        "conjunction": "Logical Conjunction"
    },
    {
        " operation, expressed in ordinary language as not both . It is also called nand or the alternative denial, since it says in effect that at least one of its operands is false. In ": null
    },
    {
        "digital electronics": "Digital Electronics"
    },
    {
        ", it corresponds to the ": null
    },
    {
        "NAND gate": "Nand Gate"
    },
    {
        ". It is named after ": null
    },
    {
        "Henry M. Sheffer": "Henry M. Sheffer"
    },
    {
        " and written as ↑ or as | . In ": null
    },
    {
        "Bocheński notation": "Józefmariabocheński"
    },
    {
        " it can be written as Dpq.     Its ": null
    },
    {
        "dual": "Duality"
    },
    {
        " is the ": null
    },
    {
        "NOR operator": "Logical Nor"
    },
    {
        " . Like its dual, NAND can be used by itself, without any other logical operator, to constitute a logical ": null
    },
    {
        "formal system": "Formal System"
    },
    {
        " . This property makes the ": null
    },
    {
        "NAND gate": "Nand Gate"
    },
    {
        " crucial to modern ": null
    },
    {
        "digital electronics": "Digital Electronics"
    },
    {
        ", including its use in ": null
    },
    {
        "computer processor": "Computer Processor"
    },
    {
        " design.       The NAND operation is a ": null
    },
    {
        "logical operation": "Logical Operation"
    },
    {
        " on two ": null
    },
    {
        "logical values": "Logical Value"
    },
    {
        ". It produces a value of true, if — and only if — at least one of the ": null
    },
    {
        "propositions": "Proposition"
    },
    {
        " is false.       The ": null
    },
    {
        "truth table": "Truth Table"
    },
    {
        " of P   Q  is as follows              The Sheffer stroke of P and Q is the negation of their conjunction          By ": null
    },
    {
        "De Morgans Laws": "De Morgans Laws"
    },
    {
        ", this is also equivalent to the disjunction of the negations of P and Q            The stroke is named after ": null
    },
    {
        "Henry M. Sheffer": "Henry M. Sheffer"
    },
    {
        ", who in 1913 published a paper in the  Transactions of the American Mathematical Society  providing an axiomatization of ": null
    },
    {
        "Boolean algebras": "Boolean Algebra"
    },
    {
        " using the stroke, and proved its equivalence to a standard formulation thereof by ": null
    },
    {
        "Huntington": "Edward Vermilye Huntington"
    },
    {
        " employing the familiar operators of ": null
    },
    {
        "propositional logic": "Propositional Logic"
    },
    {
        " . Because of self-": null
    },
    {
        "duality": "Duality"
    },
    {
        " of Boolean algebras, Sheffers axioms are equally valid for either of the NAND or NOR operations in place of the stroke. Sheffer interpreted the stroke as a sign for nondisjunction  in his paper, mentioning non-conjunction only in a footnote and without a special sign for it. It was ": null
    },
    {
        "Jean Nicod": "Jean Nicod"
    },
    {
        " who first used the stroke as a sign for non-conjunction in a paper of 1917 and which has since become current practice.  Russell and Whitehead used the Sheffer stroke in the 1927 second edition of  Principia Mathematica  and suggested it as a replacement for the or and not operations of the first edition.     ": null
    },
    {
        "Charles Sanders Peirce": "Charles Sanders Peirce"
    },
    {
        " had discovered the ": null
    },
    {
        "functional completeness": "Functional Completeness"
    },
    {
        " of NAND or NOR more than 30 years earlier, using the term  ampheck  , but he never published his finding.       NAND does not possess any of the following five properties, each of which is required to be absent from, and the absence of all of which is sufficient for, at least one member of a set of ": null
    },
    {
        "functionally complete": "Functional Completeness"
    },
    {
        " operators: truth-preservation, falsity-preservation, ": null
    },
    {
        "linearity": "Affine Transformation"
    },
    {
        ", ": null
    },
    {
        "monotonic": "Monotonic"
    },
    {
        "ity, ": null
    },
    {
        "self-duality": "Duality Duality In Logic And Set Theory"
    },
    {
        ". Therefore is a functionally complete set.     This can also be realized as follows: All three elements of the functionally complete set can be ": null
    },
    {
        "constructed using only NAND": "Introduction, Elimination, And Equivalencies"
    },
    {
        ". Thus the set must be functionally complete as well.         Expressed in terms of NAND   , the usual operators of propositional logic are:            The following is an example of a ": null
    },
    {
        "formal system": "Formal System"
    },
    {
        " based entirely on the Sheffer stroke, yet having the functional expressiveness of the ": null
    },
    {
        "propositional logic": "Propositional Logic"
    },
    {
        "p n  for natural numbers n       The Sheffer stroke commutes but does not associate . Hence any formal system including the Sheffer stroke must also include a means of indicating grouping. We shall employ to this effect.     We also write p, q, r, … instead of p 0 , p 1 , p 2 .       Construction Rule I: For each natural number n, the symbol p n  is a ": null
    },
    {
        "well-formed formula": "Well-Formed Formula"
    },
    {
        " , called an atom.     Construction Rule II: If X and Y are wffs, then  is a wff.     Closure Rule: Any formulae which cannot be constructed by means of the first two Construction Rules are not wffs.     The letters U, V, W, X, and Y are metavariables standing for wffs.     A decision procedure for determining whether a formula is well-formed goes as follows: deconstruct the formula by applying the Construction Rules backwards, thereby breaking the formula into smaller subformulae. Then repeat this recursive deconstruction process to each of the subformulae. Eventually the formula should be reduced to its atoms, but if some subformula cannot be so reduced, then the formula is not a wff.       All wffs of the form   :   are axioms. Instances of   :, U   W   are inference rules.       Since the only connective of this logic is |, the symbol | could be discarded altogether, leaving only the parentheses to group the letters. A pair of parentheses must always enclose a pair of wffs. Examples of theorems in this simplified notation are     : ,     : .     The notation can be simplified further, by letting   :  :    :    U   for any U. This simplification causes the need to change some rules:   More than two letters are allowed within parentheses.   Letters or wffs within parentheses are allowed to commute.   Repeated letters or wffs within a same set of parentheses can be eliminated.   The result is a parenthetical version of the Peirce ": null
    },
    {
        "existential graphs": "Existential Graph"
    },
    {
        ".     Another way to simplify the notation is to eliminate parentheses by using ": null
    },
    {
        "Polish Notation": "Polish Notation"
    },
    {
        ". For example, the earlier examples with only parentheses could be rewritten using only strokes as follows     :  becomes   : |p p q q pq pq, and     :  becomes,   : |p p qq pp.     This follows the same rules as the parenthesis version, with the opening parenthesis replaced with a Sheffer stroke and the closing parenthesis removed.     Or one could omit both parentheses and strokes and allow the order of the arguments to determine the order of function application so that for example, applying the function from right to left     : pqr   , whereas   : rqp   ": null
    }
]