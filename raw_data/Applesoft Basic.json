[
    {
        "Applesoft BASIC is a dialect of ": null
    },
    {
        "Microsoft BASIC": "Microsoft Basic"
    },
    {
        ", developed by ": null
    },
    {
        "Marc McDonald": "Marc Mcdonald"
    },
    {
        " and ": null
    },
    {
        "Ric Weiland": "Ric Weiland"
    },
    {
        ", supplied with the ": null
    },
    {
        "Apple II series": "Apple Ii Series"
    },
    {
        " of computers. It supersedes ": null
    },
    {
        "Integer BASIC": "Integer Basic"
    },
    {
        " and is the BASIC in ": null
    },
    {
        "ROM": "Read-Only Memory"
    },
    {
        " in all Apple II series computers after the original ": null
    },
    {
        "Apple II": "Apple Iiapple Ii"
    },
    {
        " model. It is also referred to as FP BASIC  because of the ": null
    },
    {
        "Apple DOS": "Apple Dos"
    },
    {
        " command used to invoke it, instead of INT for Integer BASIC.     Applesoft BASIC was supplied by ": null
    },
    {
        "Microsoft": "Microsoft"
    },
    {
        " and its name is derived from the names of both ": null
    },
    {
        "Apple": "Apple Inc."
    },
    {
        " and ": null
    },
    {
        "Microsoft": "Microsoft"
    },
    {
        ". Apple employees, including ": null
    },
    {
        "Randy Wigginton": "Randy Wigginton"
    },
    {
        ", adapted Microsofts interpreter for the Apple II and added several features. The first version of Applesoft was released in 1977 on ": null
    },
    {
        "cassette tape": "Cassette Tape"
    },
    {
        " and lacked proper support for high-resolution graphics. Applesoft II, which was made available on cassette and disk and in the ROM of the ": null
    },
    {
        "Apple II Plus": "Apple Ii Plus"
    },
    {
        " and subsequent models, was released in 1978. It is this latter version, which has some syntax differences and support for the Apple II high-resolution graphics modes, that is usually synonymous with the term Applesoft.     An Applesoft compiler, TASC , was produced by ": null
    },
    {
        "Microsoft": "Microsoft"
    },
    {
        " in 1981.        When ": null
    },
    {
        "Steve Wozniak": "Steve Wozniak"
    },
    {
        " wrote ": null
    },
    {
        "Integer BASIC": "Integer Basic"
    },
    {
        " for the ": null
    },
    {
        "Apple II": "Apple Ii"
    },
    {
        ", he did not implement support for ": null
    },
    {
        "floating point": "Floating Point"
    },
    {
        " math because he was primarily interested in writing games, a task for which integers alone were sufficient.  In 1976, Microsoft had developed ": null
    },
    {
        "Microsoft BASIC": "Microsoft Basic"
    },
    {
        ", a BASIC interpreter for the ": null
    },
    {
        "MOS Technology 6502": "Mos Technology 6502"
    },
    {
        ", but at the time there was no production computer that used it. Upon learning that Apple had a 6502 machine, Microsoft asked if the company were interested in licensing BASIC, but ": null
    },
    {
        "Steve Jobs": "Steve Jobs"
    },
    {
        " replied that Apple already had one.     The Apple II was unveiled to the public at the ": null
    },
    {
        "West Coast Computer Faire": "West Coast Computer Faire"
    },
    {
        " in April 1977 and became available for sale in June. One of the most common customer complaints about the computer was BASICs lack of floating-point capability.  Integer BASIC is limited to whole numbers between −32768 and 32767 and caused problems for users attempting to write business applications with it. Steve Wozniak had never added floating point capabilities to Integer BASIC as he did not consider them necessary for gaming and educational software, the two primary tasks he envisioned for the Apple II. As Wozniak—the only person who understood Integer BASIC well enough to add floating point features—was busy with the ": null
    },
    {
        "Disk II": "Disk Ii"
    },
    {
        " drive and controller and with ": null
    },
    {
        "Apple DOS": "Apple Dos"
    },
    {
        ", Apple turned to Microsoft. Making things more problematic was that the rival ": null
    },
    {
        "Commodore PET": "Commodore Pet"
    },
    {
        " personal computer had a floating point-capable BASIC interpreter from the beginning. The Applesoft license also saved Microsoft from near-bankruptcy when they licensed BASIC to Commodore for the PET in an agreement that proved unexpectedly costly for them.     Apple reportedly obtained an eight-year license for Applesoft BASIC from Microsoft for a flat fee of $31,000, renewing it in 1985 through an arrangement that gave Microsoft the rights and source code for Apples ": null
    },
    {
        "Macintosh version of BASIC": "Macbasic"
    },
    {
        ". Herzfeld, Andy MacBasic – The Sad Story of MacBasic .  & storyMacBasic.txt . Folklore.org. 2014 February 12 Applesoft was designed to be backwards-compatible with Integer BASIC and uses the core of Microsofts 6502 BASIC implementation, which includes using the GET command for detecting key presses and not requiring any spaces on program lines. While Applesoft BASIC is slower than Integer BASIC, it has many features that the older BASIC lacks:   Atomic strings: A string is no longer an array of characters ; it is instead a ": null
    },
    {
        "garbage-collected": "Garbage Collection"
    },
    {
        " object . This allows for string arrays;  resulted in a ": null
    },
    {
        "vector": "Array Data Type"
    },
    {
        " of eleven string variables numbered 0–10.   Multidimensional ": null
    },
    {
        "arrays": "Array Data Type"
    },
    {
        "   Single-precision ": null
    },
    {
        "floating point": "Floating Point"
    },
    {
        " variables with an 8-bit exponent and a 31-bit significand and improved math capabilities, including trigonometry and logarithmic functions   Commands for high-resolution graphics   DATA statements, with READ and RESTORE commands, for representing numerical and string values in quantity   CHR$ , STR$ , and VAL functions for converting between string and numeric types   ": null
    },
    {
        "User-defined functions": "User-Defined Function"
    },
    {
        ": simple one-line functions written in BASIC, with a single parameter   Error-trapping, allowing BASIC programs to handle unexpected errors by means of a subroutine written in BASIC   Conversely, Applesoft lacks the MOD operator that had been present in Integer BASIC.     Adapting BASIC for the Apple II was a tedious job as Apple received a source listing for Microsoft 6502 BASIC which proved to be buggy and also required the addition of Integer BASIC commands. Since Apple had no 6502 assembler on hand, the development team was forced to send the source code over the phone lines to Call Computer, an outfit that offered compiler services. This was an extremely tedious, slow process and after Call Computer lost the source code due to an equipment malfunction, one of the programmers, Cliff Huston, used his own IMSAI 8080 computer to ": null
    },
    {
        "cross assemble": "Cross Assembler"
    },
    {
        " the BASIC source.        Applesoft is similar to Commodores BASIC 2.0 aside from features inherited from Integer BASIC. There are a few minor differences such as Applesofts lack of bitwise operators; otherwise most BASIC programs that do not utilize hardware-dependent features will run on both BASICs.     The PR statement is used to redirect output to an expansion card, and IN is used to redirect input from an expansion card. The slot number of the card is specified after the PR or IN within the statement. The computer will lock up if there is no card present in the slot and require a reboot. PR0 will restore output to the 40 column screen and IN0 to the keyboard.     The PR statement can be used to redirect output to the printer  where x is the slot number containing the printer port card. To send a BASIC program listing to the printer, the user would type . After outputting to the printer, it is necessary to execute a PR0 statement to reset output to the screen.     PR6 will cause Applesoft to boot the disk drives . PR3 will switch to 80 column text mode if an 80 column card is present. 80 column cards also add 12 new control codes that can be generated with the CHR$ function. Enhanced Apple IIe and IIc models with the MouseText character set include another two control codes to enable and disable the feature.     As with Commodore BASIC, numeric variables are stored as 40-bit floating point; each variable requires five bytes of memory. The programmer may designate variables as integer by following them with a percent sign, in which case they use two bytes and are limited to a range of -32768 to 32767; however BASIC internally converts them back to floating point, while each percent sign also takes an additional byte of program code, so in practice this feature is only useful for reducing the memory usage of large array variables.     The RND function generates a ": null
    },
    {
        "pseudorandom": "Pseudorandom Number Generator"
    },
    {
        " fractional number between 0 and 1.  returns the most recently generated random number. RND with a negative number will jump to a point in the sequence determined by the particular negative number used. RND with any positive value will generate a new random number from the sequence, not dependent on the actual value given. Random numbers are generated via a formula based on the previously generated value, and thus are not truly random. Locations $4E and $4F, which the system cycles the values of continuously while waiting for user keystrokes, can be PEEKed to provide truly random values to use as a seed for RND.     Like other implementations of Microsoft BASIC, Applesoft discards spaces on program lines. LIST adds spaces when displaying code for the sake of readability. Since the LIST code will add a space before AND after every tokenized keyword, it often produces two spaces in a row where one would suffice for readability.     The default prompt for INPUT is a question mark. PRINT does not add a leading space in front of numbers.     ": null
    },
    {
        "Coleco": "Coleco"
    },
    {
        " claimed that its ": null
    },
    {
        "Adam": "Coleco Adam"
    },
    {
        " home computers SmartBASIC was source-code compatible with Applesoft.  Microsoft licensed a BASIC compatible with Applesoft to ": null
    },
    {
        "VTech": "Vtech"
    },
    {
        " for its ": null
    },
    {
        "Laser 128": "Laser 128"
    },
    {
        " clone": "Apple Ii Clone"
    },
    {
        ".        Through several early models of the Apple II, Applesoft BASIC did not support the use of ": null
    },
    {
        "lowercase": "Lowercase"
    },
    {
        " letters in programs, except in strings. PRINT is a valid command but print and Print result in a syntax error.     Applesoft lacks several commands and functions common to most of the non-6502 Microsoft BASIC interpreters, such as:   INSTR   PRINT USING   INKEY$   LPRINT     Applesoft does not come with any built-in commands for file or disk handling, other than a way to save programs to, and load programs from, cassette tape. The Apple II disk operating system, known simply as DOS, augments the language to provide such abilities.     Applesoft BASIC variable names are significant only to two letters. They can be made longer, but only the first two letters are used. For instance, LOW and LOSS are treated as the same variable, and attempting to assign a value to LOSS overwrites any value assigned to LOW . Because the language uses ": null
    },
    {
        "tokenization": "Tokenization"
    },
    {
        ", a programmer has to avoid consecutive letters that are also Applesoft commands or operations. The name SCORE for a variable is interpreted as containing the OR Boolean operator, rendered as SC OR E . BACKGROUND contains GR , the command to invoke the low-resolution graphics mode, and results in a syntax error.       The only sound support is the option to PRINT an ASCII ": null
    },
    {
        "bell character": "Bell Character"
    },
    {
        " to sound the system alert ": null
    },
    {
        "beep": "Beep"
    },
    {
        ", and a ": null
    },
    {
        "PEEK": "Peek And Poke"
    },
    {
        " command to click the speaker. The language is not fast enough to produce more than a baritone buzz from repeated clicks. Programs can, however, store a machine-language routine to be called to generate electronic musical tones spanning several octaves.     Applesoft supports the Apple II lores graphics display, where 40 color blocks horizontally, and up to 48 blocks vertically, can be displayed in 16 colors, with commands to plot individual blocks and horizontal or vertical lines; as well as the hires mode, where six colors can be displayed in a resolution of 280 horizontally by 192 vertically , with a command to draw points or any diagonal lines onscreen. Beginning with the Apple IIe, a new double-high resolution mode, based on a mode introduced on the ": null
    },
    {
        "Apple III": "Apple Iii"
    },
    {
        " computer, became available on machines with 128k of memory. This mode essentially duplicates the resolution of the original hires mode, but including all 16 colors of the lores palette. Applesoft, however, does not provide support for this mode, and must rely on supplemental machine-language routines in order to utilize it. Additional new graphics modes on the ": null
    },
    {
        "Apple IIgs": "Apple Iigs"
    },
    {
        " are likewise not supported.     No provision exists for mixing text and graphics, except for the limited hardware split screen of the Apple II .     Vector-based ": null
    },
    {
        "shape tables": "Shape Table"
    },
    {
        " can be used to draw objects in hires graphics, but are slow in comparison to routines that draw bitmaps directly. They also only support the defining of horizontal and vertical lines. Diagonals and curves are not supported, although shapes can be drawn rotated to various angles, so that lines ostensibly defined as horizontal or vertical will appear diagonal. In addition, shapes can be drawn scaled up to larger sizes.       Applesoft BASIC can be extended by two means: the ampersand command and the USR function. These are two features that call low-level machine-language routines stored in memory, which is useful for routines that need to be fast or require direct access to arbitrary functions or data in memory. The USR function takes one numerical argument, and can be programmed to derive and return a calculated function value, to be used in a numerical expression. & is effectively a shorthand for CALL, with an address that is predefined.       A deficiency in Applesofts error-trapping with ONERR means that the system stack would not be reset if an error-handling routine did not invoke RESUME, potentially leading to a crash. Error-handling that does not employ RESUME can avoid the problem with a CALL -3288 or 62248 before exiting the routine. Applesoft BASIC Programmers Reference Manual , Apple Computer, Inc., 1982       Wozniak originally referred to his Integer BASIC as Game BASIC . Few ": null
    },
    {
        "action games": "Action Game"
    },
    {
        " were written in Applesoft BASIC, in large part because the use of floating-point numbers for all math operations degrades performance.     Applesoft BASIC programs are stored as a ": null
    },
    {
        "linked list": "Linked List"
    },
    {
        " of lines; a GOTO or GOSUB takes ": null
    },
    {
        "linear time": "Computational Complexity Theory"
    },
    {
        ". Some programs had the subroutines at the top to reduce the time for calling them.     Unlike what Integer BASIC does, Applesoft BASIC does not convert literal numbers in the source code into the internal binary format at the time the source line is entered; rather, the string of digits is stored as entered and the relatively slow conversion happens at runtime whenever the line is executed. Since variable lookup is often faster than this conversion, it is generally faster to store numeric constants that are used inside loops in variables, before the loop is entered.          ": null
    },
    {
        "Hello World": "Hello World"
    },
    {
        " in Applesoft BASIC can be entered as the following:     10TEXT:HOME   20? HELLO WORLD     Multiple commands can be included on the same line of code if separated by a colon . The ? can be used in Applesoft BASIC as a shortcut for PRINT , though spelling out the word is not only acceptable but canonical—Applesoft converted ? in entered programs to the same token as PRINT , thus either appears as PRINT when a program is listed. The program above appears in a LIST command as:     10 TEXT : HOME   20 PRINT HELLO WORLD     This article includes text from , licensed under GFDL.     When Applesoft II BASIC was initially released in mid-1978, it came on cassette tape and could be loaded into memory via the Apple IIs machine language monitor. When the enhanced Apple II+ replaced the original II in 1979, Applesoft was now included in ROM and automatically started on power-up if no bootable floppy disk was present. Conversely, Integer BASIC was now removed from ROM and turned into an executable file on the DOS 3.3 disk.       The original Applesoft, stored in RAM as documented in its Reference Manual of November 1977, has smaller interpreter code than the later Applesoft II, occupying 8½ kb of memory, Applesoft Extended Precision Floating Point Basic Language Reference Manual, Apple Computer, Inc., November 1977 instead of the 10 kb used by the later Applesoft II. Consequently, it lacks a number of command features developed for the later, mainstream version:   All commands supporting Apples high resolution graphics   Error-trapping with ONERR...GOTO and RESUME   Machine-routine shorthand call &   Screen-clearing HOME   Text-output control NORMAL, INVERSE, FLASH and SPEED   The print-space function SPC is listed among reserved words in the manual, but is not otherwise documented    Cassette tape storage of numerical arrays: STORE and RECALL   Device response: WAIT   as well as several the later version would have, that had already been present in Apples Integer BASIC:   Program-line deletion: DEL   Machine-routine access: CALL   Peripheral device access: IN and PR   Memory range control: HIMEM: and LOMEM:   Execution tracking for debugging: TRACE and NOTRACE   Screen-positioning: HTAB and VTAB   Subroutine aborting POP   Functions PDL to read the analog controllers, and SCRN to read the low-resolution graphics screen   In addition, its low-resolution graphics commands have different names from their Integer BASIC/Applesoft II counterparts. All command names are of the form PLTx such that GR, COLOR, PLOT, HLIN and VLIN are called PLTG, PLTC, PLTP, PLTH, and PLTV, respectively. The command for returning to text mode, known as TEXT in other versions, is simply TEX, and carries the proviso that it has to be the last statement in a program line.     Applesoft BASIC 1.x was closer to Microsofts original 6502 BASIC code than the later Applesoft II; it retained the Memory Size? prompt and displayed a Microsoft copyright notice. To maintain consistency with Integer BASIC, the Ok prompt from Microsofts code was replaced by a character. Applesoft 1.x also prompted the user upon loading if he wished to disable the REM statement and the LET keyword in assignment statements in exchange for lores graphics commands.     The USR function is also defined differently, serving as a stand-in for the absent CALL command. Its argument is not for passing a numerical value to the machine-language routine, but is instead the call-address of the routine itself; there is no hook to pre-define the address. All of several examples in the manual use the function only to access system monitor ROM routines, or short user-routines to manipulate the ROM routines. No mention is made of any code to calculate the value returned by the function itself; the function is always shown being assigned to dummy variables, which, without action to set a value by user-code, just receive a meaningless value handed back to them. Even accessed ROM routines that return values merely have their values stored, by user-routines, in locations that are separately PEEKed in a subsequent statement.     Unlike in Integer BASIC and Applesoft II, the Boolean operators AND, OR and NOT perform ": null
    },
    {
        "bitwise operation": "Bitwise Operation"
    }
]