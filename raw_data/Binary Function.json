[
    {
        "In ": null
    },
    {
        "mathematics": "Mathematics"
    },
    {
        ", a binary function  is a ": null
    },
    {
        "function": "Function"
    },
    {
        " that takes two inputs.     Precisely stated, a function f is binary if there exists ": null
    },
    {
        "sets": "Set"
    },
    {
        " X, Y, Z such that   : \\,f \\colon X \\times Y \\rightarrow Z   where X \\times Y is the ": null
    },
    {
        "Cartesian product": "Cartesian Product"
    },
    {
        " of X and Y.       ": null
    },
    {
        "Set-theoretically": "Naive Set Theory"
    },
    {
        ", one may represent a binary function as a ": null
    },
    {
        "subset": "Subset"
    },
    {
        " of the ": null
    },
    {
        "Cartesian product": "Cartesian Product"
    },
    {
        " X × Y × Z, where  belongs to the subset ": null
    },
    {
        "if and only if": "If And Only If"
    },
    {
        " f z.   Conversely, a subset R defines a binary function if and only if ": null
    },
    {
        "for any": "Universal Quantification"
    },
    {
        " x in X and y in Y, ": null
    },
    {
        "there exists": "Existential Quantification"
    },
    {
        " a ": null
    },
    {
        "unique": "Uniqueness Quantification"
    },
    {
        " z in Z such that  belongs to R.   We then define f to be this z.     Alternatively, a binary function may be interpreted as simply a ": null
    },
    {
        "function": "Function"
    },
    {
        " from X × Y to Z.   Even when thought of this way, however, one generally writes f  instead of f.          Division of ": null
    },
    {
        "whole numbers": "Integer"
    },
    {
        " can be thought of as a function; if \\mathbb is the set of ": null
    },
    {
        "integer": "Integer"
    },
    {
        "s, \\mathbb^+ is the set of ": null
    },
    {
        "natural numbers": "Natural Number"
    },
    {
        ", and \\mathbb is the set of ": null
    },
    {
        "rational number": "Rational Number"
    },
    {
        "s, then ": null
    },
    {
        "division": "Division"
    },
    {
        " is a binary function f:\\mathbb \\times \\mathbb^+ \\rightarrow \\mathbb .     Another example is that of inner products, or more generally functions of the form \\mapsto x^TMy where x,y are real-valued vectors of appropriate size and M is a matrix. If M is a ": null
    },
    {
        "positive definite matrix": "Positive Definite Matrix"
    },
    {
        ", this yields an ": null
    },
    {
        "inner product": "Inner Product"
    },
    {
        ".        Functions whose domain is a subset of \\mathbb^2 are often also called functions of two variables even if their domain does not form a rectangle and thus the cartesian product of two sets.        In turn, one can also derive ordinary functions of one variable from a binary function.   Given any element x of X, there is a function f x , or f , from Y to Z, given by f x  : f .   Similarly, given any element y of Y, there is a function f y , or f , from X to Z, given by f y  : f . In computer science, this identification between a function from X × Y to Z and a function from X to Z Y , where Z Y is the set of all functions from Y to Z, is called  currying .       The various concepts relating to functions can also be generalised to binary functions.   For example, the division example above is  surjective   because every rational number may be expressed as a quotient of an integer and a natural number.   This example is  injective  in each input separately, because the functions f x and f y are always injective.   However, its not injective in both variables simultaneously, because f f .     One can also consider partial binary functions, which may be defined only for certain values of the inputs.   For example, the division example above may also be interpreted as a partial binary function from Z and N to Q, where N is the set of all natural numbers, including zero.   But this function is undefined when the second input is zero.     A ": null
    },
    {
        "binary operation": "Binary Operation"
    },
    {
        " is a binary function where the sets X, Y, and Z are all equal; binary operations are often used to define ": null
    },
    {
        "algebraic structure": "Algebraic Structure"
    },
    {
        "s.     In ": null
    },
    {
        "linear algebra": "Linear Algebra"
    },
    {
        ", a ": null
    },
    {
        "bilinear transformation": "Bilinear Operator"
    },
    {
        " is a binary function where the sets X, Y, and Z are all ": null
    },
    {
        "vector spaces": "Vector Space"
    },
    {
        "and the derived functions f x and f y are all ": null
    },
    {
        "linear transformation": "Linear Transformation"
    },
    {
        "s.   A bilinear transformation, like any binary function, can be interpreted as a function from X × Y to Z, but this function in general wont be linear.   However, the bilinear transformation can also be interpreted as a single linear transformation from the ": null
    },
    {
        "tensor product": "Tensor Product"
    },
    {
        " X \\otimes Y to Z.          The concept of binary function generalises to ternary  function, quaternary  function, or more generally to n-ary function for any ": null
    },
    {
        "natural number": "Natural Number"
    },
    {
        " n.   A 0-ary function to Z is simply given by an element of Z.   One can also define an A-ary function where A is any ": null
    },
    {
        "set": "Set"
    },
    {
        "; there is one input for each element of A.       In ": null
    },
    {
        "category theory": "Category Theory"
    },
    {
        ", n-ary functions generalise to n-ary morphisms in a ": null
    },
    {
        "multicategory": "Multicategory"
    },
    {
        ".   The interpretation of an n-ary morphism as an ordinary morphisms whose domain is some sort of product of the domains of the original n-ary morphism will work in a ": null
    },
    {
        "monoidal category": "Monoidal Category"
    },
    {
        ".   The construction of the derived morphisms of one variable will work in a ": null
    },
    {
        "closed monoidal category": "Closed Monoidal Category"
    }
]