In  |mathematics|Mathematics|  and  |computer_science|Computer_Science| , currying is the technique of translating the evaluation of a  |function|Function|  that takes multiple  |arguments|Parameter|  into evaluating a sequence of functions, each with a single argument. For example, a function that takes two arguments, one from X and one from Y, and produces outputs in Z, by currying is translated into a function that takes a single argument from X and produces as outputs functions from Y to Z. Currying is related to, but not the same as,  |partial_application|Partial_Application| .     Currying is useful in both practical and theoretical settings. In  |functional_programming_languages|Functional_Programming_Language| , and many others, it provides a way of automatically managing how arguments are passed to functions and exceptions. In  |theoretical_computer_science|Theoretical_Computer_Science| , it provides a way to study functions with multiple arguments in simpler theoretical models which provide only one argument. The most general setting for the strict notion of currying and uncurrying is in the  |closed_monoidal_categories|Closed_Monoidal_Category| , which underpins a vast generalization of the  |Curry–Howard_correspondence|Curry–Howard_Correspondence|  of proofs and programs to a correspondence with many other structures, including quantum mechanics, cobordisms and string theory. It was introduced by  |Gottlob_Frege|Gottlob_Frege| ,  |Willard_Van_Orman_Quine|Willard_Van_Orman_Quine| , introduction to  |Moses_Schönfinkels|Moses_Schönfinkel|  Bausteine der mathematischen Logik , pp.  355  357, esp. 355. Translated by Stefan Bauer-Mengelberg as On the building blocks of mathematical logic in  |Jean_van_Heijenoort|Jean_Van_Heijenoort|  , A Source Book in Mathematical Logic, 1879  1931. Harvard University Press, pp. 355  66. developed by  |Moses_Schönfinkel|Moses_Schönfinkel| ,   Kenneth Slonneger and Barry L. Kurtz. Formal Syntax and Semantics of Programming Languages. 1995. p.  144.   and further developed by  |Haskell_Curry|Haskell_Curry| . Henk Barendregt, Erik Barendsen,  , March 2000, page  8.      Uncurrying is the  |dual|Duality|  transformation to currying, and can be seen as a form of  |defunctionalization|Defunctionalization| . It takes a  |function|Function|  f whose return value is another function g , and yields a new function f that takes as parameters the arguments for both f and g , and returns, as a result, the application of f and subsequently, g , to those arguments. The process can be iterated.       Currying provides a way for working with functions that take multiple arguments, and using them in frameworks where functions might take only one argument. For example, some  |analytical_techniques|Definition|  can only be applied to  |functions|Function|  with a single argument. Practical functions frequently take more arguments than this.  |Frege|Gottlob_Frege|  showed that it was sufficient to provide solutions for the single argument case, as it was possible to transform a function with multiple arguments into a chain of single-argument functions instead. This transformation is the process now known as currying.  All ordinary functions that might typically be encountered in  |mathematical_analysis|Mathematical_Analysis|  or in  |computer_programming|Computer_Programming|  can be curried. However, there are categories in which currying is not possible; the most general categories which allow currying are the  |closed_monoidal_categories|Closed_Monoidal_Category| .     Some  |programming_languages|Programming_Language|  almost always use curried functions to achieve multiple arguments; notable examples are  |ML|Ml_Programming_Language|  and  |Haskell|Haskell| , where in both cases all functions have exactly one argument. This property is inherited from  |lambda_calculus|Lambda_Calculus| , where multi-argument functions are usually represented in curried form.     Currying is related to, but not the same as  |partial_application|Partial_Application| . In practice, the programming technique of  |closures|Closure|  can be used to perform partial application and a kind of currying, by hiding arguments in an environment that travels with the curried function.       Suppose we have a function f:  which takes two real arguments and outputs real numbers, and it is defined by fx+y2 . Currying translates this into a function h which takes a single real argument and outputs functions from   to   . In symbols, h:  , where   denotes the set of all functions that take a single real argument and produce real outputs. For every real number x , define the function hx :   by hxx+y2 , and then define the function h:  by hhx . So for instance, h is the function that sends its real argument y to the output 2+y2 , or hh22+y2 . We see that in general     : hx+y2f     so that the original function f and its currying h convey exactly the same information. In this situation, we also write     :   h.     This also works for functions with more than two arguments. If f were a function of three arguments f , its currying h would have the property     : fh.       The name currying , coined by  |Christopher_Strachey|Christopher_Strachey|  in 1967, is a reference to logician  |Haskell_Curry|Haskell_Curry| . The alternative name Schönfinkelisation has been proposed as a reference to  |Moses_Schönfinkel|Moses_Schönfinkel| . I. Heim and A. Kratzer . Semantics in Generative Grammar. Blackwell. In the mathematical context, the principle can be traced back to work in 1893 by  |Frege|Gottlob_Frege| .       Currying is most easily understood by starting with an informal definition, which can then be molded to fit many different domains. First, there is some notation to be established. The notation X   Y denotes all  |functions|Function|  from X to Y . If f is such a function, we write f   X   Y . Let X   Y denote the  |ordered_pairs|Ordered_Pair|  of the elements of X and Y respectively, that is, the  |Cartesian_product|Cartesian_Product|  of X and Y . Here, X and Y may be sets, or they may be types, or they may be other kinds of objects, as explored below.     Given a function     : f     Z ,     currying constructs a new function     : h   X   .     That is, h takes an argument from X and returns a function that maps Y to Z . It is defined by     : hf     for x from X and y from Y . We then also write     :       Uncurrying is the reverse transformation, and is most easily understood in terms of its right adjoint, the  |function|Apply|        In  |set_theory|Set_Theory| , the notation YX is used to denote the  |set|Set|  of functions from the set X to the set Y . Currying is the  |natural_bijection|Natural_Equivalence|  between the set A of functions from B  C to A , and the set B of functions from B to the set of functions from C to A . In symbols:     : A  B     Indeed, it is this natural bijection that justifies the  |exponential_notation|Exponential_Notation|  for the set of functions. As is the case in all instances of currying, the formula above describes an  |adjoint_pair_of_functors|Adjoint_Functors| |category_of_sets|Category_Of_Sets| , the  |object|Mathematical_Object|  YX is called the  |exponential_object|Exponential_Object| .       In the theory of  |function_spaces|Function_Space| , such as in  |functional_analysis|Functional_Analysis|  or  |homotopy_theory|Homotopy_Theory| , one is commonly interested in  |continuous_functions|Continuous_Function|  between  |topological_spaces|Topological_Space| . One writes    for the set of all functions from X to Y , and uses the notation YX to denote the subset of continuous functions. Here,   is the  |bijection|Bijection|      :       ,     while uncurrying is the inverse map. If the set YX of continuous functions from X to Y is given the  |compact-open_topology|Compact-Open_Topology| , and if the space Y is  |locally_compact_Hausdorff|Locally_Compact_Hausdorff| , then     :   : Z  X     is a  |homeomorphism|Homeomorphism| . This is also the case when X , Y and YX are  |kaonized|Compactly_Generated_Space| , J.P. May, http://www.math.uchicago.edu/~may/CONCISE/ConciseRevised.pdf A Concise Course in Algebraic Topology, Chicago Lectures in Mathematics    although there are more cases. P. I. Booth and J. Tillotson,  , Pacific Journal of Mathematics, 88 pp.33-53.      One useful corollary is that a function is continuous  |if_and_only_if|If_And_Only_If|  its curried form is continuous. Another important result is that the  |application_map|Apply| , usually called evaluation in this context, is continuous  That is,       & &     X   Y     & &   f       is continuous when YX is compact-open and Y locally compact Hausdorff. Joseph J. Rotman, An Introduction to Algebraic Topology Springer-Verlag   These two results are central for establishing the continuity of  |homotopy|Homotopy| , i.e. when X is the unit interval I , so that Z   I can the thought of as either a homotopy of two functions from Y to Z , or, equivalently, a single path in ZY .       In  |algebraic_topology|Algebraic_Topology| , currying serves as an example of  |Eckmann–Hilton_duality|Eckmann–Hilton_Duality| , and, as such, plays an important role in a variety of different settings. For example,  |loop_space|Loop_Space|  is adjoint to  |reduced_suspensions|Reduced_Suspension| ; this is commonly written as   :     where is the set of  |homotopy_class|Homotopy_Class| es of maps A   B , and   A is the  |suspension|Suspension|  of A, and   A is the  |loop_space|Loop_Space|  of A. In essence, the suspension   X can be seen as the cartesian product of X with the unit interval, modulo an equivalence relation to turn the interval into a loop. The curried form then maps the space X to the space of functions from loops into Z , that is, from X into   Z . Then   is the  |adjoint_functor|Adjoint_Functor|  that maps suspensions to loop spaces, and uncurrying is the dual.     The duality between the  |mapping_cone|Mapping_Cone|  and the mapping fiber   can be understood as a form of currying, which in turn leads to the duality of the  |long_exact|Long_Exact_Sequence|  and coexact  |Puppe_sequences|Puppe_Sequence| .     In  |homological_algebra|Homological_Algebra| , the relationship between currying and uncurrying is known as  |tensor-hom_adjunction|Tensor-Hom_Adjunction| . Here, an interesting twist arises: the  |Hom_functor|Hom_Functor|  and the  |tensor_product|Tensor_Product|  functor might not  |lift|Lift|  to an  |exact_sequence|Exact_Sequence| ; this leads to the definition of the  |Ext_functor|Ext_Functor|  and the  |Tor_functor|Tor_Functor| .       In  |order_theory|Order_Theory| , that is, the theory of  |lattices|Lattice|  of  |partially_ordered_sets|Partially_Ordered_Set| ,   is a  |continuous_function|Continuous_Function|  when the lattice is given the  |Scott_topology|Scott_Topology| .   Scott-continuous functions were first investigated in the attempt to provide a semantics for  |lambda_calculus|Lambda_Calculus|  . More generally, Scott-continuous functions are now studied in  |domain_theory|Domain_Theory| , which encompasses the study of  |denotational_semantics|Denotational_Semantics|  of computer algorithms. Note that the Scott topology is quite different than many common topologies one might encounter in the  |category_of_topological_spaces|Category_Of_Topological_Spaces| ; the Scott topology is typically  |finer|Final_Topology| , and is not  |sober|Sober_Space| .     The notion of continuity makes its appearance in  |homotopy_type_theory|Homotopy_Type_Theory| , where, roughly speaking, two computer programs can be considered to be homotopic, i.e. compute the same results, if they can be continuously  |refactored|Code_Refactoring|  from one to the other.       In  |theoretical_computer_science|Theoretical_Computer_Science| , currying provides a way to study functions with multiple arguments in very simple theoretical models, such as the  |lambda_calculus|Lambda_Calculus| , in which functions only take a single argument. Consider a function f taking two arguments, and having the type   Z , which should be understood to mean that x must have the type X , y must have the type Y , and the function itself returns the type Z . The curried form of f is defined as     :     x.     where   is the abstractor of lambda calculus. Since curry takes, as input, functions with the type   Z , one concludes that the type of curry itself is     :         The → operator is often considered  |right-associative|Right-Associative| , so the curried function type X   is often written as X   Y   Z . Conversely,  |function_application|Function_Application|  is considered to be  |left-associative|Operator_Associativity| , so that f is equivalent to     :     x   .     That is, the parenthesis are not required to disambiguate the order of the application.     Curried functions may be used in any  |programming_language|Programming_Language|  that supports  |closures|Closure| ; however, uncurried functions are generally preferred for efficiency reasons, since the overhead of partial application and closure creation can then be avoided for most function calls.       In  |type_theory|Type_Theory| , the general idea of a  |type_system|Type_System|  in computer science is formalized into a specific algebra of types. For example, when writing f   X   Y , the intent is that X and Y are  |types|Type_System| , while the arrow   is a  |type_constructor|Type_Constructor| , specifically, the  |function_type|Function_Type|  or arrow type. Similarly, the Cartesian product X   Y of types is constructed by the  |product_type|Product_Type|  constructor   .     The type-theoretical approach is expressed in programming languages such as  |ML|Ml|  and the languages derived from and inspired by it:  |CaML|Caml| ,  |Haskell|Haskell|  and  |F|F_Sharp| .     The type-theoretical approach provides a natural complement to the language of  |category_theory|Category_Theory| , as discussed below. This is because categories, and specifically,  |monoidal_categories|Monoidal_Categories| , have an  |internal_language|Internal_Language| , with  |simply-typed_lambda_calculus|Simply-Typed_Lambda_Calculus|  being the most prominent example of such a language. It is important in this context, because it can be built from a single type constructor, the arrow type. Currying then endows the language with a natural product type. The correspondence between objects in categories and types then allows programming languages to be re-interpreted as logics , and as other types of mathematical systems, as explored further, below.       Under the  |Curry–Howard_correspondence|Curry–Howard_Correspondence| , the existence of currying and uncurrying is equivalent to the logical theorem   C   A   , as  |tuples|Tuple|   corresponds to conjunction in logic, and function type corresponds to implication.     The  |exponential_object|Exponential_Object|  QP in the category of  |Heyting_algebras|Heyting_Algebra|  is normally written as  |material_implication|Material_Conditional|  P  Q . Distributive Heyting algebras are  |Boolean_algebras|Boolean_Algebra| , and the exponential object has the explicit form   P   Q , thus making it clear that the exponential object really is  |material_implication|Material_Implication| . Saunders Mac Lane and Ieke Moerdijk, Sheaves in Geometry and Logic Springer         The above notions of currying and uncurrying find their most general, abstract statement in  |category_theory|Category_Theory| . Currying is a  |universal_property|Universal_Property|  of an  |exponential_object|Exponential_Object| , and gives rise to an  |adjunction|Adjunction|  in  |cartesian_closed_categories|Cartesian_Closed_Category| . That is, there is a  |natural|Natural_Transformation| |isomorphism|Isomorphism|  between the  |morphisms|Morphism|  from a  |binary_product|Product|  f     Z and the morphisms to an exponential object g   X   ZY .     This generalizes to a broader result in  |closed_monoidal_categories|Closed_Monoidal_Category| |tensor_product|Monoidal_Category|  and the  |internal_Hom|Internal_Hom|  are  |adjoint_functors|Adjoint_Functors| ; that is, for every object B there is a  |natural_isomorphism|Natural_Transformation| Hom denotes the Hom-functor of all morphisms in the category, while B  C denotes the internal hom functor in the closed monoidal category. For the  |category_of_sets|Category_Of_Sets| , the two are the same. When the product is the cartesian product, then the internal hom B  C becomes the exponential object CB .     Currying can break down in one of two ways. One is if a category is not  |closed|Closed_Category| , and thus lacks an internal hom functor . Another ways is if it is not  |monoidal|Monoidal_Category| , and thus lacks a product . Categories that do have both products and internal homs are exactly the closed monoidal categories.     The setting of cartesian closed categories is sufficient for the discussion of  |classical_logic|Classical_Logic| ; the more general setting of closed monoidal categories is suitable for  |quantum_computation|Quantum_Computation| . Samson Abramsky and Bob Coecke, .     The difference between these two is that the  |product|Product|  for cartesian categories  is just the  |Cartesian_product|Cartesian_Product| ; it is interpreted as an  |ordered_pair|Ordered_Pair|  of items .  |Simply_typed_lambda_calculus|Simply_Typed_Lambda_Calculus|  is the  |internal_language|Internal_Language|  of cartesian closed categories; and it is for this reason that pairs and lists are the primary  |types|Type_System|  in the  |type_theory|Type_Theory|  of  |LISP|Lisp| ,  |scheme|Scheme|  and many  |functional_programming_languages|Functional_Programming_Language| .     By contrast, the product for  |monoidal_categories|Monoidal_Category|   is the  |tensor_product|Tensor_Product| . The internal language of such categories is  |linear_logic|Linear_Logic| , a form of  |quantum_logic|Quantum_Logic| ; the corresponding  |type_system|Type_System|  is the  |linear_type_system|Linear_Type_System| . Such categories are suitable for describing  |entangled_quantum_states|Entangled_Quantum_States| , and, more generally, allow a vast generalization of the  |Curry–Howard_correspondence|Curry–Howard_Correspondence|  to  |quantum_mechanics|Quantum_Mechanics| , to  |cobordisms|Cobordism|  in  |algebraic_topology|Algebraic_Topology| , and to  |string_theory|String_Theory| . John C. Baez and Mike Stay,  ,  in New Structures for Physics, ed. Bob Coecke, Lecture Notes in Physics vol. 813, Springer, Berlin, 2011, pp. 95-174. The  |linear_type_system|Linear_Type_System| , and  |linear_logic|Linear_Logic|  are useful for describing  |synchronization_primitives|Synchronization_Primitive| , such as mutual exclusion locks, and the operation of vending machines.          Currying and partial function application are often conflated.  One of the significant differences between the two is that a call to a partially applied function returns the result right away, not another function down the currying chain; this distinction can be illustrated clearly for functions whose  |arity|Arity|  is greater than two.      Given a function of type f     N , currying produces     X   . That is, while an evaluation of the first function might be represented as f , evaluation of the curried function would be represented as f  , applying each argument in turn to a single-argument function returned by the previous invocation. Note that after calling f  , we are left with a function that takes a single argument and returns another function, not a function that takes two arguments.     In contrast, partial function application refers to the process of fixing a number of arguments to a function, producing another function of smaller arity. Given the definition of f above, we might fix the first argument, producing a function of type       N . Evaluation of this function might be represented as f  . Note that the result of partial function application in this case is a function that takes two arguments.     Intuitively, partial function application says if you fix the first  |argument|Parameter|  of the function, you get a function of the remaining arguments . For example, if function div stands for the division operation x/y, then div with the parameter x fixed at 1  is another function: the same as the function inv that returns the multiplicative inverse of its argument, defined by inv  1/y.