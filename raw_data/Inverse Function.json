[
    {
        "      In ": null
    },
    {
        "mathematics": "Mathematics"
    },
    {
        ", an inverse function  is a ": null
    },
    {
        "function": "Function"
    },
    {
        " that reverses another function: if the function  applied to an input  gives a result of , then applying its inverse function  to  gives the result , and vice versa, i.e.,  ": null
    },
    {
        "if and only if": "If And Only If"
    },
    {
        " .     As an example, consider the ": null
    },
    {
        "real-valued": "Real Number"
    },
    {
        " function of a real variable given by . Thinking of this as a step-by-step procedure , to reverse this and get  back from some output value, say , we should undo each step in reverse order. In this case that means that we should add 7 to  and then divide the result by 5. In functional notation this inverse function would be given by,   : g \\frac.   With  we have that  and .     Not all functions have inverse functions; those which do are called invertible. In order for a function  to have an inverse, it must have the property that ": null
    },
    {
        "for every": "For Every"
    },
    {
        "  in  there must be ": null
    },
    {
        "one, and only one": "Uniqueness Quantification"
    },
    {
        "  in  so that . This property ensures that a function  will exist having the necessary relationship with .            Let  be a function whose ": null
    },
    {
        "domain": "Domain Of A Function"
    },
    {
        " is the ": null
    },
    {
        "set": "Set"
    },
    {
        " , and whose ": null
    },
    {
        "image ": "Range"
    },
    {
        " is the set . Then  is invertible if there exists a function  with domain  and image , with the property:   : f y\\,\\,\\Leftrightarrow\\,\\,g x.     If  is invertible, the function  is ": null
    },
    {
        "unique": "Unique"
    },
    {
        ",  which means that there is exactly one function  satisfying this property . That function  is then called the inverse of , and is usually denoted as .     Stated otherwise, a function, considered as a ": null
    },
    {
        "binary relation": "Binary Relation"
    },
    {
        ", has an inverse if and only if the ": null
    },
    {
        "converse relation": "Converse Relation"
    },
    {
        " is a function on the range , in which case the converse relation is the inverse function.      Not all functions have an inverse. For a function to have an inverse, each element  must correspond to no more than one ; a function  with this property is called one-to-one or an ": null
    },
    {
        "injection": "Injective Function"
    },
    {
        ". If  is to be a ": null
    },
    {
        "function": "Function"
    },
    {
        " on , then each element  must correspond to some . Functions with this property are called ": null
    },
    {
        "surjections": "Surjective Function"
    },
    {
        ". This property is satisfied by definition if  is the image of , but may not hold in a more general context. To be invertible, a function must be both an injection and a surjection. Such functions are called ": null
    },
    {
        "bijections": "Bijections"
    },
    {
        ". The inverse of an injection  that is not a bijection, that is, a function that is not a surjection, is only a ": null
    },
    {
        "partial function": "Partial Function"
    },
    {
        " on , which means that for some ,  is undefined. If a function  is invertible, then both it and its inverse function  are bijections.     There is another convention used in the definition of functions. This can be referred to as the set-theoretic or graph definition using ": null
    },
    {
        "ordered pairs": "Ordered Pair"
    },
    {
        "in which a ": null
    },
    {
        "codomain": "Codomain"
    },
    {
        " is never referred to.  Under this convention all functions are surjections, and so, being a bijection simply means being an injection. Authors using this convention may use the phrasing that a function is invertible if and only if it is an injection.  The two conventions need not cause confusion as long as it is remembered that in this alternate convention the codomain of a function is always taken to be the range of the function.       The function except 0": null
    },
    {
        "x 3": "Th"
    }
]