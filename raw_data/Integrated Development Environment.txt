An integrated development environment  is a  |software_application|Application_Software|  that provides comprehensive facilities to  |computer_programmers|Computer_Programmer|  for  |software_development|Software_Development| . An IDE normally consists of at least a  |source_code_editor|Source_Code_Editor| ,  |build_automation|Build_Automation|  tools, and a  |debugger|Debugger| . Some IDEs, such as  |NetBeans|Netbeans|  and  |Eclipse|Eclipse| , contain the necessary  |compiler|Compiler| ,  |interpreter|Interpreter| , or both; others, such as  |SharpDevelop|Sharpdevelop|  and  |Lazarus|Lazarus| , do not.     The boundary between an IDE and other parts of the broader software development environment is not well-defined; sometimes a  |version_control_system|Version_Control_System|  or various tools to simplify the construction of a  |graphical_user_interface|Graphical_User_Interface|  are integrated. Many modern IDEs also have a  |class_browser|Class_Browser| , an  |object_browser|Object_Browser| , and a  |class_hierarchy_diagram|Class_Diagram|  for use in  |object-oriented_software_development|Object-Oriented_Programming| .       Integrated development environments are designed to maximize programmer productivity by providing tight-knit components with similar  |user_interfaces|User_Interface| . IDEs present a single program in which all development is done. This program typically provides many features for authoring, modifying, compiling, deploying and debugging software. This contrasts with software development using unrelated tools, such as  |vi|Vi| ,  |GCC|Gnu_Compiler_Collection|  or  |make|Make| .     One aim of the IDE is to reduce the configuration necessary to piece together multiple development utilities, instead it provides the same set of capabilities as one cohesive unit. Reducing setup time can increase developer productivity, especially in cases where learning to use the IDE is faster than manually integrating and learning all of the individual tools. Tighter integration of all development tasks has the potential to improve overall productivity beyond just helping with setup tasks. For example, code can be continuously parsed while it is being edited, providing instant feedback when syntax errors are introduced. Allowing developers to debug code much faster and easier with an IDE.     Some IDEs are dedicated to a specific  |programming_language|Programming_Language| , allowing a feature set that most closely matches the  |programming_paradigms|Programming_Paradigm|  of the language. However, there are many multiple-language IDEs.     While most modern IDEs are graphical, text-based IDEs such as  |Turbo_Pascal|Turbo_Pascal|  were in popular use before the availability of windowing systems like  |Microsoft_Windows|Microsoft_Windows|  and the  |X_Window_System|X_Window_System|  . They commonly use function keys or  |hotkeys|Keyboard_Shortcut|  to execute frequently used commands or macros.            IDEs initially became possible when developing via a  |console|System_Console|  or  |terminal|Computer_Terminal| . Early systems could not support one, since programs were prepared using flowcharts, entering programs with  |punched_cards|Punched_Card|  before submitting them to a  |compiler|Compiler| .  |Dartmouth_BASIC|Dartmouth_Basic|  was the first language to be created with an IDE . Its IDE  was command-based, and therefore did not look much like the menu-driven, graphical IDEs popular after the advent of the  |Graphical_User_Interface|Graphical_User_Interface| . However it integrated editing, file management, compilation, debugging and execution in a manner consistent with a modern IDE.     See also  |Structured_Programming_Facility|Structured_Programming_Facility|  from IBM .      |Maestro_I|Maestro_I|  is a product from Softlab Munich and was the worlds first integrated development environment  from Computerwoche  for software.  |Maestro_I|Maestro_I|  was installed for 22,000 programmers worldwide. Until 1989, 6,000 installations existed in the  |Federal_Republic_of_Germany|West_Germany| . Maestro was arguably the world leader in this field during the 1970s and 1980s. Today one of the last Maestro I can be found in the Museum of Information Technology at Arlington.     One of the first IDEs with a plug-in concept was  |Softbench|Softbench| . In 1995 Computerwoche commented that the use of an IDE was not well received by developers since it would fence in their creativity.     As of March 2015, the most popular IDEs are  |Eclipse|Eclipse|  and  |Visual_Studio|Visual_Studio| .              The IDE editor usually provides  |syntax_highlighting|Syntax_Highlighting| , it can show both the structures, the language keywords and the syntax errors with visually distinct colors and font effects.         Code completion is an important IDE feature, meant to speed up programming, and modern IDEs even have  |intelligent_code_completion|Intelligent_Code_Completion| .         Advanced IDEs provide support for  |automated_refactoring|Source-To-Source_Compilerrefactoring_Tools| .          An IDE is expected to provide integrated  |version_control|Version_Control| , in order to interact with source repositories.         IDEs are also used for debugging, using an integrated  |debugger|Debugger| , with support for setting breakpoints in the editor, visual rendering of steps, etc.          IDEs may provide advanced support for code search: in order to find class and function declarations, usages, variable and field read/write, etc. IDEs can use different kinds of user interface for code search, for example form-based widgets  and natural-language based interfaces.         |Visual_programming|Visual_Programming|  is a usage scenario in which an IDE is generally required. Visual Basic allows users to create new applications by moving programming, building blocks, or code nodes to create flowcharts or structure diagrams that are then compiled or interpreted. These flowcharts often are based on the  |Unified_Modeling_Language|Unified_Modeling_Language| .     This interface has been popularized with the  |Lego_Mindstorms|Lego_Mindstorms|  system, and is being actively pursued by a number of companies wishing to capitalize on the power of custom browsers like those found at  |Mozilla|Mozilla| .  |KTechlab|Ktechlab|  supports flowcode and is a popular opensource IDE and Simulator for developing software for microcontrollers. Visual programming is also responsible for the power of  |distributed_programming|Distributed_Programming|  . An early visual programming system,  |Max|Max| , was modeled after analog  |synthesizer|Synthesizer|  design and has been used to develop real-time music performance software since the 1980s. Another early example was  |Prograph|Prograph| , a  |dataflow|Dataflow_Programming| -based system originally developed for the  |Macintosh|Macintosh| . The graphical programming environment Grape is used to program  |qfix_robot_kits|Qfix_Robot_Kits| .     This approach is also used in specialist software such as  |Openlab|Openlab| , where the end users want the flexibility of a full programming language, without the traditional learning curve associated with one.       Some IDEs support multiple languages, such as  |GNU_Emacs|Gnu_Emacs|  based on  |C|C|  and  |Emacs_Lisp|Emacs_Lisp| , and  |IntelliJ_IDEA|Intellij_Idea| ,  |Eclipse|Eclipse| ,  |MyEclipse|Myeclipse|  or  |NetBeans|Netbeans| , all based on  |Java|Java| , or  |MonoDevelop|Monodevelop| , based on  |C|C_Sharp| , or PlayCode.     Support for alternative languages is often provided by  |plugins|Plug-In| , allowing them to be installed on the same IDE at the same time. For example,  |Flycheck|Flycheck|  is a modern on-the-fly syntax checking extension for  |GNU_Emacs|Gnu_Emacs|  24 with support for 39 languages.   |Eclipse|Eclipse| , and  |Netbeans|Netbeans|  have plugins for  |C|C| / |C++|C++| ,  |Ada|Ada| ,  |GNAT|Gnat|  ,  |Perl|Perl| ,  |Python|Python| ,  |Ruby|Ruby| , and  |PHP|Php| , which are selected between automatically based on file extension, environment or project settings.        |Unix|Unix|  programmers can combine  |command-line|Command-Line| |POSIX|Posix|  tools into a complete development environment, capable of developing large programs such as the  |Linux_kernel|Linux_Kernel|  and its environment.   Rehman, Christopher Paul, Christopher R. Paul.   The Linux Development Platform: Configuring, Using and Maintaining a Complete Programming Environment .   2002.      In this sense, the entire Unix system functions as an IDE.  The free software  |GNU|Gnu|  tools  are available on many platforms, including Windows.   The pervasive Unix philosophy of everything is a text stream enables developers who favor  |command-line|Command-Line|  oriented tools to use editors with support for many of the standard Unix and GNU build tools, building an IDE with programs like    |Emacs|Emacs|       or  |Vim|Vim| .  |Data_Display_Debugger|Data_Display_Debugger|  is intended to be an advanced graphical front-end for many text-based  |debugger|Debugger|  standard tools. Some programmers prefer managing  |makefiles|Makefile|  and their derivatives to the similar code building tools included in a full IDE. For example, most contributors to the  |PostgreSQL|Postgresql|  database use  |make|Makefile|  and  |gdb|Gnu_Debugger|  directly to develop new features.  Even when building PostgreSQL for  |Microsoft_Windows|Microsoft_Windows|  using  |Visual_C++|Visual_C++| ,  |Perl|Perl|  scripts are used as a replacement for  |make|Makefile|  rather than relying on any IDE features.  Some Linux IDEs such as  |Geany|Geany|  attempt to provide a graphical front end to traditional build operations.     On the various  |Microsoft_Windows|Microsoft_Windows|  platforms, command-line tools for development are seldom used. Accordingly, there are many commercial and non-commercial products. However, each has a different design commonly creating incompatibilities. Most major compiler vendors for Windows still provide free copies of their command-line tools, including  |Microsoft|Microsoft|  .     IDEs have always been popular on the Apple Macintoshs  |classic_Mac_OS|Classic_Mac_Os|  and  |macOS|Macos| , dating back to  |Macintosh_Programmers_Workshop|Macintosh_Programmers_Workshop| ,  |Turbo_Pascal|Turbo_Pascal| , THINK Pascal and  |THINK_C|Think_C|  environments of the mid-1980s. Currently macOS programmers can choose between native IDEs like  |Xcode|Xcode|  and open-source tools such as  |Eclipse|Eclipse|  and  |Netbeans|Netbeans| .  |ActiveState_Komodo|Activestate_Komodo|  is a proprietary multilanguage IDE supported on macOS.         Some features of IDEs can benefit from advances in AI.  In particular, one can collect information from IDE actions across developers in order to augment IDE features.  For instance, a data-driven approach to  |code_completion|Code_Completion|  results in  |intelligent_code_completion|Intelligent_Code_Completion| .            An  |web_integrated_development_environment|Online_Integrated_Development_Environment|  , also known as an  |Online_IDE|Online_Integrated_Development_Environment|  or Cloud IDE, is a  |browser|Web_Browser|  based IDE that allows for software development or web development. 