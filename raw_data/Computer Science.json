[
    {
        "               Computer science deals with the theoretical foundations of computation and practical techniques for their application.            Computer science  is the study of ": null
    },
    {
        "processes": "Process"
    },
    {
        " that interact with ": null
    },
    {
        "data": "Data"
    },
    {
        " and that can be represented as data in the form of ": null
    },
    {
        "programs": "Computer Program"
    },
    {
        ". It enables the use of ": null
    },
    {
        "algorithms": "Algorithm"
    },
    {
        "to ": null
    },
    {
        "manipulate": "Data Processing"
    },
    {
        ", ": null
    },
    {
        "store": "Data Storage"
    },
    {
        ", and ": null
    },
    {
        "communicate": "Communication"
    },
    {
        " digital information": "Digital Data"
    },
    {
        ". A ": null
    },
    {
        "computer scientist": "Computer Scientist"
    },
    {
        " studies the ": null
    },
    {
        "theory of computation": "Theory Of Computation"
    },
    {
        " and the practice of ": null
    },
    {
        "designing": "Software Design"
    },
    {
        " software system": "Software System"
    },
    {
        "s.      Its fields can be divided into theoretical and ": null
    },
    {
        "practical disciplines": "Practical Disciplines"
    },
    {
        ". ": null
    },
    {
        "Computational complexity theory": "Computational Complexity Theory"
    },
    {
        " is highly abstract, while ": null
    },
    {
        "computer graphics": "Computer Graphics"
    },
    {
        " emphasizes real-world applications. ": null
    },
    {
        "Programming language theory": "Programming Language Theory"
    },
    {
        " considers approaches to the description of computational processes, while ": null
    },
    {
        "computer programming": "Computer Programming"
    },
    {
        " itself involves the use of ": null
    },
    {
        "programming languages": "Programming Language"
    },
    {
        "and ": null
    },
    {
        "complex systems": "Complex Systems"
    },
    {
        ". ": null
    },
    {
        "Human–computer interaction": "Human–Computer Interaction"
    },
    {
        " considers the challenges in making computers useful, usable, and ": null
    },
    {
        "accessible": "Computer Accessibility"
    },
    {
        ".                        The earliest foundations of what would become computer science predate the invention of the modern ": null
    },
    {
        "digital computer": "Digital Computer"
    },
    {
        ". Machines for calculating fixed numerical tasks such as the ": null
    },
    {
        "abacus": "Abacus"
    },
    {
        " have existed since antiquity, aiding in computations such as multiplication and division. ": null
    },
    {
        "Algorithms": "Algorithm"
    },
    {
        "for performing computations have existed since antiquity, even before the development of sophisticated computing equipment.     ": null
    },
    {
        "Wilhelm Schickard": "Wilhelm Schickard"
    },
    {
        " designed and constructed the first working ": null
    },
    {
        "mechanical calculator": "Mechanical Calculator"
    },
    {
        " in 1623.  In 1673, ": null
    },
    {
        "Gottfried Leibniz": "Gottfried Leibniz"
    },
    {
        " demonstrated a digital mechanical calculator, called the ": null
    },
    {
        "Stepped Reckoner": "Stepped Reckoner"
    },
    {
        ".  He may be considered the first computer scientist and information theorist, for, among other reasons, documenting the binary number system. In 1820, ": null
    },
    {
        "Thomas de Colmar": "Charles Xavier Thomas"
    },
    {
        " launched the ": null
    },
    {
        "mechanical calculator": "Mechanical Calculator"
    },
    {
        " industry In 1851 when he released his simplified ": null
    },
    {
        "arithmometer": "Arithmometer"
    },
    {
        ", which was the first calculating machine strong enough and reliable enough to be used daily in an office environment. ": null
    },
    {
        "Charles Babbage": "Charles Babbage"
    },
    {
        " started the design of the first automatic mechanical calculator, his ": null
    },
    {
        "Difference Engine": "Difference Engine"
    },
    {
        ", in 1822, which eventually gave him the idea of the first programmable mechanical calculator, his ": null
    },
    {
        "Analytical Engine": "Analytical Engine"
    },
    {
        ".  He started developing this machine in 1834, and in less than two years, he had sketched out many of the ": null
    },
    {
        "salient": "Wikt:Special:Search/Salient"
    },
    {
        " features of the modern computer .  A crucial step was the adoption of a punched card system derived from the ": null
    },
    {
        "Jacquard loom": "Jacquard Loom"
    },
    {
        " making it infinitely programmable. The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbages feeling that he had invented something really new, something much more than a sophisticated calculating machine. ": null
    },
    {
        "Bruce Collier": "Collier"
    },
    {
        ", 1970 In 1843, during the translation of a French article on the Analytical Engine, ": null
    },
    {
        "Ada Lovelace": "Ada Lovelace"
    },
    {
        " wrote, in one of the many notes she included, an algorithm to compute the ": null
    },
    {
        "Bernoulli number": "Bernoulli Number"
    },
    {
        "s, which is considered to be the first published algorithm ever specifically tailored for implementation on a computer.  Around 1885, ": null
    },
    {
        "Herman Hollerith": "Herman Hollerith"
    },
    {
        " invented the ": null
    },
    {
        "tabulator": "Tabulating Machine"
    },
    {
        ", which used ": null
    },
    {
        "punched cards": "Punched Card"
    },
    {
        "to process statistical information; eventually his company became part of ": null
    },
    {
        "IBM": "Ibm"
    },
    {
        ". Following Babbage, although unaware of his earlier work, ": null
    },
    {
        "Percy Ludgate": "Percy Ludgate"
    },
    {
        " in 1909 published  the 2nd of the only two designs for mechanical analytical engines in history. In 1937, one hundred years after Babbages impossible dream, ": null
    },
    {
        "Howard Aiken": "Howard H. Aiken"
    },
    {
        " convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another , ": null
    },
    {
        "Bernard Cohen": "Aiken"
    },
    {
        ", p.44 to develop his giant programmable calculator, the ": null
    },
    {
        "ASCC/Harvard Mark I": "Harvard Mark I"
    },
    {
        ", based on Babbages Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as Babbages dream come true . ": null
    },
    {
        "Brian Randell": "Origins"
    },
    {
        ", p. 187, 1975     During the 1940s, as new and more powerful ": null
    },
    {
        "computing": "Computing"
    },
    {
        " machines such as the ": null
    },
    {
        "Atanasoff–Berry computer": "Atanasoff–Berry Computer"
    },
    {
        " and ": null
    },
    {
        "ENIAC": "Eniac"
    },
    {
        " were developed, the term computer came to refer to the machines rather than their human predecessors. The ": null
    },
    {
        "Association for Computing Machinery": "Association For Computing Machinery"
    },
    {
        " was founded in 1947. As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study ": null
    },
    {
        "computation": "Computation"
    },
    {
        " in general. In 1945, ": null
    },
    {
        "IBM": "Ibm"
    },
    {
        " founded the Watson Scientific Computing Laboratory at ": null
    },
    {
        "Columbia University": "Columbia University"
    },
    {
        " in ": null
    },
    {
        "New York City": "New York City"
    },
    {
        ". The renovated fraternity house on Manhattans West Side was IBMs first laboratory devoted to pure science. The lab is the forerunner of IBMs Research Division, which today operates research facilities around the world.  Ultimately, the close relationship between IBM and the university was instrumental in the emergence of a new scientific discipline, with Columbia offering one of the first academic-credit courses in computer science in 1946.  Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.  The worlds first computer science degree program, the ": null
    },
    {
        "Cambridge Diploma in Computer Science": "Cambridge Diploma In Computer Science"
    },
    {
        ", began at the ": null
    },
    {
        "University of Cambridge": "University Of Cambridge"
    },
    {
        " Computer Laboratory": "Cambridge Computer Lab"
    },
    {
        " in 1953. The first computer science department in the United States was formed at ": null
    },
    {
        "Purdue University": "Purdue University"
    },
    {
        " in 1962.  Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.     Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.   It is the now well-known ": null
    },
    {
        "IBM": "Ibm"
    },
    {
        " brand that formed part of the computer science revolution during this time. IBM released the IBM 704  and later the IBM 709  computers, which were widely used during the exploration period of such devices. Still, working with the IBM was frustrating if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again . During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.     The concept of a ": null
    },
    {
        "field-effect transistor": "Field-Effect Transistor"
    },
    {
        " was proposed by ": null
    },
    {
        "Julius Edgar Lilienfeld": "Julius Edgar Lilienfeld"
    },
    {
        " in 1925. ": null
    },
    {
        "John Bardeen": "John Bardeen"
    },
    {
        " and ": null
    },
    {
        "Walter Brattain": "Walter Brattain"
    },
    {
        ", while working under ": null
    },
    {
        "William Shockley": "William Shockley"
    },
    {
        " at ": null
    },
    {
        "Bell Labs": "Bell Labs"
    },
    {
        ", built the first working ": null
    },
    {
        "transistor": "Transistor"
    },
    {
        ", the ": null
    },
    {
        "point-contact transistor": "Point-Contact Transistor"
    },
    {
        ", in 1947.   In 1953, the ": null
    },
    {
        "University of Manchester": "University Of Manchester"
    },
    {
        " built the first ": null
    },
    {
        "transistorized computer": "Transistorized Computer"
    },
    {
        ", called the ": null
    },
    {
        "Transistor Computer": "Manchester Computers"
    },
    {
        ".  However, early ": null
    },
    {
        "junction transistors": "Junction Transistor"
    },
    {
        "were relatively bulky devices that were difficult to manufacture on a mass-production basis, which limited them to a number of specialised applications.  The ": null
    },
    {
        "metal–oxide–silicon field-effect transistor": "Mosfet"
    },
    {
        " was invented by ": null
    },
    {
        "Mohamed Atalla": "Mohamed Atalla"
    },
    {
        " and ": null
    },
    {
        "Dawon Kahng": "Dawon Kahng"
    },
    {
        " at Bell Labs in 1959.   It was the first truly compact transistor that could be ": null
    },
    {
        "miniaturised": "Mosfet Scaling"
    },
    {
        " and ": null
    },
    {
        "mass-produced": "Moores Law"
    },
    {
        " for a wide range of uses. The MOSFET made it possible to build ": null
    },
    {
        "high-density": "Very Large-Scale Integration"
    },
    {
        " integrated circuit": "Integrated Circuit"
    },
    {
        " chips,   leading to what is known as the ": null
    },
    {
        "computer revolution": "Computer Revolution"
    },
    {
        "  or ": null
    },
    {
        "microcomputer revolution": "Microcomputer Revolution"
    },
    {
        ".      Time has seen significant improvements in the usability and effectiveness of ": null
    },
    {
        "computing technology": "Computing Technology"
    },
    {
        ".  Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-": null
    },
    {
        "ubiquitous": "Ubiquitous"
    },
    {
        " user base. Initially, computers were quite costly, and some degree of humanitarian aid was needed for efficient use—in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.             Although first proposed in 1956, the term computer science appears in a 1959 article in  Communications of the ACM ,      in which Louis Fein argues for the creation of a Graduate School in Computer Sciences analogous to the creation of ": null
    },
    {
        "Harvard Business School": "Harvard Business School"
    },
    {
        " in 1921,  justifying the name by arguing that, like ": null
    },
    {
        "management science": "Management Science"
    },
    {
        ", the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.   His efforts, and those of others such as ": null
    },
    {
        "numerical analyst": "Numerical Analysis"
    },
    {
        " George Forsythe": "George Forsythe"
    },
    {
        ", were rewarded: universities went on to create such departments, starting with Purdue in 1962. ": null
    },
    {
        "Donald Knuth": "Donald Knuth"
    },
    {
        " .  Comms. ACM. Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed. Certain departments of major universities prefer the term computing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy,   to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, is data science ; this is now used for a multi-disciplinary field of data analysis, including statistics and databases.     Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM—turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied ": null
    },
    {
        "epistemologist": "Epistemology"
    },
    {
        ". Three months later in the same journal, comptologist was suggested, followed next year by hypologist. Communications of the ACM 2:p.4 The term computics has also been suggested. IEEE Computer 28: p.136 In Europe, terms derived from contracted translations of the expression automatic information or information and mathematics are often used, e.g. informatique , Informatik , informatica , informática , informatika or pliroforiki  in Greek . Similar words have also been adopted in the UK . P. Mounier-Kuhn, LInformatique en France, de la seconde guerre mondiale au Plan Calcul. Lémergence dune science, Paris, PUPS, 2010, ch. 3 & 4.   In the U.S., however, informatics is linked with applied computing, or computing in the context of another domain.     A folkloric quotation, often attributed to—but almost certainly not first formulated by— Edsger Dijkstra , states that computer science is no more about computers than astronomy is about telescopes. See the entry   Computer science on Wikiquote for the history of this quotation. The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering , while the study of commercial computer system s and their deployment is often called information technology or information system s. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as philosophy, cognitive science , linguistics , mathematics , physics , biology , statistics , and logic .     Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science. Early computer science was strongly influenced by the work of mathematicians such as Kurt Gödel , Alan Turing , Rózsa Péter and Alonzo Church and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic , category theory , domain theory , and algebra .     The relationship between Computer Science and Software Engineering is a contentious issue, which is further muddied by disputes over what the term Software Engineering means, and how computer science is defined. David Parnas , taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines. , p. 19: Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering,     The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with computational science . Both types of departments tend to make efforts to bridge the field educationally if not across all research.         A number of computer scientists have argued for the distinction of three separate paradigms in computer science. Peter Wegner argued that those paradigms are science, technology, and mathematics. Peter Denning s working group argued that they are theory, abstraction , and design. Amnon H. Eden described them as the rationalist paradigm , the technocratic paradigm , and the scientific paradigm .   Computer science focuses on methods involved in design, specification, programming, verification, implementation and testing of human-made computing systems.   Turner, Raymond, Angius, Nicola , Primiero, Giuseppe. . The Philosophy of Computer Science , The Stanford Encyclopedia of Philosophy, Edward N. Zalta , URL .           As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.   CSAB , formerly called Computing Sciences Accreditation Board—which is made up of representatives of the Association for Computing Machinery , and the IEEE Computer Society —identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, human–computer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.         Theoretical Computer Science is mathematical and abstract in spirit, but it derives its motivation from the practical and everyday computation. Its aim is to understand the nature of computation and, as a consequence of this understanding, provide more efficient methodologies. All studies related to mathematical, logic and formal concepts and methods could be considered as theoretical computer science, provided that the motivation is clearly drawn from the field of computing.         Data structures and algorithms are the studies of commonly used computational methods and their computational efficiency.             According to Peter Denning , the fundamental question underlying computer science is, What can be automated? Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on various theoretical models of computation . The second question is addressed by computational complexity theory , which studies the time and space costs associated with different approaches to solving a multitude of computational problems.     The famous P NP? problem, one of the Millennium Prize Problems , P NP is an open problem in the theory of computation.             Information theory is related to the quantification of information. This was developed by Claude Shannon to find fundamental limits on signal processing operations such as compressing data and on reliably storing and communicating data.   Coding theory is the study of the properties of code s and their fitness for a specific application. Codes are used for data compression , cryptography , error detection and correction , and more recently also for network coding . Codes are studied for the purpose of designing efficient and reliable data transmission methods.   Van-Nam Huynh; Vladik Kreinovich; Songsak Sriboonchitta; 2012. Uncertainty Analysis in Econometrics with Applications. Springer Science & Business Media. p. 63. .         Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming language s and their individual features . It falls within the discipline of computer science, both depending on and affecting mathematics , software engineering, and linguistics . It is an active research area, with numerous dedicated academic journals.             Formal methods are a particular kind of mathematically based technique for the specification , development and verification of software and hardware systems. Phillip A. Laplante, 2010. Encyclopedia of Software Engineering Three-Volume Set . CRC Press. p. 309. . The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical system s, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal language s, automata theory , and program semantics , but also type systems and algebraic data types to problems in software and hardware specification and verification.             Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory. The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.             Computer performance analysis is the study of work flowing through computers with the general goals of improving throughput , controlling response time , using resources efficiently, eliminating bottlenecks , and predicting performance under anticipated peak loads.   Benchmarks are used to compare the performance of systems carrying different chips and/or system architectures. Lawrence A. Tomei, 2009. Lexicon of Online and Distance Learning. R & L Education. p. 29. .         Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. Jiacun Wang, 2017. Real-Time Embedded Systems. Wiley. p. 12. . A number of mathematical models have been developed for general concurrent computation including Petri net s, process calculi and the Parallel Random Access Machine model. Gordana Dodig-Crnkovic; Raffaela Giovagnoli; 2013. Computing Nature: Turing Centenary Perspective. Springer Science & Business Media. p. 247. . When multiple computers are connected in a network while using concurrency, this is known as a distributed system. Computers within that distributed system have their own private memory, and information can be exchanged to achieve common goals. Simon Elias Bibri; 2018. Smart Sustainable Cities of the Future: The Untapped Potential of Big Data Analytics and Context-Aware Computing for Advancing Sustainability. Springer. p. 74. .         This branch of computer science aims to manage networks between computers worldwide.         Computer security is a branch of computer technology with an objective of protecting information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding and therefore deciphering information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.           A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through database model s and query language s.             Computer graphics is the study of digital visual contents and involves the synthesis and manipulation of image data. The study is connected to many other fields in computer science, including computer vision , image processing , and computational geometry , and is heavily applied in the fields of special effects and video games .         Research that develops theories, principles, and guidelines for user interface designers, so they can create satisfactory user experiences with desktop, laptop, and mobile devices.       Scientific computing is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific problems. A major usage of scientific computing is simulation of various processes, including computational fluid dynamics , physical, electrical, and electronic systems and circuits, as well as societies and social situations along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE, Muhammad H. Rashid, 2016. SPICE for Power Electronics and Electric Power. CRC Press. p. 6. . as well as software for physical realization of new designs. The latter includes essential design software for integrated circuit s.               Artificial intelligence aims to or is required to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning, and communication found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference , artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics , symbolic logic , semiotics , electrical engineering , philosophy of mind , neurophysiology , and social intelligence . AI is associated in the popular mind with robotic development , but the main field of practical application has been as an embedded component in areas of software development , which require computational understanding. The starting point in the late 1940s was Alan Turing s question Can computers think? , and the question remains effectively unanswered, although the Turing test is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.                 Software engineering is the study of designing, implementing, and modifying the software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software—it doesnt just deal with the creation or manufacture of new software, but its internal maintenance and arrangement.       The philosopher of computing Bill Rapaport noted three Great Insights of Computer Science:   Gottfried Wilhelm Leibniz s, George Boole s, Alan Turing s, Claude Shannon s, and Samuel Morse s insight: there are only two objects that a computer has to deal with in order to represent anything .   :: All the information about any computable problem can be represented using only 0 and 1 .     Alan Turing s insight: there are only five actions that a computer has to perform in order to do anything .   :: Every algorithm can be expressed in a language for a computer consisting of only five basic instructions: B. Jack Copeland, 2012. Alan Turings Electronic Brain: The Struggle to Build the ACE, the Worlds Fastest Computer. OUP Oxford. p. 107. .   :: move left one location;   :: move right one location;   :: read symbol at current location;   :: print 0 at current location;   :: print 1 at current location.     Corrado Böhm and Giuseppe Jacopini s insight: there are only three ways of combining these actions that are needed in order for a computer to do anything . Charles W. Herbert, 2010. An Introduction to Programming Using Alice 2.2. Cengage Learning. p. 122. .   :: Only three rules are needed to combine any set of basic instructions into more complex ones:   :: sequence: first do this, then do that;   ::  selection: IF such-and-such is the case, THEN do this, ELSE do that;   :: repetition": null
    }
]