MIDI time code  embeds the same timing information as standard  |SMPTE_timecode|Smpte_Timecode|  as a series of small quarter-frame  |MIDI|Midi|  messages. There is no provision for the user bits in the standard MIDI time code messages, and  |SysEx|_En_Sysexsystem_Exclusive_Messages|  messages are used to carry this information instead. The quarter-frame messages are transmitted in a sequence of eight messages, thus a complete timecode value is specified every two frames. If the MIDI data stream is running close to capacity, the MTC data may arrive a little behind schedule which has the effect of introducing a small amount of jitter. In order to avoid this it is ideal to use a completely separate MIDI port for MTC data. Larger full-frame messages, which encapsulate a frame worth of timecode in a single message, are used to locate to a time while timecode is not running.     Unlike standard SMPTE timecode, MIDI timecodes quarter-frame and full-frame messages carry a two-bit flag value that identifies the rate of the timecode, specifying it as either:   24 frame/s    25 frame/s    29.97 frame/s    30 frame/s     MTC distinguishes between film speed and video speed only by the rate at which timecode advances, not by the information contained in the timecode messages; thus, 29.97 frame/s dropframe is represented as 30 frame/s dropframe at 0.1% pulldown.     MTC allows the synchronisation of a  |sequencer|Midi_Sequencer|  or  |DAW|Digital_Audio_Workstation|  with other devices that can synchronise to MTC or for these devices to slave to a tape machine that is striped with SMPTE. For this to happen a SMPTE to MTC converter needs to be employed. It is possible for a tape machine to synchronise to an MTC signal , if the tape machine is able to slave to incoming timecode via motor control, which is a rare feature.       The MIDI time code is 32 bits long, of which 24 are used, while 8 bits are unused and always zero. Because the full-time code messages requires that the most significant bits of each byte are zero , there are really only 28 available bits and 4 spare bits.     Like most audiovisual timecodes such as  |SMPTE_time_code|Smpte_Time_Code| , it encodes only time of day, repeating each 24 hours. Time is given in units of hours, minutes, seconds, and  |frames|Film_Frame| . There may be 24, 25, or 30 frames per second.     Unlike most other timecodes, the components are encoded in straight binary, not  |binary_coded_decimal|Binary_Coded_Decimal| .     Each component is assigned one byte:   ; Byte 0 : 0rrhhhhh : Rate and hour .   : rr 00 : 24 frames/s   : rr 01 : 25 frames/s   : rr 10 : 29.97 frames/s    : rr 11 : 30 frames/s   ; Byte 1 : 00mmmmmm : Minute   ; Byte 2 : 00ssssss : Second   ; Byte 3 : 000fffff : Frame        When there is a jump in the time code, a single full-time code is sent to synchronize attached equipment. This takes the form of a special global system exclusive message:   : F0 7F 7F 01 01 hh mm ss ff F7   The manufacturer ID of 7F indicates a real-time universal message, the channel of 7F indicates it is a global broadcast. The following ID of 01 identifies this is a time code type message, and the second 01 indicates it is a full-time code message. The 4 bytes of time code follow. Although MIDI is generally little-endian, the 4 time code bytes follow in big-endian order, followed by a F7 end of exclusive byte.     After a jump, the time clock stops until the first following quarter-frame message is received.       When the time is running continuously, the 32-bit time code is broken into 8 4-bit pieces, and one piece is transmitted each quarter frame. I.e. 96—120 times per second, depending on the frame rate. Since it takes eight quarter frames for a complete time code message, the complete SMPTE time is updated every two frames. A quarter-frame messages consists of a status byte of 0xF1, followed by a single 7-bit data value: 3 bits to identify the piece, and 4 bits of partial time code. When time is running forward, the piece numbers increment from 0–7; with the time that piece 0 is transmitted is the coded instant, and the remaining pieces are transmitted later.     If the MIDI data stream is being rewound, the piece numbers count backward. Again, piece 0 is transmitted at the coded moment.     The time code is divided little-endian as follows:    .