            Rendering or image synthesis is the automatic process of generating a  |photorealistic|Physically-Based_Rendering|  or  |non-photorealistic|Non-Photorealistic_Rendering|  image from a  |2D|2D_Model|  or  |3D_model|3D_Model|   by means of  |computer_programs|Computer_Program| . Also, the results of displaying such a model can be called a render. A scene file contains objects in a strictly defined language or  |data_structure|Data_Structure| ; it would contain geometry, viewpoint,  |texture|Texture_Mapping| ,  |lighting|Computer_Graphics_Lighting| , and  |shading|Shading|  information as a description of the virtual scene. The data contained in the scene file is then passed to a rendering program to be processed and output to a  |digital_image|Digital_Image|  or  |raster_graphics|Raster_Graphics|  image file. The term rendering may be by analogy with an artists rendering of a scene.     Though the technical details of rendering methods vary, the general challenges to overcome in producing a 2D image from a 3D representation stored in a scene file are outlined as the  |graphics_pipeline|Graphics_Pipeline|  along a rendering device, such as a  |GPU|Graphics_Processing_Unit| . A GPU is a purpose-built device able to assist a  |CPU|Central_Processing_Unit|  in performing complex rendering calculations. If a scene is to look relatively realistic and predictable under virtual lighting, the rendering software should solve the  |rendering_equation|Rendering_Equation| . The rendering equation doesnt account for all lighting phenomena, but is a general lighting model for computer-generated imagery. Rendering is also used to describe the process of calculating effects in a video editing program to produce final video output.     Rendering is one of the major sub-topics of  |3D_computer_graphics|3D_Computer_Graphics| , and in practice is always connected to the others. In the  |graphics_pipeline|Graphics_Pipeline| , it is the last major step, giving the final appearance to the models and animation. With the increasing sophistication of computer graphics since the 1970s, it has become a more distinct subject.     Rendering has uses in  |architecture|Architectural_Rendering| ,  |video_games|Video_Game| ,  |simulators|Simulation| ,  |movie|Film|  or TV  |visual_effects|Visual_Effects| , and design visualization, each employing a different balance of features and techniques. As a product, a wide variety of renderers are available. Some are integrated into larger modeling and animation packages, some are stand-alone, some are free open-source projects. On the inside, a renderer is a carefully engineered program, based on a selective mixture of disciplines related to:  |light_physics|Optics| ,  |visual_perception|Visual_System| ,  |mathematics|Mathematics| , and  |software_development|Software_Engineering| .     In the case of 3D graphics, rendering may be done slowly, as in  |pre-rendering|Pre-Rendered| , or in realtime. Pre-rendering is a computationally intensive process that is typically used for movie creation, while  |real-time|Real-Time_Computer_Graphics|  rendering is often done for 3D video games which rely on the use of graphics cards with 3D  |hardware_accelerators|Hardware_Accelerators| .       When the pre-image  is complete, rendering is used, which adds in  |bitmap_textures|Bitmap_Textures|  or  |procedural_textures|Procedural_Textures| , lights,  |bump_mapping|Bump_Mapping|  and relative position to other objects. The result is a completed image the consumer or intended viewer sees.     For movie animations, several images must be rendered, and stitched together in a program capable of making an animation of this sort. Most 3D image editing programs can do this.       A rendered image can be understood in terms of a number of visible features. Rendering  |research_and_development|Research_And_Development|  has been largely motivated by finding ways to simulate these efficiently. Some relate directly to particular algorithms and techniques, while others are produced together.      |Shading|Shading|  how the color and brightness of a surface varies with lighting    |Texture-mapping|Texture_Mapping|  a method of applying detail to surfaces    |Bump-mapping|Bump_Mapping|  a method of simulating small-scale bumpiness on surfaces    |Fogging/participating_medium|Distance_Fog|  how light dims when passing through non-clear atmosphere or air    |Shadows|Shadow|   the effect of obstructing light    |Soft_shadows|Soft_Shadows|  varying darkness caused by partially obscured light sources    |Reflection|Reflection|  mirror-like or highly glossy reflection    |Transparency|Transparency| ,  |transparency|Transparency|  or  |opacity|Opacity|  sharp transmission of light through solid objects    |Translucency|Translucency|  highly scattered transmission of light through solid objects    |Refraction|Refraction|  bending of light associated with transparency    |Diffraction|Diffraction|  bending, spreading, and interference of light passing by an object or aperture that disrupts the ray    |Indirect_illumination|Global_Illumination|  surfaces illuminated by light reflected off other surfaces, rather than directly from a light source    |Caustics|Caustic|   reflection of light off a shiny object, or focusing of light through a transparent object, to produce bright highlights on another object    |Depth_of_field|Depth_Of_Field|  objects appear blurry or out of focus when too far in front of or behind the object in focus    |Motion_blur|Motion_Blur|  objects appear blurry due to high-speed motion, or the motion of the camera    |Non-photorealistic_rendering|Non-Photorealistic_Rendering|  rendering of scenes in an artistic style, intended to look like a painting or drawing       Many rendering  have been researched, and software used for rendering may employ a number of different techniques to obtain a final image.      |Tracing|Vectorization|  every  |particle_of_light|Photon|  in a scene is nearly always completely impractical and would take a stupendous amount of time. Even tracing a portion large enough to produce an image takes an inordinate amount of time if the sampling is not intelligently restricted.     Therefore, a few loose families of more-efficient light transport modelling techniques have emerged:    |rasterization|Rasterization| , including  |scanline_rendering|Scanline_Rendering| , geometrically projects objects in the scene to an image plane, without advanced optical effects;    |ray_casting|Ray_Casting|  considers the scene as observed from a specific point of view, calculating the observed image based only on geometry and very basic optical laws of reflection intensity, and perhaps using  |Monte_Carlo|Monte_Carlo_Method|  techniques to reduce artifacts;    |ray_tracing|Ray_Tracing|  is similar to ray casting, but employs more advanced optical simulation, and usually uses Monte Carlo techniques to obtain more realistic results at a speed that is often orders of magnitude faster.   The fourth type of light transport technique,  |radiosity|Radiosity|  is not usually implemented as a rendering technique, but instead calculates the passage of light as it leaves the light source and illuminates surfaces. These surfaces are usually rendered to the display using one of the other three techniques.     Most advanced software combines two or more of the techniques to obtain good-enough results at reasonable cost.     Another distinction is between  |image_order|Image_And_Object_Order_Rendering|  algorithms, which iterate over pixels of the image plane, and  |object_order|Image_And_Object_Order_Rendering|  algorithms, which iterate over objects in the scene. Generally object order is more efficient, as there are usually fewer objects in a scene than pixels.     Scanline rendering and rasterisation         A high-level representation of an image necessarily contains elements in a different domain from pixels. These elements are referred to as  |s|Primitives| . In a schematic drawing, for instance, line segments and curves might be primitives. In a graphical user interface, windows and buttons might be the primitives. In rendering of 3D models, triangles and polygons in space might be primitives.     If a pixel-by-pixel approach to rendering is impractical or too slow for some task, then a primitive-by-primitive approach to rendering may prove useful. Here, one loops through each of the primitives, determines which pixels in the image it affects, and modifies those pixels accordingly. This is called rasterization, and is the rendering method used by all current  |graphics_cards|Graphics_Card| .     Rasterization is frequently faster than pixel-by-pixel rendering. First, large areas of the image may be empty of primitives; rasterization will ignore these areas, but pixel-by-pixel rendering must pass through them. Second, rasterization can improve  |cache_coherency|Cache_Coherency|  and reduce redundant work by taking advantage of the fact that the pixels occupied by a single primitive tend to be contiguous in the image. For these reasons, rasterization is usually the approach of choice when  |interactive|Interactivity|  rendering is required; however, the pixel-by-pixel approach can often produce higher-quality images and is more versatile because it does not depend on as many assumptions about the image as rasterization.     The older form of rasterization is characterized by rendering an entire face as a single color. Alternatively, rasterization can be done in a more complicated manner by first rendering the vertices of a face and then rendering the pixels of that face as a blending of the vertex colors. This version of rasterization has overtaken the old method as it allows the graphics to flow without complicated textures . This newer method of rasterization utilizes the graphics cards more taxing shading functions and still achieves better performance because the simpler textures stored in memory use less space. Sometimes designers will use one rasterization method on some faces and the other method on others based on the angle at which that face meets other joined faces, thus increasing speed and not hurting the overall effect.             In ray casting the geometry which has been modeled is parsed pixel by pixel, line by line, from the point of view outward, as if casting rays out from the point of view. Where an object is intersected, the color value at the point may be evaluated using several methods. In the simplest, the color value of the object at the point of intersection becomes the value of that pixel. The color may be determined from a  |texture-map|Texture_Mapping| . A more sophisticated method is to modify the colour value by an illumination factor, but without calculating the relationship to a simulated light source. To reduce artifacts, a number of rays in slightly different directions may be averaged.     Ray casting involves calculating the view direction , and incrementally following along that ray cast through solid 3d objects in the scene, while accumulating the resulting value from each point in 3D space. This is related and similar to ray tracing except that the raycast is usually not bounced off surfaces . Ray casting implies that the light ray is following a straight path . The ray cast is a vector that can originate from the camera or from the scene endpoint . Sometimes the final light value is a derived from a transfer function and sometimes its used directly.     Rough simulations of optical properties may be additionally employed: a simple calculation of the ray from the object to the point of view is made. Another calculation is made of the angle of incidence of light rays from the light source, and from these as well as the specified intensities of the light sources, the value of the pixel is calculated. Another simulation uses illumination plotted from a radiosity algorithm, or a combination of these two.             Ray tracing aims to simulate the natural flow of light, interpreted as particles. Often, ray tracing methods are utilized to approximate the solution to the  |rendering_equation|Rendering_Equation|  by applying  |Monte_Carlo_methods|Monte_Carlo_Methods|  to it. Some of the most used methods are  |path_tracing|Path_Tracing| ,  |bidirectional_path_tracing|Path_Tracingbidirectional_Path_Tracing| , or  |Metropolis_light_transport|Metropolis_Light_Transport| , but also semi realistic methods are in use, like  |Whitted_Style_Ray_Tracing|Whitted_Style_Ray_Tracing| , or hybrids. While most implementations let light propagate on straight lines, applications exist to simulate relativistic spacetime effects.      In a final, production quality rendering of a ray traced work, multiple rays are generally shot for each pixel, and traced not just to the first object of intersection, but rather, through a number of sequential bounces, using the known laws of optics such as angle of incidence equals angle of reflection and more advanced laws that deal with refraction and surface roughness.     Once the ray either encounters a light source, or more probably once a set limiting number of bounces has been evaluated, then the surface illumination at that final point is evaluated using techniques described above, and the changes along the way through the various bounces evaluated to estimate a value observed at the point of view. This is all repeated for each sample, for each pixel.     In  |distribution_ray_tracing|Distribution_Ray_Tracing| , at each point of intersection, multiple rays may be spawned. In  |path_tracing|Path_Tracing| , however, only a single ray or none is fired at each intersection, utilizing the statistical nature of  |Monte_Carlo|Monte_Carlo_Methods|  experiments.     As a brute-force method, ray tracing has been too slow to consider for real-time, and until recently too slow even to consider for short films of any degree of quality, although it has been used for special effects sequences, and in advertising, where a short portion of high quality  footage is required.     However, efforts at optimizing to reduce the number of calculations needed in portions of a work where detail is not high or does not depend on ray tracing features have led to a realistic possibility of wider use of ray tracing. There is now some hardware accelerated ray tracing equipment, at least in prototype phase, and some game demos which show use of real-time software or hardware ray tracing.          Radiosity is a method which attempts to simulate the way in which directly illuminated surfaces act as indirect light sources that illuminate other surfaces. This produces more realistic shading and seems to better capture the  |ambience|Shadingambient_Lighting|  of an indoor scene. A classic example is the way that shadows hug the corners of rooms.     The optical basis of the simulation is that some diffused light from a given point on a given surface is reflected in a large spectrum of directions and illuminates the area around it.     The simulation technique may vary in complexity. Many renderings have a very rough estimate of radiosity, simply illuminating an entire scene very slightly with a factor known as ambiance. However, when advanced radiosity estimation is coupled with a high quality ray tracing algorithm, images may exhibit convincing realism, particularly for indoor scenes.     In advanced radiosity simulation, recursive, finite-element algorithms bounce light back and forth between surfaces in the model, until some recursion limit is reached. The colouring of one surface in this way influences the colouring of a neighbouring surface, and vice versa. The resulting values of illumination throughout the model are stored and used as additional inputs when performing calculations in a ray-casting or ray-tracing model.     Due to the iterative/recursive nature of the technique, complex objects are particularly slow to emulate. Prior to the standardization of rapid radiosity calculation, some  |digital_artists|Digital_Artists|  used a technique referred to loosely as  |false_radiosity|False_Radiosity|  by darkening areas of texture maps corresponding to corners, joints and recesses, and applying them via self-illumination or diffuse mapping for scanline rendering. Even now, advanced radiosity calculations may be reserved for calculating the ambiance of the room, from the light reflecting off walls, floor and ceiling, without examining the contribution that complex objects make to the radiosity—or complex objects may be replaced in the radiosity calculation with simpler objects of similar size and texture.     Radiosity calculations are viewpoint independent which increases the computations involved, but makes them useful for all viewpoints. If there is little rearrangement of radiosity objects in the scene, the same radiosity data may be reused for a number of frames, making radiosity an effective way to improve on the flatness of ray casting, without seriously impacting the overall rendering time-per-frame.     Because of this, radiosity is a prime component of leading real-time rendering methods, and has been used from beginning-to-end to create a large number of well-known recent feature-length animated 3D-cartoon films.       One problem that any rendering system must deal with, no matter which approach it takes, is the sampling problem. Essentially, the rendering process tries to depict a  |continuous_function|Continuous_Function|  from image space to colors by using a finite number of pixels. As a consequence of the  |Nyquist–Shannon_sampling_theorem|Nyquist–Shannon_Sampling_Theorem|  , any spatial waveform that can be displayed must consist of at least two pixels, which is proportional to  |image_resolution|Image_Resolution| . In simpler terms, this expresses the idea that an image cannot display details, peaks or troughs in color or intensity, that are smaller than one pixel.     If a naive rendering algorithm is used without any filtering, high frequencies in the image function will cause ugly  |aliasing|Aliasing|  to be present in the final image. Aliasing typically manifests itself as  |jaggies|Jaggies| , or jagged edges on objects where the pixel grid is visible. In order to remove aliasing, all rendering algorithms must use some kind of  |low-pass_filter|Low-Pass_Filter|  on the image function to remove high frequencies, a process called  |antialiasing|Spatial_Anti-Aliasing| .         Due to the large number of calculations, a work in progress is usually only rendered in detail appropriate to the portion of the work being developed at a given time, so in the initial stages of modeling, wireframe and ray casting may be used, even where the target output is ray tracing with radiosity. It is also common to render only parts of the scene at high detail, and to remove objects that are not important to what is currently being developed.     For real-time, it is appropriate to simplify one or more common approximations, and tune to the exact parameters of the scenery in question, which is also tuned to the agreed parameters to get the most bang for the buck.            The implementation of a realistic renderer always has some basic element of physical simulation or emulation   some computation which resembles or abstracts a real physical process.     The term  physically based  indicates the use of physical models and approximations that are more general and widely accepted outside rendering. A particular set of related techniques have gradually become established in the rendering community.     The basic concepts are moderately straightforward, but intractable to calculate; and a single elegant algorithm or approach has been elusive for more general purpose renderers. In order to meet demands of robustness, accuracy and practicality, an implementation will be a complex combination of different techniques.     Rendering research is concerned with both the adaptation of scientific models and their efficient application.            This is the key academic/theoretical concept in rendering. It serves as the most abstract formal expression of the non-perceptual aspect of rendering. All more complete algorithms can be seen as solutions to particular formulations of this equation.     : Lo Le +   fr Li   w   Meaning: at a particular position and direction, the outgoing light is the sum of the emitted light and the reflected light. The reflected light being the sum of the incoming light from all directions, multiplied by the surface reflection and incoming angle. By connecting outward light to inward light, via an interaction point, this equation stands for the whole light transport   all the movement of light — in a scene.       The  bidirectional reflectance distribution function  expresses a simple model of light interaction with a surface as follows:     : fr       Light interaction is often approximated by the even simpler models: diffuse reflection and specular reflection, although both can ALSO be BRDFs.       Rendering is practically exclusively concerned with the particle aspect of light physics   known as  |geometrical_optics|Geometrical_Optics| . Treating light, at its basic level, as particles bouncing around is a simplification, but appropriate: the wave aspects of light are negligible in most scenes, and are significantly more difficult to simulate. Notable wave aspect phenomena include diffraction  and polarisation . Both types of effect, if needed, are made by appearance-oriented adjustment of the reflection model.       Though it receives less attention, an understanding of  |human_visual_perception|Human_Visual_Perception|  is valuable to rendering. This is mainly because image displays and human perception have restricted ranges. A renderer can simulate an almost infinite range of light brightness and color, but current displays   movie screen, computer monitor, etc.   cannot handle so much, and something must be discarded or compressed. Human perception also has limits, and so does not need to be given large-range images to create realism. This can help solve the problem of fitting images into displays, and, furthermore, suggest what short-cuts could be used in the rendering simulation, since certain subtleties wont be noticeable. This related subject is  |tone_mapping|Tone_Mapping| .     Mathematics used in rendering includes:  |linear_algebra|Linear_Algebra| ,  |calculus|Calculus| ,  |numerical_mathematics|Numerical_Analysis| ,  |signal_processing|Digital_Signal_Processing| , and  |Monte_Carlo_methods|Monte_Carlo_Methods| .     Rendering for movies often takes place on a network of tightly connected computers known as a  |render_farm|Render_Farm| .     The current state of the art in 3-D image description for movie creation is the  |mental_ray|Mental_Ray| |scene_description_language|Scene_Description_Language|  designed at  |mental_images|Mental_Images|  and  |RenderMan_Shading_Language|Renderman_Shading_Language|  designed at  |Pixar|Pixar| .  .     Other renderers can and are sometimes used, but most other renderers tend to miss one or more of the often needed features like good texture filtering, texture caching, programmable shaders, highend geometry types like hair, subdivision or nurbs surfaces with tesselation on demand, geometry caching, raytracing with geometry caching, high quality  |shadow_mapping|Shadow_Mapping| , speed or patent-free implementations. Other highly sought features these days may include interactive  |photorealistic_rendering|Photorealistic_Rendering|    and hardware rendering/shading.     Some renderers execute on the  |GPU|Graphics_Processing_Unit|  instead of the  |CPU|Central_Processing_Unit|  . The parallelized nature of GPUs can be used for shorter render times. However, GPU renderers are constrained by the amount of video memory available.              Ray casting     1970  Scanline rendering     1971  Gouraud shading     1973  Phong shading  University of Utah School of Computing,      1973  Phong reflection    1973  Diffuse reflection  Bui Tuong Phong,  , Communications of ACM 18 , no. 6, 311–317.   1973  Specular highlight    1973  Specular reflection    1974  Sprites     1974  Scrolling    1974  Texture mapping     1974  Z-buffering    1976  Environment mapping     1977  Blinn shading     1977  Side-scrolling     1977  Shadow volume s    1978  Shadow mapping     1978  Bump mapping     1979  Tile map     1980  BSP trees     1980  Ray tracing     1981  Parallax scrolling     1981  Sprite zooming     1981 Cook shader    1983  MIP maps     1984  Octree ray tracing    1984  Alpha compositing     1984  Distributed ray tracing     1984  Radiosity     1985  Row/column scrolling     1985  Hemicube radiosity    1986 Light source tracing    1986  Rendering equation     1987  Reyes rendering     1988  Depth cue     1988  Distance fog    1988  Tiled rendering    1991  Xiaolin Wu line anti-aliasing      1991 Hierarchical radiosity    1993  Texture filtering     1993  Perspective correction     1993  Transform, clipping, and lighting     1993  Directional lighting    1993  Trilinear interpolation    1993  Z-culling    1993  Oren–Nayar reflectance  M. Oren and S.K. Nayar,   . SIGGRAPH. pp.239-246, Jul, 1994   1993  Tone mapping     1993  Subsurface scattering     1994  Ambient occlusion     1995  Hidden surface determination     1995  Photon mapping     1996  Multisample anti-aliasing     1997  Metropolis light transport     1997 Instant Radiosity    1998  Hidden surface removal     2000  Pose space deformation     2002  Precomputed Radiance Transfer     .