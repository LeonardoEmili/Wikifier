Euphoria is a  |programming_language|Programming_Language|  originally created by Robert Craig of Rapid Deployment Software in  |Toronto|Toronto| ,  |Ontario|Ontario| , Canada. Initially developed on the  |Atari_ST|Atari_St| , the first commercial release was for the 16-bit  |DOS|Dos|  platform and was  |proprietary|Proprietary_Software| . In 2006, with the release of version 3, Euphoria became  |open_source_software|Open_Source_Software| . The openEuphoria Group continues to administer and develop the project. In December 2010, the openEuphoria Group released version 4 of openEuphoria along with a new identity and mascot for the project. OpenEuphoria is currently available for  |Windows|Microsoft_Windows| ,  |Linux|Linux| ,  |macOS|Macos|  and three flavors of  |BSD|Berkeley_Software_Distributionsignificant_Bsd_Descendants| .     Euphoria is a general-purpose  |high_level|High_Level_Programming_Language| |_imperative_procedural|Imperative_Programming| |_interpreted|Interpreter|  language. A  |translator|Translator|  generates  |C|C| |_source_code|Source_Code|  and the  |GNU_compiler_collection|Gnu_Compiler_Collection|  and  |Open_Watcom|Open_Watcom|  compilers are supported. Alternatively, Euphoria programs may be bound with the interpreter to create stand-alone  |executables|Executable| . A number of  |graphical_user_interface|Graphical_User_Interface|  libraries are supported including Win32lib and  |wrappers|Wrapper_Function|  for  |wxWidgets|Wxwidgets| ,  |GTK_|Gtk_|  and  |IUP|Iup| . Euphoria has a simple built-in  |database|Database|  and wrappers for a variety of other databases.       The Euphoria language is a general purpose  |procedural_language|Procedural_Programming|  that focuses on simplicity, legibility, rapid development and performance via several means.   Simplicity – It uses just four built-in data types and implements automatic  |garbage_collection|Garbage_Collection| .   Legibility – The syntax favors simple English keywords over the use of punctuation to delineate constructs.   Rapid development – An  |interpreter|Interpreter|  encourages prototyping and incremental development.   Performance – An efficient reference-counting garbage collector correctly handles cyclic references.       Developed as a personal project to invent a programming language from scratch, Euphoria was created by Robert Craig on an  |Atari_Mega_ST|Atari_St| . Many design ideas for the language came from Craigs  |Masters|Masters_Degree| |_thesis|Thesis|  in  |computer_science|Computer_Science|  at the  |University_of_Toronto|University_Of_Toronto| . Craigs thesis was heavily influenced by the work of  |John_Backus|John_Backus|  on  |functional_programming|Functional_Programming|  languages.     Craig ported his original Atari implementation to the 16-bit  |DOS|Dos|  platform and Euphoria was first released, version 1.0, in July 1993 under a  |proprietary|Proprietary_Software|  licence. The original Atari implementation is described by Craig as primitive and has not been publicly released. Euphoria continued to be developed and released by Craig via his company Rapid Deployment Software and website rapideuphoria.com. In October 2006 RDS released version 3 of Euphoria and announced that henceforth Euphoria would be freely distributed under an  |open_source_software|Open_Source_Software|  licence.     RDS continued to develop Euphoria, culminating with the release of version 3.1.1 in August, 2007. Subsequently, RDS ceased unilateral development of Euphoria and the openEuphoria Group took over ongoing development. The openEuphoria Group released version 4 in December, 2010 along with a new logo and mascot for the openEuphoria project.     Version 3.1.1 remains an important milestone release, being the last version of Euphoria which supports the  |DOS|Dos|  platform.     Euphoria is an  |acronym|Acronym|  for End-User Programming with Hierarchical Objects for Robust Interpreted Applications although there is some suspicion that this is a  |backronym|Backronym| .     The Euphoria interpreter was originally written in  |C|C| . With the release of version 2.5 in November 2004 the Euphoria interpreter was split into two parts: a front-end parser, and a back-end interpreter. The front-end is now written in Euphoria . The main back-end and run time library are written in C.       Euphoria was conceived and developed with the following design goals and features:     Ease of learning and with consistent high-level constructs    Implementation of flat-form 32-bit memory to avoid complex memory management and size-addressing limits   Debugging support and run-time error-handling   Subscript and  |type_checking|Type_System| |_garbage_collection|Garbage_Collection| |_DOS|Dos|  graphics library   Debugger   Integrated database system   Low-level memory handling   Straightforward  |wrapping|Wrapper_Function|  of  |C|C|  libraries        |Interpreter|Interpreter| |_C|C|  translator for standalone executables or  |dynamic_linking|Dynamic_Linker| |_Bytecode|Bytecode|  compiler and interpreter   The Binder binds the Euphoria source code to the interpreter to create an executable.   A  |read–eval–print_loop|Read–Eval–Print_Loop|  version is on the openEuphoria  |roadmap|Technology_Roadmap| .       Euphoria is designed to readily facilitate handling of dynamic sets of data of varying types and is particularly useful for string and image processing. Euphoria has been used in  |artificial_intelligence|Artificial_Intelligence|  experiments, the study of  |mathematics|Mathematics| , for teaching programming, and to implement fonts involving thousands of characters. A large part of the Euphoria interpreter is written in Euphoria.       Euphoria has two basic data types:   :Atom – A number, implemented as a 31-bit signed  |integer|Integer|  or a 64-bit  |IEEE_floating_point|Ieee_Floating_Point_Standard| . Euphoria dynamically changes between integer and floating point representation according to the current value.   :Sequence – A  |vector|Array_Data_Type|  with zero or more elements. Each element may be an atom or another sequence. The number of elements in a sequence is not fixed . The program may add or remove elements as needed during run-time. Memory allocation-deallocation is automatically handled by reference counting. Individual elements are referenced using an index value enclosed in square brackets. The first element in a sequence has an index of one Elements inside embedded sequences are referenced by additional bracked index values, thus X 2 refers to the second element contained in the sequence that is the third element of X. Each element of a sequence is an object type .     Euphoria has two additional data types predefined:   :Integer – An atom, restricted to 31-bit signed  |integer|Integer|  values in the range -1073741824 to 1073741823 . Integer data types are more efficient than the atom data types, but cannot contain the same range of values. Characters are stored as integers, e.g., coding  |ASCII|Ascii| -A is exactly the same as coding 65.   :Object – A generic datatype which may contain any of the above  and which may be changed to another type during run-time.     There is no character  |string|String|  data type. Strings are represented by a sequence of integer values. However, because literal strings are so commonly used in programming, Euphoria interprets double-quote enclosed characters as a sequence of integers. Thus   ABC   is seen as if the coder had written:     which is the same as:         puts       Program comments start with a double hyphen -- and go through the end of line.     The following code looks for an old item in a group of items. If found, it removes it by concatenating all the elements before it with all the elements after it. Note that the first element in a sequence has the index one and that $ refers to the length of the sequence.     global function deleteitem   integer pos   -- Code begins --   pos find   if pos span style color:blue; /span span style color:blue; /span span style color:blue; /span  span style color:blue; /span span style color:magenta; /span span style color:red; /span span style color:magenta; /span span style color:blue; /span      .