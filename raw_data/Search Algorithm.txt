      In  |computer_science|Computer_Science| , a search algorithm is any  |algorithm|Algorithm|  which solves the  |search_problem|Search_Problem| , namely, to retrieve information stored within some data structure, or calculated in the  |search_space|Feasible_Region|  of a  |problem_domain|Problem_Domain| , either with  |discrete_or_continuous_values|Continuous_Or_Discrete_Variable| . Specific applications of search algorithms include:     Problems in  |combinatorial_optimization|Combinatorial_Optimization| , such as:   The  |vehicle_routing_problem|Vehicle_Routing_Problem| , a form of  |shortest_path_problem|Shortest_Path_Problem| |knapsack_problem|Knapsack_Problem| |nurse_scheduling_problem|Nurse_Scheduling_Problem| |constraint_satisfaction|Constraint_Satisfaction| , such as:   The  |map_coloring_problem|Map_Coloring_Problem| |sudoku|Sudoku|  or  |crossword_puzzle|Crossword_Puzzle| |game_theory|Game_Theory|  and especially  |combinatorial_game_theory|Combinatorial_Game_Theory| , choosing the best move to make next    Finding a combination or password from the whole set of possibilities    |Factoring|Factorization|  an integer    Optimizing an industrial process, such as a  |chemical_reaction|Chemical_Reaction| , by changing the parameters of the process   Retrieving a record from a  |database|Database| |list|List|  or  |array|Array_Data_Structure| |web_search|Web_Search|  are both problems in  |information_retrieval|Information_Retrieval| , but are generally studied as separate subfields and are solved and evaluated differently.   are generally focused on filtering and   that find documents most relevant to human queries. Classic search algorithms are typically evaluated on how fast they can find a solution, and whether that solution is guaranteed to be optimal. Though information retrieval algorithms must be fast, the quality of ranking is more important, as is whether good results have been left out and bad results included.     The appropriate search algorithm often depends on the data structure being searched, and may also include prior knowledge about the data. Some database structures are specially constructed to make search algorithms faster or more efficient, such as a  |search_tree|Search_Tree| ,  |hash_map|Hash_Map| , or a  |database_index|Database_Index| .      Search algorithms can be classified based on their mechanism of searching.  |Linear_search|Linear_Search|  algorithms check every record for the one associated with a target key in a linear fashion.  |Binary,_or_half_interval_searches|Binary_Search_Algorithm| , repeatedly target the center of the search structure and divide the search space in half. Comparison search algorithms improve on linear searching by successively eliminating records based on comparisons of the keys until the target record is found, and can be applied on data structures with a defined order. Digital search algorithms work based on the properties of digits in data structures that use numerical keys. Finally,  |hashing|Hash_Table|  directly maps keys to records based on a  |hash_function|Hash_Function| . Searches outside a linear search require that the data be sorted in some way.     Algorithms are often evaluated by their  |computational_complexity|Computational_Complexity| , or maximum theoretical run time. Binary search functions, for example, have a maximum complexity of , or logarithmic time. This means that the maximum number of operations needed to find the search target is a logarithmic function of the size of the search space.                Algorithms for searching virtual spaces are used in the  |constraint_satisfaction_problem|Constraint_Satisfaction_Problem| , where the goal is to find a set of value assignments to certain variables that will satisfy specific mathematical  |equations|Equation|  and  |inequations|Inequation|  / equalities. They are also used when the goal is to find a variable assignment that will  |maximize_or_minimize|Discrete_Optimization|  a certain function of those variables. Algorithms for these problems include the basic  |brute-force_search|Brute-Force_Search|  , and a variety of  |heuristics|Heuristic_Function|  that try to exploit partial knowledge about the structure of this space, such as linear relaxation, constraint generation, and  |constraint_propagation|Local_Consistency| .     An important subclass are the  |local_search|Local_Search|  methods, that view the elements of the search space as the  |vertices|Vertex|  of a graph, with edges defined by a set of heuristics applicable to the case; and scan the space by moving from item to item along the edges, for example according to the  |steepest_descent|Gradient_Descent|  or  |best-first|Best-First_Search|  criterion, or in a  |stochastic_search|Stochastic_Optimization| . This category includes a great variety of general  |metaheuristic|Metaheuristic|  methods, such as  |simulated_annealing|Simulated_Annealing| ,  |tabu_search|Tabu_Search| , A-teams, and  |genetic_programming|Genetic_Programming| , that combine arbitrary heuristics in specific ways.     This class also includes various  |tree_search_algorithms|Tree_Traversal| , that view the elements as vertices of a  |tree|Tree| , and traverse that tree in some special order. Examples of the latter include the exhaustive methods such as  |depth-first_search|Depth-First_Search|  and  |breadth-first_search|Breadth-First_Search| , as well as various heuristic-based  |search_tree_pruning|Pruning|  methods such as  |backtracking|Backtracking|  and  |branch_and_bound|Branch_And_Bound| . Unlike general metaheuristics, which at best work only in a probabilistic sense, many of these tree-search methods are guaranteed to find the exact or optimal solution, if given enough time. This is called  |completeness|Completeness|  .     Another important sub-class consists of algorithms for exploring the  |game_tree|Game_Tree|  of multiple-player games, such as  |chess|Chess|  or  |backgammon|Backgammon| , whose nodes consist of all possible game situations that could result from the current situation. The goal in these problems is to find the move that provides the best chance of a win, taking into account all possible moves of the opponent. Similar problems occur when humans or machines have to make successive decisions whose outcomes are not entirely under ones control, such as in  |robot|Robot|  guidance or in  |marketing|Marketing| ,  |financial|Finance| , or  |military|Military|  strategy planning. This kind of problem —  |combinatorial_search|Combinatorial_Search|  — has been extensively studied in the context of  |artificial_intelligence|Artificial_Intelligence| . Examples of algorithms for this class are the  |minimax_algorithm|Minimax| ,  |alpha–beta_pruning|Alpha–Beta_Pruning| , Informational search  and the  |A_algorithm|A_Search_Algorithm| .       The name combinatorial search is generally used for algorithms that look for a specific sub-structure of a given  |discrete_structure|Discrete_Mathematics| , such as a graph, a  |string|String| , a finite  |group|Group| , and so on. The term  |combinatorial_optimization|Combinatorial_Optimization|  is typically used when the goal is to find a sub-structure with a maximum value of some parameter.     An important and extensively studied subclass are the  |graph_algorithms|List_Of_Algorithmsgraph_Algorithms| , in particular  |graph_traversal|Graph_Traversal|  algorithms, for finding specific sub-structures in a given graph — such as  |subgraphs|Glossary_Of_Graph_Theorysubgraphs| ,  |paths|Path| , circuits, and so on. Examples include  |Dijkstras_algorithm|Dijkstras_Algorithm| ,  |Kruskals_algorithm|Kruskals_Algorithm| , the  |nearest_neighbour_algorithm|Nearest_Neighbour_Algorithm| , and  |Prims_algorithm|Prims_Algorithm| .     Another important subclass of this category are the  |string_searching_algorithms|String_Searching_Algorithm| , that search for patterns within strings. Two famous examples are the  |Boyer–Moore|Boyer–Moore_String_Search_Algorithm|  and  |Knuth–Morris–Pratt_algorithms|Knuth–Morris–Pratt_Algorithm| , and several algorithms based on the  |suffix_tree|Suffix_Tree|  data structure.       In 1953, American  |statistician|Statistics| |Jack_Kiefer|Jack_Kiefer|  devised  |Fibonacci_search|Fibonacci_Search_Technique|  which can be used to find the maximum of a unimodal function and has many other applications in computer science.       There are also search methods designed for  |quantum_computers|Quantum_Computing| , like  |Grovers_algorithm|Grovers_Algorithm| .