     In  |computer_science|Computer_Science| , selection sort is a  |sorting_algorithm|Sorting_Algorithm| , specifically an  |in-place|In-Place_Algorithm| |comparison_sort|Comparison_Sort| . It has  |O|Big_O_Notation| |time_complexity|Time_Complexity| , making it inefficient on large lists, and generally performs worse than the similar  |insertion_sort|Insertion_Sort| . Selection sort is noted for its simplicity, and it has performance advantages over more complicated algorithms in certain situations, particularly where  |auxiliary_memory|Auxiliary_Memory|  is limited.     The algorithm divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest element in the unsorted sublist, exchanging it with the leftmost unsorted element , and moving the sublist boundaries one element to the right.     The time efficiency of selection sort is quadratic, so there are a number of sorting techniques which have better time complexity than selection sort. Selection sort makes n - 1 swaps in the worst case. The time efficiency of selection sort with respect to swapping is linear, which distinguishes selection sort from other sorting algorithms.       Here is an example of this sort algorithm sorting five elements:               Selection sort can also be used on list structures that make add and remove efficient, such as a  |linked_list|Linked_List| . In this case it is more common to remove the minimum element from the remainder of the list, and then insert it at the end of the values sorted so far. For example:       arr 64 25 12 22 11     // Find the minimum element in arr   // and place it at beginning   11 25 12 22 64     // Find the minimum element in arr   // and place it at beginning of arr   11 12 25 22 64     // Find the minimum element in arr   // and place it at beginning of arr   11 12 22 25 64     // Find the minimum element in arr   // and place it at beginning of arr   11 12 22 25 64            Below is an implementation in  |C|C| . More implementations can be found on  |the_talk_page_of_this_Wikipedia_article|Talk:Selection_Sortimplementations| .     / a to a is the array to sort /   int i,j;   int aLength; // initialise to as length     / advance the position through the entire array /   /  .