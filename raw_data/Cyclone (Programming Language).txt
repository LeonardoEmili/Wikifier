The Cyclone  |programming_language|Programming_Language|  is intended to be a safe dialect of the  |C_language|C| . Cyclone is designed to avoid  |buffer_overflows|Buffer_Overflow|  and other vulnerabilities that are possible in C programs, without losing the power and convenience of C as a tool for  |system_programming|System_Programming| .     Cyclone development was started as a joint project of AT & T Labs Research and  |Greg_Morrisetts|Greg_Morrisett|  group at Cornell in 2001. Version 1.0 was released on May 8, 2006.       Cyclone attempts to avoid some of the common pitfalls of  |C|C| , while still maintaining its look and performance. To this end, Cyclone places the following limits on programs:    |NULL|Null_Pointer|  checks are inserted to prevent  |segmentation_faults|Segmentation_Fault| |Pointer_arithmetic|Pointer_Arithmetic|  is limited   Pointers must be initialized before use     |Dangling_pointers|Dangling_Pointer|  are prevented through region analysis and limits on  |free|Malloc| |goto|Control_Flow|  into scopes is disallowed    |switch|Control_Flow|  labels in different scopes are disallowed   Pointer-returning functions must execute return    |setjmp|Setjmp/Longjmp|  and  |longjmp|Setjmp/Longjmp|  are not supported     To maintain the tool set that C programmers are used to, Cyclone provides the following extensions:   Never- NULL pointers do not require NULL checks   Fat pointers support pointer arithmetic with run-time  |bounds_checking|Bounds_Checking| |Garbage_collection|Garbage_Collection|  for heap-allocated values    |Tagged_unions|Tagged_Union|  support type-varying arguments   Injections help automate the use of tagged unions for programmers    |Polymorphism|Polymorphism|  replaces some uses of  |void|Void_Pointer| |Exceptions|Exception_Handling|  replace some uses of setjmp and longjmp     For a better high-level introduction to Cyclone, the reasoning behind Cyclone and the source of these lists, see .     Cyclone looks, in general, much like  |C|C| , but it should be viewed as a C-like language.       Cyclone implements three kinds of  |pointer|Pointer| .   The purpose of introducing these new pointer types is to avoid common problems when using pointers. Take for instance a function, called foo that takes a pointer to an int:     int foo;     Although the person who wrote the function foo could have inserted NULL checks, let us assume that for performance reasons they did not. Calling foo; will result in  |undefined_behavior|Undefined_Behavior|  . To avoid such problems, Cyclone introduces the @ pointer type, which can never be NULL . Thus, the safe version of foo would be:     int foo;     This tells the Cyclone compiler that the argument to foo should never be NULL , avoiding the aforementioned undefined behavior. The simple change of to @ saves the programmer from having to write NULL checks and the operating system from having to trap NULL pointer dereferences. This extra limit, however, can be a rather large stumbling block for most C programmers, who are used to being able to manipulate their pointers directly with arithmetic. Although this is desirable, it can lead to  |buffer_overflows|Buffer_Overflow|  and other off-by-one -style mistakes. To avoid this, the ? pointer type is delimited by a known bound, the size of the array. Although this adds overhead due to the extra information stored about the pointer, it improves safety and security. Take for instance a simple strlen function, written in C:     int strlen    .