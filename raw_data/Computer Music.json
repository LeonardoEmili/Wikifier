[
    {
        "      Computer music is the application of ": null
    },
    {
        "computing technology": "Computing Technology"
    },
    {
        " in ": null
    },
    {
        "music composition": "Musical Composition"
    },
    {
        ", to help human ": null
    },
    {
        "composers": "Composer"
    },
    {
        " create new music or to have computers independently create music, such as with ": null
    },
    {
        "algorithmic composition": "Algorithmic Composition"
    },
    {
        " programs. It includes the theory and application of new and existing computer ": null
    },
    {
        "software": "Software"
    },
    {
        " technologies and basic aspects of music, such as ": null
    },
    {
        "sound synthesis": "Sound Synthesis"
    },
    {
        ", ": null
    },
    {
        "digital signal processing": "Digital Signal Processing"
    },
    {
        ", ": null
    },
    {
        "sound design": "Sound Design"
    },
    {
        ", sonic diffusion, ": null
    },
    {
        "acoustics": "Acoustics"
    },
    {
        ", and ": null
    },
    {
        "psychoacoustics": "Psychoacoustics"
    },
    {
        ". The field of computer music can trace its roots back to the origins of ": null
    },
    {
        "electronic music": "Electronic Music"
    },
    {
        ", and the very first experiments and innovations with electronic instruments at the turn of the 20th century.     In the 2000s, with the widespread availability of relatively affordable ": null
    },
    {
        "home computers": "Personal Computing"
    },
    {
        " that have a fast processing speed, and the growth of ": null
    },
    {
        "home recording": "Home Recording"
    },
    {
        " using ": null
    },
    {
        "digital audio recording": "Digital Audio Recording"
    },
    {
        " systems ranging from ": null
    },
    {
        "GarageBand": "Garageband"
    },
    {
        " to ": null
    },
    {
        "Pro Tools": "Pro Tools"
    },
    {
        ", the term is sometimes used to describe music that has been created using digital technology.             Much of the work on computer music has drawn on the relationship between ": null
    },
    {
        "music and mathematics": "Music And Mathematics"
    },
    {
        ", a relationship which has been noted since the ": null
    },
    {
        "Ancient Greeks": "Ancient Greece"
    },
    {
        " described the ": null
    },
    {
        "harmony of the spheres": "Harmony Of The Spheres"
    },
    {
        " .     Musical melodies were first generated by the computer originally named the CSIR Mark 1  in Australia in 1950. There were newspaper reports from America and England that computers may have played music earlier, but thorough research has debunked these stories as there is no evidence to support the newspaper reports . Research has shown that people speculated about computers playing music, possibly because computers would make noises,  but there is no evidence that they actually did it.       The worlds first computer to play music was the CSIR Mark 1 , which was designed and built by ": null
    },
    {
        "Trevor Pearcey": "Trevor Pearcey"
    },
    {
        " and Maston Beard from the late 1940s. Mathematician Geoff Hill programmed the CSIR Mark 1 to play popular musical melodies from the very early 1950s. In 1950 the CSIR Mark 1 was used to play music, the first known use of a digital computer for the purpose. The music was never recorded, but it has been accurately reconstructed.     In 1951 it publicly played the ": null
    },
    {
        "Colonel Bogey March": "Colonel Bogey March"
    },
    {
        "  of which only the reconstruction exists. However, the CSIR Mark 1 played standard repertoire and was not used to extend musical thinking or composition practice, as ": null
    },
    {
        "Max Mathews": "Max Mathews"
    },
    {
        " did, which is current computer-music practice.     The first music to be performed in England was a performance of the ": null
    },
    {
        "British National Anthem": "God Save The King"
    },
    {
        " that was programmed by ": null
    },
    {
        "Christopher Strachey": "Christopher Strachey"
    },
    {
        " on the ": null
    },
    {
        "Ferranti Mark 1": "Ferranti Mark 1"
    },
    {
        ", late in 1951. Later that year, short extracts of three pieces were recorded there by a ": null
    },
    {
        "BBC": "Bbc"
    },
    {
        " outside broadcasting unit: the National Anthem, ": null
    },
    {
        "Ba, Ba Black Sheep": "Ba, Ba Black Sheep"
    },
    {
        ", and ": null
    },
    {
        "In the Mood": "In The Mood"
    },
    {
        " and this is recognised as the earliest recording of a computer to play music as the ": null
    },
    {
        "CSIRAC": "Csirac"
    },
    {
        " music was never recorded. This recording can be heard at the . Researchers at the ": null
    },
    {
        "University of Canterbury": "University Of Canterbury"
    },
    {
        ", Christchurch declicked and restored this recording in 2016 and the results may be heard on ": null
    },
    {
        "SoundCloud": "Soundcloud"
    },
    {
        ".        Two further major 1950s developments were the origins of digital sound synthesis by computer, and of ": null
    },
    {
        "algorithmic composition": "Algorithmic Composition"
    },
    {
        " programs beyond rote playback. Max Mathews at Bell Laboratories developed the influential ": null
    },
    {
        "MUSIC I": "Music-N"
    },
    {
        " program and its descendents, further popularising computer music through a 1963 article in Science.  Amongst other pioneers, the musical chemists ": null
    },
    {
        "Lejaren Hiller": "Lejaren Hiller"
    },
    {
        " and Leonard Isaacson worked on a series of algorithmic composition experiments from 1956-9, manifested in the 1957 premiere of the Illiac Suite for string quartet. Lejaren Hiller and Leonard Isaacson, Experimental Music: Composition with an Electronic Computer . .      In ": null
    },
    {
        "Japan": "Japan"
    },
    {
        ", experiments in computer music date back to 1962, when ": null
    },
    {
        "Keio University": "Keio University"
    },
    {
        " professor Sekine and ": null
    },
    {
        "Toshiba": "Toshiba"
    },
    {
        " engineer Hayashi experimented with the  computer. This resulted in a piece entitled TOSBAC Suite, influenced by the Illiac Suite. Later Japanese computer music compositions include a piece by Kenjiro Ezaki presented during ": null
    },
    {
        "Osaka Expo 70": "Osaka Expo 70"
    },
    {
        " and Panoramic Sonore by music critic Akimichi Takeda. Ezaki also published an article called Contemporary Music and Computers in 1970. Since then, Japanese research in computer music has largely been carried out for commercial purposes in ": null
    },
    {
        "popular music": "Popular Music"
    },
    {
        ", though some of the more serious Japanese musicians used large computer systems such as the  Fairlight  in the 1970s.         Early computer-music programs typically did not run in ": null
    },
    {
        "real time": "Real-Time Computing"
    },
    {
        ", although the first experiments on ": null
    },
    {
        "CSIRAC": "Csirac"
    },
    {
        " and the ": null
    },
    {
        "Ferranti Mark 1": "Ferranti Mark 1"
    },
    {
        " did operate in ": null
    },
    {
        "real time": "Real-Time Computing"
    },
    {
        ". From the late 1950s, with increasingly sophisticated programming, programs would run for hours or days, on multimillion-dollar computers, to generate a few minutes of music.  In 1957 the MUSIC program allowed an IBM 704 mainframe computer to play a 17-second composition by Mathews. Back then computers were ponderous, so synthesis would take an hour.  The generation of sound signals requires very high sampling rates.... A high speed machine such as the I.B.M. 7090 ... can compute only about 5000 numbers per second ... when generating a reasonably complex sound. One way around this was to use a hybrid system of digital control of an ": null
    },
    {
        "analog synthesiser": "Analog Synthesiser"
    },
    {
        " and early examples of this were Max Mathews GROOVE system and also MUSYS by ": null
    },
    {
        "Peter Zinovieff": "Peter Zinovieff"
    },
    {
        " . In the late 1970s these systems became commercialised, notably by systems like the ": null
    },
    {
        "Roland MC-8 Microcomposer": "Roland Mc-8 Microcomposer"
    },
    {
        ", where a ": null
    },
    {
        "microprocessor": "Microprocessor"
    },
    {
        "-based system controls an ": null
    },
    {
        "analog synthesizer": "Analog Synthesizer"
    },
    {
        ", released in 1978. ": null
    },
    {
        "John Chownings": "John Chowning"
    },
    {
        " work on ": null
    },
    {
        "FM synthesis": "Fm Synthesis"
    },
    {
        " from the 1960s to the 1970s allowed much more efficient digital synthesis,  eventually leading to the development of the affordable FM synthesis-based ": null
    },
    {
        "Yamaha DX7": "Yamaha Dx7"
    },
    {
        " digital synthesizer": "Digital Synthesizer"
    },
    {
        ", released in 1983.  In addition to the Yamaha DX7, the advent of inexpensive digital ": null
    },
    {
        "chips": "Microprocessor"
    },
    {
        " and ": null
    },
    {
        "microcomputers": "Microcomputer"
    },
    {
        " opened the door to real-time generation of computer music. In the 1980s, Japanese ": null
    },
    {
        "personal computers": "Personal Computer"
    },
    {
        " such as the ": null
    },
    {
        "NEC PC-88": "Nec Pc-8801"
    },
    {
        " came installed with FM synthesis ": null
    },
    {
        "sound chips": "Sound Chip"
    },
    {
        " and featured ": null
    },
    {
        "audio programming languages": "Audio Programming Language"
    },
    {
        " such as ": null
    },
    {
        "Music Macro Language": "Music Macro Language"
    },
    {
        " and ": null
    },
    {
        "MIDI": "Midi"
    },
    {
        " interfaces, which were most often used to produce ": null
    },
    {
        "video game music": "Video Game Music"
    },
    {
        ", or ": null
    },
    {
        "chiptunes": "Chiptune"
    },
    {
        ". By the early 1990s, the performance of microprocessor-based computers reached the point that real-time generation of computer music using more general programs and algorithms became possible.  ... by the 90s ... digital sound manipulation became widespread, fluent and stable.   Interesting sounds must have a fluidity and changeability that allows them to remain fresh to the ear. In computer music this subtle ingredient is bought at a high computational cost, both in terms of the number of items requiring detail in a score and in the amount of interpretive work the instruments must produce to realize this detail in sound.        Advances in computing power and software for manipulation of digital media have dramatically affected the way computer music is generated and performed. Current-generation micro-computers are powerful enough to perform very sophisticated audio synthesis using a wide variety of algorithms and approaches. Computer music systems and approaches are now ubiquitous, and so firmly embedded in the process of creating music that we hardly give them a second thought: computer-based synthesizers, digital mixers, and effects units have become so commonplace that use of digital rather than analog technology to create and record music is the norm, rather than the exception.        Despite the ubiquity of computer music in contemporary culture, there is considerable activity in the field of computer music, as researchers continue to pursue new and interesting computer-based synthesis, composition, and performance approaches. Throughout the world there are many organizations and institutions dedicated to the area of computer and electronic music study and research, including the ": null
    },
    {
        "ICMA": "International Computer Music Association"
    },
    {
        " , C4DM , ": null
    },
    {
        "IRCAM": "Ircam"
    },
    {
        ", GRAME, ": null
    },
    {
        "SEAMUS": "Seamus"
    },
    {
        " , ": null
    },
    {
        "CEC": "Canadian Electroacoustic Community"
    },
    {
        " , and a great number of institutions of higher learning around the world.             Later, composers such as ": null
    },
    {
        "Gottfried Michael Koenig": "Gottfried Michael Koenig"
    },
    {
        " and ": null
    },
    {
        "Iannis Xenakis": "Iannis Xenakis"
    },
    {
        " had computers generate the sounds of the composition as well as the score. Koenig produced ": null
    },
    {
        "algorithmic composition": "Algorithmic Composition"
    },
    {
        " programs which were a generalisation of his own ": null
    },
    {
        "serial composition": "Serial Composition"
    },
    {
        " practice. This is not exactly similar to Xenakis work as he used mathematical abstractions and examined how far he could explore these musically. Koenigs software translated the calculation of mathematical equations into codes which represented musical notation. This could be converted into musical notation by hand and then performed by human players. His programs Project 1 and Project 2 are examples of this kind of software. Later, he extended the same kind of principles into the realm of synthesis, enabling the computer to produce the sound directly. SSP is an example of a program which performs this kind of function. All of these programs were produced by Koenig at the ": null
    },
    {
        "Institute of Sonology": "Institute Of Sonology"
    },
    {
        " in ": null
    },
    {
        "Utrecht": "Utrecht"
    },
    {
        " in the 1970s.        Computers have also been used in an attempt to imitate the music of great composers of the past, such as ": null
    },
    {
        "Mozart": "Wolfgang Amadeus Mozart"
    },
    {
        ". A present exponent of this technique is ": null
    },
    {
        "David Cope": "David Cope"
    },
    {
        ". He wrote computer programs that analyse works of other composers to produce new works in a similar style. He has used this program to great effect with composers such as Bach and Mozart , and also within his own pieces, combining his own creations with that of the computer.      ": null
    },
    {
        "Melomics": "Melomics"
    },
    {
        ", a research project from the ": null
    },
    {
        "University of Málaga": "University Of Málaga"
    },
    {
        ", Spain, developed a computer composition cluster named ": null
    },
    {
        "Iamus": "Iamus"
    },
    {
        ", which composes complex, multi-instrument pieces for editing and performance. Since its inception, ": null
    },
    {
        "Iamus": "Iamus"
    },
    {
        " has composed a full album in 2012, appropriately named ": null
    },
    {
        "Iamus": "Iamus"
    },
    {
        ", which ": null
    },
    {
        "New Scientist": "New Scientist"
    },
    {
        " described as The first major work composed by a computer and performed by a full orchestra.  The group has also developed an ": null
    },
    {
        "API": "Api"
    },
    {
        " for developers to utilize the technology, and makes its music available on its website.     Computer-aided algorithmic compositionComputer-aided algorithmic composition is the implementation and use of ": null
    },
    {
        "algorithmic composition": "Algorithmic Composition"
    },
    {
        " techniques in software. This label is derived from the combination of two labels, each too vague for continued use. The label computer-aided composition lacks the specificity of using generative algorithms. Music produced with notation or sequencing software could easily be considered computer-aided composition. The label algorithmic composition is likewise too broad, particularly in that it does not specify the use of a computer. The term ": null
    },
    {
        "computer-aided": "Computer-Aided"
    },
    {
        ", rather than computer-assisted, is used in the same manner as ": null
    },
    {
        "computer-aided design": "Computer-Aided Design"
    },
    {
        ". Christopher Ariza: An Open Design for Computer-Aided Algorithmic Music Composition, Universal-Publishers Boca Raton, Florida, 2005, p. 5          Machine improvisation uses computer algorithms to create ": null
    },
    {
        "improvisation": "Improvisation"
    },
    {
        " on existing music materials. This is usually done by sophisticated recombination of musical phrases extracted from existing music, either live or pre-recorded. In order to achieve credible improvisation in particular style, machine improvisation uses ": null
    },
    {
        "machine learning": "Machine Learning"
    },
    {
        " and ": null
    },
    {
        "pattern matching": "Pattern Matching"
    },
    {
        " algorithms to analyze existing musical examples. The resulting patterns are then used to create new variations in the style of the original music, developing a notion of stylistic reinjection.   This is different from other improvisation methods with computers that use ": null
    },
    {
        "algorithmic composition": "Algorithmic Composition"
    },
    {
        " to generate new music without performing analysis of existing music examples. Mauricio Toro, Carlos Agon, Camilo Rueda, Gerard Assayag.  , Journal of Theoretical and Applied Information Technology 86, no. 2 : 327–331.       Style modeling implies building a computational representation of the musical surface that captures important stylistic features from data. Statistical approaches are used to capture the redundancies in terms of pattern dictionaries or repetitions, which are later recombined to generate new musical data. Style mixing can be realized by analysis of a database containing multiple musical examples in different styles. Machine Improvisation builds upon a long musical tradition of statistical modeling that began with Hiller and Isaacsons Illiac Suite for String Quartet and Xenakis uses of ": null
    },
    {
        "Markov chains": "Markov Chains"
    },
    {
        " and ": null
    },
    {
        "stochastic processes": "Stochastic Processes"
    },
    {
        ". Modern methods include the use of ": null
    },
    {
        "lossless data compression": "Lossless Data Compression"
    },
    {
        " for incremental parsing, ": null
    },
    {
        "prediction suffix tree": "Prediction Suffix Tree"
    },
    {
        ", ": null
    },
    {
        "string searching": "String Searching"
    },
    {
        " and more. S. Dubnov, G. Assayag, O. Lartillot, G. Bejerano, Using Machine-Learning Methods for Musical Style Modeling , IEEE Computers, 36 , pp. 73–80, Oct. 2003. Style mixing is possible by blending models derived from several musical sources, with the first style mixing done by S. Dubnov in a piece NTrope Suite using Jensen-Shannon joint source model. DUBNOV, S. . Stylistic randomness: About composing NTrope Suite. Organised Sound, 4, 87–92. doi:10.1017/S1355771899002046 Later the use of ": null
    },
    {
        "factor oracle": "Factor Oracle"
    },
    {
        " algorithm   was adopted for music by Assayag and Dubnov Using factor oracles for machine improvisation   G Assayag, S Dubnov   Soft Computing 8 , 604–610 and became the basis for several systems that use stylistic re-injection. Memex and composer duets: computer-aided composition using style mixing S Dubnov, G Assayag Open Music composers book 2, 53–66         The first implementation of statistical style modeling was the LZify method in Open Music G. Assayag, S. Dubnov, O. Delerue, Guessing the Composers Mind : Applying Universal Prediction to Musical Style , In Proceedings of International Computer Music Conference, Beijing, 1999. , followed by the Continuator system that implemented interactive machine improvisation that interpreted the LZ incremental parsing in terms of ": null
    },
    {
        "Markov models": "Markov Models"
    },
    {
        " and used it for real time style modeling  developed by ": null
    },
    {
        "François Pachet": "François Pachet"
    },
    {
        " at Sony CSL Paris in 2002 Pachet, F.,  . In ICMA, editor, Proceedings of ICMC, pages 211–218, Göteborg, Sweden, September 2002. ICMA. Best paper award. Pachet, F.  . IEEE Multimedia,9:77–82 2002. . Matlab implementation of the Factor Oracle machine improvisation can be found as part of ": null
    },
    {
        "Computer Audition": "Computer Audition"
    },
    {
        " toolbox. There is also an NTCC implementation of the Factor Oracle machine improvisation.   M Toro, C Rueda, C Agón, G Assayag. NTCCRT: A concurrent constraint framework for soft-real time music interaction.   Journal of Theoretical & Applied Information Technology Vol. 82 Issue 1, p184-193. 2015     OMax is a software environment developed in IRCAM. OMax uses ": null
    },
    {
        "OpenMusic": "Openmusic"
    },
    {
        " and Max. It is based on researches on stylistic modeling carried out by Gerard Assayag and Shlomo Dubnov and on researches on improvisation with the computer by G. Assayag, M. Chemillier and G. Bloch  in the Ircam Music Representations group.    One of the problems in modeling audio signals with factor oracle is the symbolization of features from continuous values to a discrete alphabet. This problem was solved in the Variable Markov Oracle available as python implementation Guided music synthesis with variable markov oracle   C Wang, S Dubnov,, Tenth Artificial Intelligence and Interactive Digital Entertainment Conference, 2014 , using an information rate criteria for finding the optimal or most informative representation S Dubnov, G Assayag, A Cont, Audio oracle analysis of musical information rate IEEE Fifth International Conference on Semantic Computing, 567–57, 2011 .        ": null
    },
    {
        "Jeremy Baguyos": "Jeremy Castro Baguyos"
    },
    {
        "   Tim Blackwell   George Bloch   Marc Chemiller   ": null
    },
    {
        "Nick Collins": "Nick Collins"
    },
    {
        "   Shlomo Dubnov   ": null
    },
    {
        "Mari Kimura": "Mari Kimura"
    },
    {
        "    Amanuel Zarzowski   ": null
    },
    {
        "George Lewis": "George Lewis"
    },
    {
        "   Bernard Lubat": "Bernard Lubat"
    },
    {
        "   François Pachet": "François Pachet"
    },
    {
        "   Joel Ryan   ": null
    },
    {
        "Michel Waisvisz": "Michel Waisvisz"
    },
    {
        "   David Wessel   Michael Young   ": null
    },
    {
        "Pietro Grossi": "Pietro Grossi"
    },
    {
        "   Toby Gifford and Andrew Brown   Davis Salks   Doug Van Nort          Live coding   is the name given to the process of writing ": null
    },
    {
        "software": "Software"
    },
    {
        " in realtime as part of a ": null
    },
    {
        "performance": "Performance"
    },
    {
        ". Recently it has been explored as a more rigorous alternative to laptop musicians who, live coders often feel, lack the charisma and pizzazz of ": null
    },
    {
        "musicians": "Musicians"
    },
    {
        " performing live. ": null
    }
]