[
    {
        "          In ": null
    },
    {
        "logic": "Logic"
    },
    {
        ", ": null
    },
    {
        "mathematics": "Mathematics"
    },
    {
        " and ": null
    },
    {
        "linguistics": "Linguistics"
    },
    {
        ", And is the ": null
    },
    {
        "truth-functional": "Truth Function"
    },
    {
        " operator of logical conjunction; the and of a set of operands is true if and only if all of its operands are true. The ": null
    },
    {
        "logical connective": "Logical Connective"
    },
    {
        " that represents this operator is typically written as  or .     A   B is true only if A is true and B is true.     An operand of a conjunction is a conjunct.     The term logical conjunction is also used for the ": null
    },
    {
        "greatest lower bound": "Greatest Lower Bound"
    },
    {
        " in ": null
    },
    {
        "lattice theory": "Lattice"
    },
    {
        ".     Related concepts in other fields are:     In ": null
    },
    {
        "natural language": "Natural Language"
    },
    {
        ", the ": null
    },
    {
        "coordinating conjunction": "Grammatical Conjunctioncoordinating Conjunctions"
    },
    {
        " and .   In programming languages, the ": null
    },
    {
        "short-circuit and": "Short-Circuit Evaluation"
    },
    {
        " control structure": "Control Structure"
    },
    {
        ".   In ": null
    },
    {
        "set theory": "Set Theory"
    },
    {
        ", ": null
    },
    {
        "intersection": "Intersection"
    },
    {
        ".   In ": null
    },
    {
        "predicate logic": "Predicate Logic"
    },
    {
        ", ": null
    },
    {
        "universal quantification": "Universal Quantification"
    },
    {
        ".         And is usually denoted by an infix operator: in mathematics and logic, it is denoted by ,  or ; in electronics, ; and in programming languages,  & amp; ,  & amp; & amp; , or  and . In ": null
    },
    {
        "Jan Łukasiewiczs": "Jan Łukasiewicz"
    },
    {
        " prefix notation for logic": "Polish Notationpolish Notation For Logic"
    },
    {
        ", the operator is K, for Polish koniunkcja. ": null
    },
    {
        "Józef Maria Bocheński": "Józef Maria Bocheński"
    },
    {
        " , A Précis of Mathematical Logic, translated by Otto Bird from the French and German editions, Dordrecht, North Holland: D. Reidel, passim.       Logical conjunction is an ": null
    },
    {
        "operation": "Logical Operation"
    },
    {
        " on two ": null
    },
    {
        "logical value": "Logical Value"
    },
    {
        "s, typically the values of two ": null
    },
    {
        "proposition": "Proposition"
    },
    {
        "s, that produces a value of true ": null
    },
    {
        "if and only if": "Iff"
    },
    {
        " both of its operands are true.     The conjunctive ": null
    },
    {
        "identity": "Identity Element"
    },
    {
        " is true, which is to say that AND-ing an expression with true will never change the value of the expression. In keeping with the concept of ": null
    },
    {
        "vacuous truth": "Vacuous Truth"
    },
    {
        ", when conjunction is defined as an operator or function of arbitrary ": null
    },
    {
        "arity": "Arity"
    },
    {
        ", the empty conjunction is often defined as having the result true.            The ": null
    },
    {
        "truth table": "Truth Table"
    },
    {
        " of A   B :            In systems where logical conjunction is not a primitive, it may be defined as    : A   B     or   : A   B         As a rule of inference, ": null
    },
    {
        "conjunction introduction": "Conjunction Introduction"
    },
    {
        " is a classically ": null
    },
    {
        "valid": "Validity"
    },
    {
        ", simple ": null
    },
    {
        "argument form": "Argument Form"
    },
    {
        ". The argument form has two premises, A and B. Intuitively, it permits the inference of their conjunction.     :A,   :B.   :Therefore, A and B.     or in ": null
    },
    {
        "logical operator": "Logical Operator"
    },
    {
        " notation:   : A,   : B   :   A   B     Here is an example of an argument that fits the form  conjunction introduction ": null
    },
    {
        "Conjunction elimination": "Conjunction Elimination"
    },
    {
        " is another classically ": null
    },
    {
        "valid": "Validity"
    },
    {
        ", simple ": null
    },
    {
        "argument form": "Argument Form"
    },
    {
        ". Intuitively, it permits the inference from any conjunction of either element of that conjunction.     :A and B.   :Therefore, A.     ...or alternatively,     :A and B.   :Therefore, B.     In ": null
    },
    {
        "logical operator": "Logical Operator"
    },
    {
        " notation:   : A   B   :   A     ...or alternatively,     : A   B   :   B         A conjunction A  B is be proven false by establishing either   A or   B .   In terms of the object language, this reads     :   A      This formula can be seen as a special case of     :       when C is a false proposition.       If A implies   B , then both   A as well as A prove the conjunction false:   :     In other words, a conjunction can actually be proven false just by knowing about the relation of its conjuncts and not necessary about their truth values.     This formula can be seen as a special case of   :       when C is a false proposition.     Either of the above are constructively valid proofs by contradiction.        commutativity : yes         associativity : yes         distributivity : with various operations, especially with  or               idempotency : yes         monotonicity : yes        truth-preserving: yes   When all inputs are true, the output is true.        falsehood-preserving: yes   When all inputs are false, the output is false.         Walsh spectrum :      Non linearity : 1      If using ": null
    },
    {
        "binary": "Binary Numeral System"
    },
    {
        " values for true and false , then logical conjunction works exactly like normal arithmetic ": null
    },
    {
        "multiplication": "Multiplication"
    },
    {
        ".        In high-level computer programming and ": null
    },
    {
        "digital electronics": "Digital Electronics"
    },
    {
        ", logical conjunction is commonly represented by an infix operator, usually as a keyword such as AND , an algebraic multiplication, or the ampersand symbol & . Many languages also provide ": null
    },
    {
        "short-circuit": "Short-Circuit Evaluation"
    },
    {
        " control structures corresponding to logical conjunction.     Logical conjunction is often used for bitwise operations, where 0 corresponds to false and 1 to true:     0 AND 0     0 ,   0 AND 1     0 ,   1 AND 0     0 ,   1 AND 1     1 .     The operation can also be applied to two binary ": null
    },
    {
        "words": "Words"
    },
    {
        " viewed as ": null
    },
    {
        "bitstrings": "Bitstring"
    },
    {
        "of equal length, by taking the bitwise AND of each pair of bits at corresponding positions. For example:     11000110 AND 10100011     10000010 .     This can be used to select part of a bitstring using a ": null
    },
    {
        "bit mask": "Mask"
    },
    {
        ". For example, 10011101 AND 00001000     00001000 extracts the fifth bit of an 8-bit bitstring.     In ": null
    },
    {
        "computer networking": "Computer Networking"
    },
    {
        ", bit masks are used to derive the network address of a ": null
    },
    {
        "subnet": "Subnetwork"
    },
    {
        " within an existing network from a given ": null
    },
    {
        "IP address": "Ip Address"
    },
    {
        ", by ANDing the IP address and the ": null
    },
    {
        "subnet mask": "Subnetworkbinary Subnet Masks"
    },
    {
        ".     Logical conjunction AND is also used in ": null
    },
    {
        "SQL": "Sql"
    },
    {
        " operations to form ": null
    },
    {
        "database": "Database"
    },
    {
        " queries.     The ": null
    },
    {
        "Curry–Howard correspondence": "Curry–Howard Correspondence"
    },
    {
        " relates logical conjunction to ": null
    },
    {
        "product type": "Product Type"
    },
    {
        "s.       The membership of an element of an ": null
    },
    {
        "intersection set": "Intersection"
    },
    {
        " in ": null
    },
    {
        "set theory": "Set Theory"
    },
    {
        " is defined in terms of a logical conjunction: x ∈ A ∩ B if and only if  ∧ . Through this correspondence, set-theoretic intersection shares several properties with logical conjunction, such as ": null
    },
    {
        "associativity": "Associativity"
    },
    {
        ", ": null
    },
    {
        "commutativity": "Commutativity"
    },
    {
        ", and ": null
    },
    {
        "idempotence": "Idempotence"
    },
    {
        ".       As with other notions formalized in ": null
    },
    {
        "mathematical logic": "Mathematical Logic"
    },
    {
        ", the logical conjunction and is related to, but not the same as, the ": null
    },
    {
        "grammatical conjunction": "Grammatical Conjunction"
    },
    {
        " and in natural languages.     English and has properties not captured by logical conjunction. For example, and sometimes implies order having the sense of then . For example, They got married and had a child in common discourse means that the marriage came before the child.     The word and can also imply a partition of a thing into parts, as The American flag is red, white, and blue. Here it is not meant that the flag is at once": null
    }
]