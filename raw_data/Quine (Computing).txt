     A quine is a  |computer_program|Computer_Program|  which takes no input and produces a copy of its own  |source_code|Source_Code|  as its only output. The standard terms for these programs in the  |computability_theory|Computability_Theory|  and  |computer_science|Computer_Science|  literature are self-replicating programs , self-reproducing programs , and self-copying programs .     A quine is a  |fixed_point|Fixed_Point|  of an execution environment, when the execution environment is viewed as a  |function|Function|  transforming programs into their outputs. Quines are possible in any  |Turing_complete|Turing_Completeness|  programming language, as a direct consequence of  |Kleenes_recursion_theorem|Kleenes_Recursion_Theorem| . For amusement, programmers sometimes attempt to develop the shortest possible quine in any given  |programming_language|Programming_Language| .     The name quine was coined by  |Douglas_Hofstadter|Douglas_Hofstadter| , in his popular science book  GÃ¶del, Escher, Bach , in honor of philosopher  |Willard_Van_Orman_Quine|Willard_Van_Orman_Quine|  , who made an extensive study of  |indirect_self-reference|Indirect_Self-Reference| , and in particular for the following paradox-producing expression, known as  |Quines_paradox|Quines_Paradox| |self-reproducing_automata|Von_Neumann_Universal_Constructor|  came from the dawn of computing, if not before.  |John_von_Neumann|John_Von_Neumann|  theorized about them in the 1940s. Later,  |Paul_Bratley|Paul_Bratley|  and Jean Millos article Computer Recreations: Self-Reproducing Automata discussed them in 1972.    Bratley first became interested in self-reproducing programs after seeing the first known such program written in  |Atlas_Autocode|Atlas_Autocode|  at Edinburgh in the 1960s by the  |University_of_Edinburgh|University_Of_Edinburgh|  lecturer and researcher  |Hamish_Dewar|Hamish_Dewar| .     The download source requirement of the  |Affero_General_Public_License|Affero_General_Public_License|  is based on the idea of a quine.         In general, the method used to create a quine in any programming language is to have, within the program, two pieces:   |code|Source_Code|  used to do the actual printing and   |data|Data|  that represents the textual form of the code. The code functions by using the data to print the code , but it also uses the data, processed in a simple way, to print the textual representation of the data itself.     The following  |Java|Java|  code demonstrates the basic structure of a quine.   public class Quine    .