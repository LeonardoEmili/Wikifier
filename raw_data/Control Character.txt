   In  |computing|Computing|  and  |telecommunication|Telecommunication| , a control character  or non-printing character  is a  |code_point|Code_Point|   in a  |character_set|Character_Encoding| , that does not represent a written symbol. They are used as  |in-band_signaling|In-Band_Signaling|  to cause effects other than the addition of a symbol to the text. All other characters are mainly printing, printable, or  graphic character s, except perhaps for the space character .     All entries in the  |ASCII|Ascii|  table below code 32  are of this kind, including  |CR_and_LF|Newline|  used to separate lines of text. The code 127  is also a control character.  |Extended_ASCII|Extended_Ascii|  sets defined by  |ISO_8859|Iso_8859|  added the codes 128 through 159 as control characters, this was primarily done so that if the high bit was stripped it would not change a printing character to a C0 control code, but there have been some assignments here, in particular  |NEL|Newline| . This second set is called the  |C1|C0_And_C1_Control_Codes|  set.     These 65 control codes were carried over to  |Unicode|Unicode| . Unicode added more characters that could be considered controls, but it makes a distinction between these Formatting characters , and the 65 Control characters.     The  |Extended_Binary_Coded_Decimal_Interchange_Code|Extended_Binary_Coded_Decimal_Interchange_Code|  character set contains 65 control codes, including all of the ASCII control codes as well as additional codes which are mostly used to control IBM peripherals.              |Procedural_signs|Prosigns_For_Morse_Code|  in  |Morse_code|Morse_Code|  are a form of control character.     A form of control characters were introduced in the 1870  |Baudot_code|Baudot_Code| |Murray_code|Murray_Code|  added the  |carriage_return|Carriage_Return|  and  |line_feed|Line_Feed|  , and other versions of the Baudot code included other control characters.     The  |bell_character|Bell_Character|  , which rang a bell to alert operators, was also an early  |teletype|Teleprinter|  control character.     Control characters have also been called format effectors .       The control characters in ASCII still in common use include:   0 , originally intended to be an ignored character, but now used by many  |programming_languages|Programming_Language|  including  |C|C_Programming_Language|  to  |mark_the_end_of_a_string|Null-Terminated_String| .   7 , which may cause the device to emit a warning such as a bell or beep sound or the screen flashing.   8 , may overprint the previous character.   9 , moves the printing position right to the next tab stop.   10 , moves the print head down one line, or to the left edge and down. Used as the end of line marker in most  |UNIX_systems|Unix|  and variants.   11 , vertical tabulation.   12 , to cause a printer to eject paper to the top of the next page, or a video terminal to clear the screen.   13 , moves the printing position to the start of the line, allowing overprinting. Used as the end of line marker in  |Classic_Mac_OS|Classic_Mac_Os| ,  |OS-9|Os-9| ,  |FLEX|Flex|  . A CR+LF pair is used by  |CP/M|Cp/M| -80 and its derivatives including  |DOS|Dos|  and  |Windows|Microsoft_Windows| , and by  |Application_Layer|Application_Layer| |protocols|Communications_Protocol|  such as  |FTP|File_Transfer_Protocol| ,  |SMTP|Simple_Mail_Transfer_Protocol| , and  |HTTP|Hypertext_Transfer_Protocol| .   26 . Acts as an end-of-file for the Windows text-mode file i/o.   27 . Introduces an  |escape_sequence|Escape_Sequence| .     Control characters may be described as doing something when the user inputs them, such as code 3  to interrupt the running process, or code 4 , used to end text input or to exit a  |Unix_shell|Unix_Shell| . These uses usually have little to do with their use when they are in text being output, and on modern systems usually do not involve the transmission of the code number at all .     There were quite a few control characters defined . This was because early terminals had very primitive mechanical or electrical controls that made any kind of state-remembering  |API|Api|  quite expensive to implement, thus a different code for each and every function looked like a requirement. It quickly became possible and inexpensive to interpret sequences of codes to perform a function, and device makers found a way to send hundreds of device instructions. Specifically, they used ASCII code 27 , followed by a series of characters called a control sequence or escape sequence . The mechanism was invented by  |Bob_Bemer|Bob_Bemer| , the father of ASCII. For example, the sequence of code 27, followed by the printable characters 2;10H , would cause a  |DEC_VT-102|Vt100|  terminal to move its  |cursor|Cursor|  to the 10th cell of the 2nd line of the screen. Several standards exist for these sequences, notably  |ANSI_X3.64|Ansi_X3.64| . But the number of non-standard variations in use is large, especially among printers, where technology has advanced far faster than any standards body can possibly keep up with.          In Unicode, Control-characters are U+0000  U+001F , U+007F , and U+0080  U+009F . Their  |General_Category|Unicode_Character_Propertiesgeneral_Category|  is Cc . Formatting codes are distinct, in General Category Cf . The Cc control characters have no Name in Unicode, but are given labels such as instead.        There are a number of techniques to display non-printing characters, which may be illustrated with the  |bell_character|Bell_Character|  in  |ASCII|Ascii|  encoding:    |Code_point|Code_Point| |ISO_2047|Iso_2047|  graphical representation: Unicode U+237E , graphic for bell    |Caret_notation|Caret_Notation|  in ASCII, where code point 00xxxxx is represented as a caret followed by the capital letter at code point 10xxxxx: G   An  |escape_sequence|Escape_Sequence| , as in  |C|C| / |C++|C++|  character string codes:   ,   ,   , etc.       ASCII-based  |keyboards|Keyboard|  have a key labelled  |Control|Control_Key|  , Ctrl , or Cntl which is used much like a shift key, being pressed in combination with another letter or symbol key. In one implementation, the control key generates the code 64 places below the code for the uppercase letter it is pressed in combination with . The other implementation is to take the ASCII code produced by the key and  |bitwise_AND|Bitwise_Operation|  it with 31, forcing bits 6 and 7 to zero. For example, pressing control and the letter g or G .