[
    {
        "   In ": null
    },
    {
        "computer science": "Computer Science"
    },
    {
        ", register transfer language  is a kind of ": null
    },
    {
        "intermediate representation": "Intermediate Representation"
    },
    {
        " that is very close to ": null
    },
    {
        "assembly language": "Assembly Language"
    },
    {
        ", such as that which is used in a ": null
    },
    {
        "compiler": "Compiler"
    },
    {
        ". It is used to describe data flow at the ": null
    },
    {
        "register-transfer level": "Register-Transfer Level"
    },
    {
        " of an architecture. Academic papers and textbooks often use a form of RTL as an architecture-neutral assembly language. RTL is used as the name of a specific intermediate representation in several compilers, including the ": null
    },
    {
        "Gnu Compiler Collection": "Gnu Compiler Collection"
    },
    {
        " , Zephyr, and the European compiler projects ": null
    },
    {
        "CerCo": "Cerco"
    },
    {
        " and ": null
    },
    {
        "CompCert": "Compcert"
    },
    {
        ".       In GCC, RTL is generated from the GIMPLE representation, transformed by various passes in the GCC middle-end, and then converted to assembly language.     GCCs RTL is usually written in a form which looks like a ": null
    },
    {
        "Lisp": "Lisp Programming Language"
    },
    {
        " S-expression": "S-Expression"
    },
    {
        "   The idea behind RTL was first described in:   ": null
    }
]