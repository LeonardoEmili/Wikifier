              Computer software, or simply software, is a collection of  |data|Data|  or  |computer|Computer|  instructions that tell the computer how to work. This is in contrast to  |physical_hardware|Computer_Hardware| , from which the system is built and actually performs the work. In  |computer_science|Computer_Science|  and  |software_engineering|Software_Engineering| , computer software is all  |information|Information|  processed by  |computer_systems|Computer_System| ,  |programs|Computer_Program|  and  |data|Data| . Computer software includes  |computer_programs|Computer_Program| ,  |libraries|Library|  and related non-executable  |data|Data| , such as  |online_documentation|Software_Documentation|  or  |digital_media|Digital_Media| . Computer hardware and software require each other and neither can be realistically used on its own.     At the lowest programming level,  |executable_code|Executable_Code|  consists of  |machine_language|Machine_Code|  instructions supported by an individual  |processor|Microprocessor| —typically a  |central_processing_unit|Central_Processing_Unit|  or a  |graphics_processing_unit|Graphics_Processing_Unit|  . A machine language consists of groups of  |binary_values|Binary_Numbers|  signifying  |processor_instructions|Instruction|  that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location in the computer—an effect that is not directly observable to the user. An instruction  |may_also_invoke|System_Call|  one of many  |input_or_output_operations|Input_Output| , for example displaying some text on a computer screen; causing state changes which should be visible to the  |user|User| . The processor  |executes|Instruction_Cycle|  the instructions in the order they are provided, unless it is instructed to  |_jump_to_a_different_instruction|Branch_Instruction| , or is  |interrupt|Interrupt| ed by the operating system. , most  |personal_computers|Personal_Computer| ,  |smartphone|Smartphone|  devices and  |servers|Server|  have  |processors_with_multiple_execution_units|Multi_Core_Processor|  or  |multiple_processors_performing_computation|Multiprocessing|  together, and computing has become a much more  |concurrent|Concurrent_Computing|  activity than in the past.     The majority of software is written in  |high_level_programming_languages|High_Level_Programming_Language| . They are easier and more efficient for programmers because they are closer to  |natural_languages|Natural_Language|  than machine languages.  High-level languages are translated into machine language using a  |compiler|Compiler|  or an  |interpreter|Interpreter|  or a combination of the two. Software may also be written in a low-level  |assembly_language|Assembly_Language| , which has strong correspondence to the computers machine language instructions and is translated into machine language using an  |assembler|Assembly_Language| .          An outline  for what would have been the first piece of software was written by  |Ada_Lovelace|Ada_Lovelace|  in the 19th century, for the planned  |Analytical_Engine|Analytical_Engine| . She created  |proofs|Mathematical_Proof|  to show how the engine would calculate  |Bernoulli_Numbers|Bernoulli_Number| . Because of the proofs and the algorithm, she is considered the first computer programmer.       The first theory about software—prior to creation of computers as we know them today—was proposed by  |Alan_Turing|Alan_Turing|  in his 1935 essay On Computable Numbers, with an Application to the Entscheidungsproblem .     This eventually led to the creation of the academic fields of  |computer_science|Computer_Science|  and  |software_engineering|Software_Engineering| ; Both fields study software and its creation. Computer science is the theoretical study of computer and software , whereas software engineering is the application of engineering and development of software.     However, prior to 1946, software was not yet the programs stored in the memory of stored-program digital computers, as we now understand it. The first electronic computing devices were instead rewired in order to reprogram them.     In 2000, Fred Shapiro, a librarian at the Yale Law School, published a letter revealing that  |John_Wilder_Tukeys|John_Wilder_Tukey|  1958 paper The Teaching of Concrete Mathematics contained the earliest known usage of the term software found in a search of  |JSTORs|Jstor|  electronic archives, predating the  |OEDs|Oed|  citation by two years. This led many to credit Tukey with coining the term, particularly in obituaries published that same year, although Tukey never claimed credit for any such coinage. In 1995, Paul Niquette claimed he had originally coined the term in October 1953, although he could not find any documents supporting his claim. The earliest known publication of the term software in an engineering context was in August 1953 by Richard R. Carhart, in a  |Rand_Corporation|Rand_Corporation|  Research Memorandum.               On virtually all computer platforms, software can be grouped into a few broad categories.          Based on the goal, computer software can be divided into:      Application software  which is software that uses the computer system to perform special functions or provide  |entertainment_functions|Video_Game|  beyond the basic operation of the computer itself. There are many different types of application software, because the range of tasks that can be performed with a modern computer is so large—see  |list_of_software|List_Of_Software| .    System software  which is software for managing  computer hardware  behaviour, as to provide basic functionalities that are required by users, or for other software to run properly, if at all. System software is also designed for providing a platform for running application software,  and it includes the following:    Operating system s which are essential collections of software that manage resources and provides common services for other software that runs on top of them.  |Supervisory_programs|Supervisory_Program| ,  |boot_loaders|Boot_Loader| ,  |shells|Shell|  and  |window_systems|Window_System|  are core parts of operating systems. In practice, an operating system comes bundled with additional software so that a user can potentially do some work with a computer that only has one operating system.    Device driver s which operate or control a particular type of device that is attached to a computer. Each device needs at least one corresponding device driver; because a computer typically has at minimum at least one input device and at least one output device, a computer typically needs more than one device driver.    Utilities  which are computer  |programs|Programs_And_Features|  designed to assist users in the maintenance and care of their computers.    Malicious software  or malware which is software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is closely associated with computer-related crimes, though some malicious programs may have been designed as  |practical_jokes|Practical_Joke| .        |Desktop_applications|Desktop_Applications|  such as  |web_browsers|Web_Browser|  and  |Microsoft_Office|Microsoft_Office| , as well as  |smartphone|Smartphone|  and  |tablet|Tablet_Computer|  applications .     |JavaScript|Javascript|  scripts are pieces of software traditionally embedded in  |web_pages|Web_Pages|  that are run directly inside the  |web_browser|Web_Browser|  when a web page is loaded without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into JavaScript, or if a web browser plugin that supports that language is installed; the most common example of the latter is  |ActionScript|Actionscript|  scripts, which are supported by the  |Adobe_Flash|Adobe_Flash|  plugin.    |Server_software|Server_Software| , including:    |Web_applications|Web_Application| , which usually run on the  |web_server|Web_Server|  and output dynamically generated web pages to web browsers, using e.g.  |PHP|Php| ,  |Java|Java| ,  |ASP_NET|Asp_Net| , or even  |JavaScript_that_runs_on_the_server|Node_Js| . In modern times these commonly include some JavaScript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser.    |Plugins|Plug_In|  and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function;    |Embedded_software|Embedded_Software|  resides as  |firmware|Firmware|  within  |embedded_systems|Embedded_System| , devices dedicated to a single use or a few uses such as  |cars|Car|  and  |televisions|Television|  .  In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run  |embedded_operating_systems|Embedded_Operating_System| , and these systems do retain the distinction between system software and application software .    |Microcode|Microcode|  is a special, relatively obscure type of embedded software which tells the processor itself how to execute machine code, so it is actually a lower level than machine code. It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users . Thus an ordinary programmer would not expect to ever have to deal with it.          Programming tools are also software in the form of programs or applications that  |software_developers|Software_Developer|   use to create,  |debug|Debugging| ,  |maintain|Software_Maintenance|  , or otherwise  |support|Technical_Support|  software.     Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming tools. These tools may be relatively self-contained programs such as  |compilers|Compiler| ,  |debuggers|Debugger| ,  |interpreters|Interpreter| ,  |linkers|Linker| , and  |text_editors|Text_Editor| , that can be combined together to accomplish a task; or they may form an  |integrated_development_environment|Integrated_Development_Environment|  , which combines much or all of the functionality of such self-contained tools. IDEs may do this by either invoking the relevant individual tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual tools or an IDE.            Users often see things differently from programmers. People who use modern general purpose computers  usually see three layers of software performing a variety of tasks: platform, application, and user software.     Platform software The  |Platform|Platform|  includes the  |firmware|Firmware| ,  |device_drivers|Device_Driver| , an  |operating_system|Operating_System| , and typically a  |graphical_user_interface|Graphical_User_Interface|  which, in total, allow a user to interact with the computer and its  |peripherals|Peripheral|  . Platform software often comes bundled with the computer. On a  |PC|Personal_Computer|  one will usually have the ability to change the platform software.   Application software  |Application_software|Application_Software|  or Applications are what most people think of when they think of software. Typical examples include office suites and video games.  |Application_software|Application_Software|  is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other system software as applications.   User-written software  |End_user_development|End_User_Development|  tailors systems to meet users specific needs. User software include spreadsheet templates and  |word_processor|Word_Processor|  templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers.          Computer software has to be loaded into the  |computers_storage|Computer_Storage|  . Once the software has loaded, the computer is able to execute the software. This involves passing  |instructions|Instruction|  from the  |application_software|Application_Software| , through the system software, to the hardware which ultimately receives the instruction as  |machine_code|Machine_Code| . Each instruction causes the computer to carry out an operation—moving  |data|Data| , carrying out a  |computation|Computation| , or altering the  |control_flow|Control_Flow|  of instructions.     Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using pointers to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together.           Software quality is very important, especially for  |commercial|Commercial_Software|  and system software like  |Microsoft_Office|Microsoft_Office| ,  |Microsoft_Windows|Microsoft_Windows|  and  |Linux|Linux| . If software is faulty , it can delete a persons work, crash the computer and do other unexpected things. Faults and errors are called  |bugs|Software_Bug|  which are often discovered during alpha and beta testing. Software is often also a victim to what is known as  |software_aging|Software_Aging| , the progressive performance degradation resulting from a combination of unseen bugs.     Many bugs are discovered and eliminated through  |software_testing|Software_Testing| . However, software testing rarely—if ever—eliminates every bug; some programmers say that every program has at least one more bug .  In the  |waterfall|Waterfall_Model|  method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed  |agile_software_development|Agile_Software_Development| , developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through  |unit_testing|Unit_Testing| ,  |regression_testing|Regression_Testing|  and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance,  |NASA|Nasa|  has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together.          The softwares license gives the user the right to use the software in the licensed environment, and in the case of  |free_software_licenses|Free_Software_License| , also grants other rights such as the right to make copies.      |Proprietary_software|Proprietary_Software|  can be divided into two types:      |freeware|Freeware| , which includes the category of free trial software or  |freemium|Freemium|  software . As the name suggests, freeware can be used free, although in the case of free trials or freemium software, this is sometimes only true for a limited period of time or with limited functionality.   software available for a fee, often inaccurately termed  |commercial_software|Commercial_Software|  , which can only be legally used on purchase of a license.      |Open_source_software|Open_Source_Software| , on the other hand, comes with a  |free_software_license|Free_Software_License| , granting the recipient the rights to modify and redistribute the software.          Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a detailed idea on how to implement a piece of software, or a component of a piece of software. Ideas for useful things that software could do, and user requirements, are not supposed to be patentable, and concrete implementations are not supposed to be patentable either—the latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid—although since all useful software has effects on the physical world, this requirement may be open to debate. Meanwhile, American copyright law was applied to various aspects of the writing of the software code. Gerardo Con Díaz, The Text in the Machine: American Copyright Law and the Many Natures of Software, 1974–1978,” Technology and Culture 57 , 753–79.     Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyers—for example the patent for  |Aspect_Oriented_Programming|Aspect_Oriented_Programming|  , which purported to claim rights over any programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the United States, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents.          Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of  |Microsoft_Word|Microsoft_Word|  took much more time than designing and developing  |Microsoft_Notepad|Microsoft_Notepad|  because the latter has much more basic functionality.     Software is usually designed and created in  |integrated_development_environments|Integrated_Development_Environment|  like  |Eclipse|Eclipse| ,  |IntelliJ|Intellij_Idea|  and  |Microsoft_Visual_Studio|Microsoft_Visual_Studio|  that can simplify the process and  |compile|Compiler|  the software . As noted in a different section, software is usually created on top of existing software and the  |application_programming_interface|Application_Programming_Interface|  that the underlying software provides like  |GTK_|Gtk_| , JavaBeans or  |Swing|Swing| . Libraries can be categorized by their purpose. For instance, the  |Spring_Framework|Spring_Framework|  is used for implementing  |enterprise_applications|Enterprise_Application| , the  |Windows_Forms|Windows_Forms|  library is used for designing graphical user interface applications like  |Microsoft_Word|Microsoft_Word| , and  |Windows_Communication_Foundation|Windows_Communication_Foundation|  is used for designing  |web_services|Web_Service| . When a program is designed, it relies upon the API. For instance, a Microsoft Windows desktop application might call API functions in the  |_NET|_Net_Framework|  Windows Forms library like Form1.Close and Form1.Show  to close or open the application. Without these APIs, the programmer needs to write these functionalities entirely themselves. Companies like  |Oracle|Oracle_Corporation|  and  |Microsoft|Microsoft|  provide their own APIs so that many applications are written using their  |software_libraries|Library|  that usually have numerous APIs in them.      |Data_structures|Data_Structure|  such as  |hash_tables|Hash_Table| ,  |arrays|Array_Data_Type| , and  |binary_trees|Binary_Tree| , and  |algorithms|Algorithm|  such as  |quicksort|Quicksort| , can be useful for creating software.     Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.       A person who creates software is called a  |programmer|Programmer| ,  |software_engineer|Software_Engineer|  or  |software_developer|Software_Developer| , terms that all have a similar meaning. More informal terms for programmer also exist such as coder and hacker although use of the latter word may cause confusion, because it is more often used to mean  |someone_who_illegally_breaks_into_computer_systems|Hacker| .          A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry:  |Bill_Gates|Bill_Gates| , the co-founder of  |Microsoft|Microsoft|  was the richest person in the world in 2009, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for  |Microsoft_Windows|Microsoft_Windows|  and  |Microsoft_Office|Microsoft_Office|  software products - both market leaders in their respective product categories.     Non-profit software organizations include the  |Free_Software_Foundation|Free_Software_Foundation| ,  |GNU_Project|Gnu_Project|  and the  |Mozilla_Foundation|Mozilla_Foundation| . Software standard organizations like the  |W3C|W3C| ,  |IETF|Ietf|  develop recommended software standards such as  |XML|Xml| ,  |HTTP|Http|  and  |HTML|Html| , so that software can interoperate through these standards.     Other well-known large software companies include  |Google|Google| ,  |IBM|Ibm| ,  |TCS|Tata_Consultancy_Services| ,  |Infosys|Infosys| ,  |Wipro|Wipro| ,  |HCL_Technologies|Hcl_Technologies| ,  |Oracle|Oracle_Corporation| ,  |Novell|Novell| ,  |SAP|Sap_Ag| ,  |Symantec|Nortonlifelock| ,  |Adobe_Systems|Adobe_Systems| ,  |Sidetrade|Sidetrade|  and  |Corel|Corel| .