[
    {
        "        In ": null
    },
    {
        "mathematics": "Mathematics"
    },
    {
        ", a binary operation or dyadic operation is a calculation that combines two elements  to produce another element. More formally, a binary operation is an ": null
    },
    {
        "operation": "Operation"
    },
    {
        " of ": null
    },
    {
        "arity": "Arity"
    },
    {
        " two.     More specifically, a binary operation on a set  is a binary operation whose two ": null
    },
    {
        "domains": "Domain Of A Function"
    },
    {
        " and the ": null
    },
    {
        "codomain": "Codomain"
    },
    {
        " are the same set. Examples include the familiar ": null
    },
    {
        "arithmetic operations": "Arithmetic Operations"
    },
    {
        " of ": null
    },
    {
        "addition": "Addition"
    },
    {
        ", ": null
    },
    {
        "subtraction": "Subtraction"
    },
    {
        ", ": null
    },
    {
        "multiplication": "Multiplication"
    },
    {
        ". Other examples are readily found in different areas of mathematics, such as ": null
    },
    {
        "vector addition": "Vector Addition"
    },
    {
        ", ": null
    },
    {
        "matrix multiplication": "Matrix Multiplication"
    },
    {
        " and ": null
    },
    {
        "conjugation in groups": "Conjugation"
    },
    {
        ".     However, a binary operation may also involve several sets. For example, ": null
    },
    {
        "scalar multiplication": "Scalar Multiplication"
    },
    {
        " of ": null
    },
    {
        "vector spaces": "Vector Spaces"
    },
    {
        " takes a scalar and a vector to produce a vector, and ": null
    },
    {
        "scalar product": "Scalar Product"
    },
    {
        " takes two vectors to produce a scalar.     Binary operations are the keystone of most ": null
    },
    {
        "algebraic structure": "Algebraic Structure"
    },
    {
        "s, that are studied in ": null
    },
    {
        "algebra": "Algebra"
    },
    {
        ", and used in all mathematics, such as ": null
    },
    {
        "fields": "Field"
    },
    {
        ", ": null
    },
    {
        "groups": "Group"
    },
    {
        ", ": null
    },
    {
        "monoid": "Monoid"
    },
    {
        "s, ": null
    },
    {
        "ring": "Ring"
    },
    {
        "s, ": null
    },
    {
        "algebras": "Algebra Over A Field"
    },
    {
        ", and many more.       More precisely, a binary operation on a ": null
    },
    {
        "set": "Set"
    },
    {
        " S is a ": null
    },
    {
        "map": "Map"
    },
    {
        " which sends elements of the ": null
    },
    {
        "Cartesian product": "Cartesian Product"
    },
    {
        "  to S     :     S   S   S.   Because the result of performing the operation on a pair of elements of S is again an element of S, the operation is called a closed binary operation on S .  If f is not a ": null
    },
    {
        "function": "Function"
    },
    {
        ", but is instead a ": null
    },
    {
        "partial function": "Partial Function"
    },
    {
        ", it is called a partial binary operation. For instance, division of ": null
    },
    {
        "real numbers": "Real Numbers"
    },
    {
        " is a partial binary operation, because one cant ": null
    },
    {
        "divide by zero": "Division By Zero"
    },
    {
        "a/0 is not defined for any real a. However, both in ": null
    },
    {
        "universal algebra": "Universal Algebra"
    },
    {
        " and ": null
    },
    {
        "model theory": "Model Theory"
    },
    {
        " the binary operations considered are defined on all of .     Sometimes, especially in ": null
    },
    {
        "computer science": "Computer Science"
    },
    {
        ", the term is used for any ": null
    },
    {
        "binary function": "Binary Function"
    },
    {
        ".       Typical examples of binary operations are the ": null
    },
    {
        "addition": "Addition"
    },
    {
        " and ": null
    },
    {
        "multiplication": "Multiplication"
    },
    {
        " of ": null
    },
    {
        "numbers": "Number"
    },
    {
        "and ": null
    },
    {
        "matrices": "Matrix"
    },
    {
        " as well as ": null
    },
    {
        "composition of functions": "Composition Of Functions"
    },
    {
        " on a single set.   For instance,   On the set of real numbers R,  is a binary operation since the sum of two real numbers is a real number.   On the set of natural numbers N,  is a binary operation since the sum of two natural numbers is a natural number. This is a different binary operation than the previous one since the sets are different.   On the set M of  matrices with real entries,  is a binary operation since the sum of two such matrices is a  matrix.   On the set M of  matrices with real entries,  is a binary operation since the product of two such matrices is a  matrix.   For a given set C, let S be the set of all functions . Define  by  for all , the composition of the two functions h and h in S. Then f is a binary operation since the composition of the two functions is again a function on the set C .     Many binary operations of interest in both algebra and formal logic are ": null
    },
    {
        "commutative": "Commutative"
    },
    {
        ", satisfying  for all elements a and b in S, or ": null
    },
    {
        "associative": "Associative"
    },
    {
        ", satisfying  for all a, b and c in S. Many also have ": null
    },
    {
        "identity elements": "Identity Element"
    },
    {
        "and ": null
    },
    {
        "inverse element": "Inverse Element"
    },
    {
        "s.     The first three examples above are commutative and all of the above examples are associative.     On the set of real numbers R, ": null
    },
    {
        "subtraction": "Subtraction"
    },
    {
        ", that is, , is a binary operation which is not commutative since, in general, . It is also not associative, since, in general, ; for instance,  but .     On the set of natural numbers N, the binary operation ": null
    },
    {
        "exponentiation": "Exponentiation"
    },
    {
        ", , is not commutative since,  , and is also not associative since . For instance, with ,  and , , but . By changing the set N to the set of integers Z, this binary operation becomes a partial binary operation since it is now undefined when  and b is any negative integer. For either set, this operation has a right identity since  for all a in the set, which is not an identity since  in general.     ": null
    },
    {
        "Division": "Division"
    },
    {
        " , a partial binary operation on the set of real or rational numbers, is not commutative or associative. ": null
    },
    {
        "Tetration": "Tetration"
    },
    {
        " , as a binary operation on the natural numbers, is not commutative or associative and has no identity element.       Binary operations are often written using ": null
    },
    {
        "infix notation": "Infix Notation"
    },
    {
        " such as , ,  or  ab rather than by functional notation of the form . Powers are usually also written without operator, but with the second argument as ": null
    },
    {
        "superscript": "Superscript"
    },
    {
        ".     Binary operations sometimes use prefix or postfix notation, both of which dispense with parentheses. They are also called, respectively, ": null
    },
    {
        "Polish notation": "Polish Notation"
    },
    {
        " and ": null
    },
    {
        "reverse Polish notation": "Reverse Polish Notation"
    },
    {
        ".       A binary operation, ab, depends on the ": null
    },
    {
        "ordered pair": "Ordered Pair"
    },
    {
        "  and so c  depends in general on the ordered pair . Thus, for the general, non-associative case, binary operations can be represented with ": null
    },
    {
        "binary tree": "Binary Tree"
    },
    {
        "s.     However:   If the operation is associative, c a, then the value of c depends only on the ": null
    },
    {
        "tuple": "Tuple"
    },
    {
        " .   If the operation is commutative, ab ba, then the value of c depends only on , where braces indicate ": null
    },
    {
        "multiset": "Multiset"
    },
    {
        "s.   If the operation is both associative and commutative then the value of c depends only on the multiset .   If the operation is associative, commutative and ": null
    },
    {
        "idempotent": "Idempotent"
    },
    {
        ", aa a, then the value of c depends only on the ": null
    },
    {
        "set": "Set"
    },
    {
        " .         A binary operation f on a set S may be viewed as a ternary ": null
    },
    {
        "relation": "Finitary Relation"
    },
    {
        " on S, that is, the set of triples  in S × S × S for all a and b in S.       An  external binary operation is a binary function from K & times; S to S. This differs from a binary operation on a set in the sense in that K need not be S; its elements come from outside.     An example of an ": null
    },
    {
        "external": "External"
    },
    {
        " binary operation is ": null
    },
    {
        "scalar multiplication": "Scalar Multiplication"
    },
    {
        " in ": null
    },
    {
        "linear algebra": "Linear Algebra"
    },
    {
        ". Here K is a ": null
    },
    {
        "field": "Field"
    },
    {
        " and S is a ": null
    },
    {
        "vector space": "Vector Space"
    },
    {
        " over that field.     An ": null
    },
    {
        "external": "External"
    },
    {
        " binary operation may alternatively be viewed as an ": null
    },
    {
        "action": "Group Action"
    },
    {
        "; K is acting on S.     The ": null
    },
    {
        "dot product": "Dot Product"
    },
    {
        " of two vectors maps from S & times; S to K, where K is a field and S is a vector space over K": null
    }
]