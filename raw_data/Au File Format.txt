   The Au file format is a simple  |audio_file_format|Audio_File_Format|  introduced by  |Sun_Microsystems|Sun_Microsystems| . The format was common on  |NeXT|Next|  systems and on early Web pages. Originally it was headerless, being simply 8-bit  |μ_law|Mu_Law| -encoded data at an 8000  Hz sample rate. Hardware from other vendors often used sample rates as high as 8192  Hz, often integer multiples of video clock signal frequencies. Newer files have a header that consists of six  |unsigned|Signedness| |_32_bit|32_Bit|  words, an optional information chunk and then the data .     Although the format now supports many  |audio_encoding|Digital_Audio|  formats, it remains associated with the  |μ_law|Mu_Law|  logarithmic encoding. This encoding was native to the  |SPARCstation_1|Sparcstation_1|  hardware, where  |SunOS|Sunos|  exposed the encoding to application programs through the /dev/audio interface. This encoding and interface became a  |de_facto|De_Facto|  standard for  |Unix|Unix|  sound.       All fields are stored in  |big_endian|Big_Endian|  format, including the sample data.           The type of encoding depends on the value of the encoding field . Formats 2 through 7 are uncompressed linear  |PCM|Pulse_Code_Modulation| , therefore technically  |lossless|Lossless|  . Formats 1 and 27 are  |μ_law|Μ_Law_Algorithm|  and  |A_law|A_Law| , respectively, both  |companding|Companding|  logarithmic representations of PCM, and arguably lossy as they pack what would otherwise be almost 16 bits of dynamic range into 8 bits of encoded data, even though this is achieved by an altered dynamic response and no data is actually thrown away . Formats 23 through 26 are ADPCM, which is an early form of  |lossy_compression|Lossy_Compression| , usually but not always with 4 bits of encoded data per audio sample . Several of the others are  |DSP|Digital_Signal_Processing|  commands or data, designed to be processed by the  |NeXT|Next| |_Music_Kit|Music_Kit|  software.     Note: PCM formats are encoded as signed data .     Following the header structure is a variable-length annotation field. The contents of this field are currently undefined, except that its length must be a multiple of eight bytes and it must be terminated with at least one null byte. The audio data segment begins on an eight-byte boundary immediately following the annotation field. Audio data is encoded in the format identified by the file header. The current implementation supports only a single audio data segment per file. The variable-length annotation field is currently ignored by most audio applications.                            