        CORAL  is a  |programming_language|Programming_Language|  originally developed in 1964 at the  |Royal_Radar_Establishment|Royal_Radar_Establishment|  ,  |Malvern|Malvern_Worcestershire| ,  |UK|United_Kingdom| . It was influenced by  |ALGOL|Algol|  and  |JOVIAL|Jovial|  but is not a  |subset|Subset|  of either. Coral 66 was subsequently developed by I. F. Currie and M. Griffiths under the auspices of IECCA . Its official definition,        edited by  |Woodward|Philip_Woodward| , Wetherall and Gorman, was first published in 1970.         Coral 66 is a general-purpose programming language based on  |ALGOL_60|Algol_60| , with some features from Coral 64,  |JOVIAL|Jovial| , and  |FORTRAN|Fortran| . It includes structured record types  and supports the packing of data into limited storage . Like  |Edinburgh_IMP|Edinburgh_Imp|  it allows embedded assembler, and also offers good run-time checking and diagnostics. It is specifically intended for  |real_time|Real_Time_Computing|  and embedded applications and for use on computers with limited processing power, including those limited to  |fixed_point_arithmetic|Fixed_Point_Arithmetic|  and those without support for dynamic storage allocation.     The language was an inter-service standard for British military programming, and was also widely adopted for civil purposes in the British control and automation industry. It was used to write software for both the  |Ferranti|Ferranti|   and  |GEC|The_General_Electric_Company|  computers from 1971 onwards. Implementations also exist for the Interdata 8/32,  |PDP_11|Pdp_11| ,  |VAX|Vax| ,  |Alpha|Dec_Alpha|  platforms and  |HP_Integrity|Hp_Integrity|  servers; for the  |Honeywell|Honeywell| , and for the  |Computer_Technology_Limited|Computer_Technology_Limited| |_Modular_1|Information_Technology_Limitedthe_Modular_One| ; as well as for  |SPARC|Sparc|  running  |Solaris|Solaris|  and  |Intel|Intel|  running  |Linux|Linux| .     A variant of Coral 66 was developed during the late 1970s/early 1980s by the British  |GPO|General_Post_Office| , in conjunction with  |GEC|General_Electric_Company_Plc| , STC and  |Plessey|Plessey| , for use on the  |System_X|System_X|  digital telephone exchange control computers, known as PO-CORAL. This was later renamed BT-CORAL when  |British_Telecom|British_Telecom|  was spun off from the Post Office. Unique features of this language were the focus on real-time execution, message processing, limits on statement execution between waiting for input, and a prohibition on recursion to remove the need for a stack.     As Coral was aimed at a variety of real-time work, rather than general office DP, there was no standardised equivalent to a  |stdio|Stdio| |_library|Library| . IECCA recommended a primitive I/O package to accompany any compiler . Most implementers avoided this by producing Coral interfaces to existing Fortran and, later, C libraries.     Perhaps CORALs most significant contribution to computing was the enforcement of quality control in commercial  |compilers|Compiler| .  To have a CORAL compiler approved by IECCA, and thus allowing a compiler to be marketed as a CORAL 66 compiler, the candidate compiler had to compile and execute an official suite of 25 test programs and 6 benchmark programs. The process was part of the  |BS|British_Standard|   5905 approval process. This methodology was observed and adapted later by the  |United_States_Department_of_Defense|United_States_Department_Of_Defense|  for the official certification of  |Ada|Ada|  compilers.     Source code for a Coral 66 compiler  has been recovered and the Official Definition of Coral 66 document by  |HMSO|Office_Of_Public_Sector_Information| .