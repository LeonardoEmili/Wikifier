[
    {
        "               Artificial neural networks  or connectionist systems are computing systems that are inspired by, but not identical to, ": null
    },
    {
        "biological neural networks": "Biological Neural Network"
    },
    {
        "that constitute animal ": null
    },
    {
        "brain": "Brain"
    },
    {
        "s. Such systems learn to perform tasks by considering examples, generally without being programmed with task-specific rules. For example, in ": null
    },
    {
        "image recognition": "Image Recognition"
    },
    {
        ", they might learn to identify images that contain cats by analyzing example images that have been manually ": null
    },
    {
        "labeled": "Labeled Data"
    },
    {
        " as cat or no cat and using the results to identify cats in other images. They do this without any prior knowledge of cats, for example, that they have fur, tails, whiskers and cat-like faces. Instead, they automatically generate identifying characteristics from the examples that they process.     An ANN is based on a collection of connected units or nodes called ": null
    },
    {
        "artificial neuron": "Artificial Neuron"
    },
    {
        "s, which loosely model the ": null
    },
    {
        "neurons": "Neuron"
    },
    {
        "in a biological brain. Each connection, like the ": null
    },
    {
        "synapses": "Synapse"
    },
    {
        "in a biological brain, can transmit a signal to other neurons. An artificial neuron that receives a signal then processes it and can signal neurons connected to it.     In ANN implementations, the signal at a connection is a ": null
    },
    {
        "real number": "Real Number"
    },
    {
        ", and the output of each neuron is computed by some non-linear function of the sum of its inputs. The connections are called edges. Neurons and edges typically have a  weight  that adjusts as learning proceeds. The weight increases or decreases the strength of the signal at a connection. Neurons may have a threshold such that a signal is sent only if the aggregate signal crosses that threshold. Typically, neurons are aggregated into layers. Different layers may perform different transformations on their inputs. Signals travel from the first layer , to the last layer , possibly after traversing the layers multiple times.     The original goal of the ANN approach was to solve problems in the same way that a ": null
    },
    {
        "human brain": "Human Brain"
    },
    {
        " would. However, over time, attention moved to performing specific tasks, leading to deviations from ": null
    },
    {
        "biology": "Biology"
    },
    {
        ". ANNs have been used on a variety of tasks, including ": null
    },
    {
        "computer vision": "Computer Vision"
    },
    {
        ", ": null
    },
    {
        "speech recognition": "Speech Recognition"
    },
    {
        ", ": null
    },
    {
        "machine translation": "Machine Translation"
    },
    {
        ", ": null
    },
    {
        "social network": "Social Network"
    },
    {
        " filtering, ": null
    },
    {
        "playing board and video games": "General Game Playing"
    },
    {
        ", ": null
    },
    {
        "medical diagnosis": "Medical Diagnosis"
    },
    {
        " and even in activities that have traditionally been considered as reserved to humans, like painting.              ": null
    },
    {
        "Warren McCulloch": "Warren Mcculloch"
    },
    {
        " and ": null
    },
    {
        "Walter Pitts": "Walter Pitts"
    },
    {
        "  opened the subject by creating a computational model for neural networks.  In the late 1940s, ": null
    },
    {
        "D. O. Hebb": "Donald O. Hebb"
    },
    {
        "  created a learning hypothesis based on the mechanism of ": null
    },
    {
        "neural plasticity": "Neuroplasticity"
    },
    {
        " that became known as ": null
    },
    {
        "Hebbian learning": "Hebbian Learning"
    },
    {
        ". Farley and ": null
    },
    {
        "Wesley A. Clark": "Wesley A. Clark"
    },
    {
        "  first used computational machines, then called calculators , to simulate a Hebbian network. ": null
    },
    {
        "Rosenblatt": "Frank Rosenblatt"
    },
    {
        "  created the ": null
    },
    {
        "perceptron": "Perceptron"
    },
    {
        ".  The first functional networks with many layers were published by ": null
    },
    {
        "Ivakhnenko": "Alexey Grigorevich Ivakhnenko"
    },
    {
        " and Lapa in 1965, as the ": null
    },
    {
        "Group Method of Data Handling": "Group Method Of Data Handling"
    },
    {
        ".    The basics of continuous backpropagation    ": null
    },
    {
        "control theory": "Control Theory"
    },
    {
        " by ": null
    },
    {
        "Kelley": "Henry J. Kelley"
    },
    {
        "  in 1960 and by ": null
    },
    {
        "Bryson": "Arthur E. Bryson"
    },
    {
        " in 1961,  using principles of ": null
    },
    {
        "dynamic programming": "Dynamic Programming"
    },
    {
        ".     In 1970, ": null
    },
    {
        "Seppo Linnainmaa": "Seppo Linnainmaa"
    },
    {
        " published the general method for ": null
    },
    {
        "automatic differentiation": "Automatic Differentiation"
    },
    {
        " of discrete connected networks of nested ": null
    },
    {
        "differentiable": "Differentiable Function"
    },
    {
        " functions.   In 1973, Dreyfus used backpropagation to adapt ": null
    },
    {
        "parameters": "Parameter"
    },
    {
        "of controllers in proportion to error gradients.  ": null
    },
    {
        "Werboss": "Paul Werbos"
    },
    {
        " backpropagation": "Backpropagation"
    },
    {
        " algorithm enabled practical training of multi-layer networks. In 1982, he applied Linnainmaas AD method to neural networks in the way that became widely used.  Thereafter research stagnated following ": null
    },
    {
        "Minsky": "Marvin Minsky"
    },
    {
        " and ": null
    },
    {
        "Papert": "Seymour Papert"
    },
    {
        " ,  who discovered that basic perceptrons were incapable of processing the exclusive-or circuit and that computers lacked sufficient power to process useful neural networks. In 1992, ": null
    },
    {
        "max-pooling": "Convolutional Neural Networkpooling Layer"
    },
    {
        " was introduced to help with least shift invariance and tolerance to deformation to aid in ": null
    },
    {
        "3D object recognition": "3D Object Recognition"
    },
    {
        ". J. Weng, N. Ahuja and T. S. Huang, , Proc. International Joint Conference on Neural Networks, Baltimore, Maryland, vol I, pp. 576–581, June, 1992. J. Weng, N. Ahuja and T. S. Huang, , Proc. 4th International Conf. Computer Vision, Berlin, Germany, pp. 121–128, May, 1993. J. Weng, N. Ahuja and T. S. Huang, , International Journal of Computer Vision, vol. 25, no. 2, pp. 105–139, Nov. 1997. ": null
    },
    {
        "Schmidhuber": "Jürgen Schmidhuber"
    },
    {
        " adopted a multi-level hierarchy of networks pre-trained one level at a time by ": null
    },
    {
        "unsupervised learning": "Unsupervised Learning"
    },
    {
        " and fine-tuned by ": null
    },
    {
        "backpropagation": "Backpropagation"
    },
    {
        ". J. Schmidhuber., Learning complex, extended sequences using the principle of history compression, Neural Computation, 4, pp. 234–242, 1992.     ": null
    },
    {
        "Geoffrey Hinton": "Geoffrey Hinton"
    },
    {
        " et al. proposed learning a high-level representation using successive layers of binary or real-valued ": null
    },
    {
        "latent variables": "Latent Variable"
    },
    {
        "with a ": null
    },
    {
        "restricted Boltzmann machine": "Restricted Boltzmann Machine"
    },
    {
        "  to model each layer. In 2012, ": null
    },
    {
        "Ng": "Andrew Ng"
    },
    {
        " and ": null
    },
    {
        "Dean": "Jeff Dean"
    },
    {
        " created a network that learned to recognize higher-level concepts, such as cats, only from watching unlabeled images.  Unsupervised pre-training and increased computing power from ": null
    },
    {
        "GPUs": "Gpu"
    },
    {
        "and ": null
    },
    {
        "distributed computing": "Distributed Computing"
    },
    {
        " allowed the use of larger networks, particularly in image and visual recognition problems, which became known as ": null
    },
    {
        "deep learning": "Deep Learning"
    },
    {
        " .     Ciresan and colleagues  showed that despite the vanishing gradient problem, GPUs make backpropagation feasible for many-layered feedforward neural networks. Dominik Scherer, Andreas C. Müller, and Sven Behnke: , In 20th International Conference Artificial Neural Networks , pp. 92–101, 2010. . Between 2009 and 2012, ANNs began winning prizes in ANN contests, approaching human level performance on various tasks, initially in ": null
    },
    {
        "pattern recognition": "Pattern Recognition"
    },
    {
        " and ": null
    },
    {
        "machine learning": "Machine Learning"
    },
    {
        ".   with ": null
    },
    {
        "Jürgen Schmidhuber": "Jürgen Schmidhuber"
    },
    {
        " on the eight competitions won by his Deep Learning team 2009–2012  For example, the bi-directional and multi-dimensional ": null
    },
    {
        "long short-term memory": "Long Short-Term Memory"
    },
    {
        " Graves, Alex; and Schmidhuber, Jürgen; http://www.idsia.ch/~juergen/nips2009.pdf Offline Handwriting Recognition with Multidimensional Recurrent Neural Networks, in Bengio, Yoshua; Schuurmans, Dale; Lafferty, John; Williams, Chris K. I.; and Culotta, Aron , Advances in Neural Information Processing Systems 22 , 7–10 December 2009, Vancouver, BC, Neural Information Processing Systems Foundation, 2009, pp. 545–552.     of ": null
    },
    {
        "Graves": "Alex Graves"
    },
    {
        " et al. won three competitions in connected handwriting recognition in 2009 without any prior knowledge about the three languages to be learned.      Ciresan and colleagues built the first pattern recognizers to achieve human-competitive/superhuman performance  on benchmarks such as traffic sign recognition .          ANNs began as an attempt to exploit the architecture of the human brain to perform tasks that conventional algorithms had little success with. They soon reoriented towards improving empirical results, mostly abandoning attempts to remain true to their biological precursors. Neurons are connected to each other in various patterns, to allow the output of some neurons to become the input of others. The network forms a ": null
    },
    {
        "directed": "Directed Graph"
    },
    {
        ", ": null
    },
    {
        "weighted graph": "Weighted Graph"
    },
    {
        ".            ANNs retained the biological concept of ": null
    },
    {
        "artificial neurons": "Artificial Neurons"
    },
    {
        ", which receive input, combine the input with their internal state  and an optional threshold using an activation function, and produce output using an output function. The initial inputs are external data, such as images and documents. The ultimate outputs accomplish the task, such as recognizing an object in an image. The important characteristic of the activation function is that it provides a smooth transition as input values change, i.e. a small change in input produces a small change in output.        The network consists of connections, each connection providing the output of one neuron as an input to another neuron. Each connection is assigned a weight that represents its relative importance. A given neuron can have multiple input and output connections.        The propagation function computes the input to a neuron from the outputs of its predecessor neurons and their connections as a weighted sum. A bias term can be added to the result of the propagation.        The neurons are typically organized into multiple layers, especially in ": null
    },
    {
        "deep learning": "Deep Learning"
    },
    {
        ". Neurons of one layer connect only to neurons of the immediately preceding and immediately following layers. The layer that receives external data is the input layer. The layer that produces the ultimate result is the output layer. In between them are zero or more hidden layers. Single layer and unlayered networks are also used. Between two layers, multiple connection patterns are possible. They can be fully connected, with every neuron in one layer connecting to every neuron in the next layer. They can be pooling, where a group of neurons in one layer connect to a single neuron in the next layer, thereby reducing the number of neurons in that layer.  Neurons with only such connections form a ": null
    },
    {
        "directed acyclic graph": "Directed Acyclic Graph"
    },
    {
        " and are known as ": null
    },
    {
        "feedforward networks": "Feedforward Neural Network"
    },
    {
        ".  Alternatively, networks that allow connections between neurons in the same or previous layers are known as ": null
    },
    {
        "recurrent networks": "Recurrent Neural Network"
    },
    {
        ".           A hyperparameter is a ": null
    },
    {
        "parameter": "Parameter"
    },
    {
        " whose value is set before the learning process begins. The values of parameters are derived via learning. Examples of hyperparameters include ": null
    },
    {
        "learning rate": "Learning Rate"
    },
    {
        ", the number of hidden layers and batch size.  The values of some hyperparameters can be dependent on those of other hyperparameters. For example, the size of some layers can depend on the overall number of layers.            Learning is the adaptation of the network to better handle a task by considering sample observations. Learning involves adjusting the weights of the network to improve the accuracy of the result. This is done by minimizing the observed errors. Learning is complete when examining additional observations does not usefully reduce the error rate. Even after learning, the error rate typically does not reach 0. If after learning, the error rates too high, the network typically must be redesigned. Practically this is done by defining a ": null
    },
    {
        "cost function": "Loss Function"
    },
    {
        " that is evaluated periodically during learning. As long as its output continues to decline, learning continues. The cost is frequently defined as a ": null
    },
    {
        "statistic": "Statistic"
    },
    {
        " whose value can only be approximated. The outputs are actually numbers, so when the error is low, the difference between the output and the correct answer is small. Learning attempts to reduce the total of the differences across the observations. Most learning models can be viewed as a straightforward application of ": null
    },
    {
        "optimization": "Mathematical Optimization"
    },
    {
        " theory and ": null
    },
    {
        "statistical estimation": "Statistical Estimation"
    },
    {
        ".       The learning rate defines the size of the corrective steps that the model takes to adjust for errors in each observation. A high learning rate shortens the training time, but with lower ultimate accuracy, while a lower learning rate takes longer, but with the potential for greater accuracy. Optimizations such as ": null
    },
    {
        "Quickprop": "Quickprop"
    },
    {
        " are primarily aimed at speeding up error minimization, while other improvements mainly try to increase reliability. In order to avoid oscillation inside the network such as alternating connection weights, and to improve the rate of convergence, refinements use an ": null
    },
    {
        "adaptive learning rate": "Adaptive Learning Rate"
    },
    {
        " that increases or decreases as appropriate.  The concept of momentum allows the balance between the gradient and the previous change to be weighted such that the weight adjustment depends to some degree on the previous change. A momentum close to 0 emphasizes the gradient, while a value close to 1 emphasizes the last change.       While it is possible to define a cost function ": null
    },
    {
        "ad hoc": "Ad Hoc"
    },
    {
        ", frequently the choice is determined by the functions desirable properties  or because it arises from the model .          Backpropagation is a method to adjust the connection weights to compensate for each error found during learning. The error amount is effectively divided among the connections. Technically, backprop calculates the ": null
    },
    {
        "gradient": "Gradient"
    },
    {
        " of the ": null
    },
    {
        "cost function": "Loss Function"
    },
    {
        " associated with a given state with respect to the weights. The weight updates can be done via ": null
    },
    {
        "stochastic gradient descent": "Stochastic Gradient Descent"
    },
    {
        " or other methods, such as ": null
    },
    {
        "Extreme Learning Machines": "Extreme Learning Machines"
    },
    {
        ",  No-prop networks,  training without backtracking,  weightless networks, ESANN. 2009  and ": null
    },
    {
        "non-connectionist neural networks": "Holographic Associative Memory"
    },
    {
        ".          The three major learning paradigms are ": null
    },
    {
        "supervised learning": "Supervised Learning"
    },
    {
        ", ": null
    },
    {
        "unsupervised learning": "Unsupervised Learning"
    },
    {
        " and ": null
    },
    {
        "reinforcement learning": "Reinforcement Learning"
    },
    {
        ". They each correspond to a particular learning task       ": null
    },
    {
        "Supervised learning": "Supervised Learning"
    },
    {
        " uses a set of paired inputs and desired outputs. The learning task is to produce the desired output for each input. In this case the cost function is related to eliminating incorrect deductions.  A commonly used cost is the ": null
    },
    {
        "mean-squared error": "Mean-Squared Error"
    },
    {
        ", which tries to minimize the average squared error between the networks output and the desired output. Tasks suited for supervised learning are ": null
    },
    {
        "pattern recognition": "Pattern Recognition"
    },
    {
        " and ": null
    },
    {
        "regression": "Regression Analysis"
    },
    {
        " . Supervised learning is also applicable to sequential data . This can be thought of as learning with a teacher , in the form of a function that provides continuous feedback on the quality of solutions obtained thus far.       In ": null
    },
    {
        "unsupervised learning": "Unsupervised Learning"
    },
    {
        ", input data is given along with the cost function, some function of the data   x and the networks output. The cost function is dependent on the task and any  a priori  assumptions . As a trivial example, consider the model   f a where   a is a constant and the cost   CE . Minimizing this cost produces a value of   a that is equal to the mean of the data. The cost function can be much more complicated. Its form depends on the application: for example, in ": null
    },
    {
        "compression": "Data Compression"
    },
    {
        " it could be related to the ": null
    },
    {
        "mutual information": "Mutual Information"
    },
    {
        " between   x and   f , whereas in statistical modeling, it could be related to the ": null
    },
    {
        "posterior probability": "Posterior Probability"
    },
    {
        " of the model given the data . Tasks that fall within the paradigm of unsupervised learning are in general ": null
    },
    {
        "estimation": "Approximation"
    },
    {
        " problems; the applications include ": null
    },
    {
        "clustering": "Data Clustering"
    },
    {
        ", the estimation of ": null
    },
    {
        "statistical distributions": "Statistical Distributions"
    },
    {
        ", ": null
    },
    {
        "compression": "Data Compression"
    },
    {
        " and ": null
    },
    {
        "filtering": "Bayesian Spam Filtering"
    },
    {
        ".               In applications such as playing video games, an actor takes a string of actions, receiving a generally unpredictable response from the environment after each one. The goal is to win the game, i.e., generate the most positive responses. In ": null
    },
    {
        "reinforcement learning": "Reinforcement Learning"
    },
    {
        ", the aim is to weight the network to perform actions that minimize long-term cost. at each point in time the agent performs an action and the environment generates an observation and an instantaneous cost, according to some rules. The rules and the long-term cost usually only can be estimated. At any juncture, the agent decides whether to explore new actions to uncover their costs or to exploit prior learning to proceed more quickly.     Formally the environment is modeled as a ": null
    },
    {
        "Markov decision process": "Markov Decision Process"
    },
    {
        " with states     S and actions     A . Because the state transitions are not known, probability distributions are used instead: the instantaneous cost distribution   P , the observation distribution   P and the transition distribution   P , while a policy is defined as the conditional distribution over actions given the observations. Taken together, the two define a ": null
    },
    {
        "Markov chain": "Markov Chain"
    },
    {
        " . The aim is to discover the lowest-cost MC.       ANNs serve as the learning component in such applications.   ": null
    },
    {
        "Dynamic programming": "Dynamic Programming"
    },
    {
        " coupled with ANNs  has been applied to problems such as those involved in ": null
    },
    {
        "vehicle routing": "Vehicle Routing"
    },
    {
        ",  video games, ": null
    },
    {
        "natural resource management": "Natural Resource Management"
    },
    {
        "   and ": null
    },
    {
        "medicine": "Medicine"
    },
    {
        "  because of ANNs ability to mitigate losses of accuracy even when reducing the discretization grid density for numerically approximating the solution of control problems. Tasks that fall within the paradigm of reinforcement learning are control problems, ": null
    },
    {
        "games": "Game"
    },
    {
        "and other sequential decision making tasks.         Self learning in neural networks was introduced in 1982 along with a neural network capable of self-learning named Crossbar Adaptive Array . Bozinovski, S. . A self learning system using secondary reinforcement . In R. Trappl Cybernetics and Systems Research: Proceedings of the Sixth European Meeting on Cybernetics and Systems Research. North Holland. pp. 397–402. . It is a system with only one input, situation s, and only one output, action a. It has neither external advice input nor external reinforcement input from the environment. The CAA computes, in a crossbar fashion, both decisions about actions and emotions about encountered situations. The system is driven by the interaction between cognition and emotion. Bozinovski, S. Modeling mechanisms of cognition-emotion interaction in artificial neural networks, since 1981. Procedia Computer Science p. 255-263 Given memory matrix W ||w||, the crossbar self learning algorithm in each iteration performs the following computation:   In situation s perform action a;   Receive consequence situation s’;   Compute emotion of being in consequence situation v;   Update crossbar memory w’ w + v.     The backpropagated value is the emotion toward the consequence situation. The CAA exists in two environments, one is behavioral environment where it behaves, and the other is genetic environment, where from it initially and only once receives initial emotions about to be encountered situations in the behavioral environment. Having received the genome vector from the genetic environment, the CAA will learn a goal-seeking behavior, in the behavioral environment that contains both desirable and undesirable situations. Bozinovski, Stevo and Bozinovska, Liljana. Self-learning agents: A connectionist theory of emotion based on crossbar value judgment. Cybernetics and Systems 32 637-667.       In a ": null
    },
    {
        "Bayesian": "Bayesian Probability"
    },
    {
        " framework, a distribution over the set of allowed models is chosen to minimize the cost. ": null
    },
    {
        "Evolutionary methods": "Evolutionary Methods"
    },
    {
        ",  ": null
    },
    {
        "gene expression programming": "Gene Expression Programming"
    },
    {
        ",  ": null
    },
    {
        "simulated annealing": "Simulated Annealing"
    },
    {
        ",  ": null
    },
    {
        "expectation-maximization": "Expectation-Maximization"
    },
    {
        ", ": null
    },
    {
        "non-parametric methods": "Non-Parametric Methods"
    },
    {
        " and ": null
    },
    {
        "particle swarm optimization": "Particle Swarm Optimization"
    },
    {
        "  are other learning algorithms. Convergent recursion is a learning algorithm for ": null
    },
    {
        "cerebellar model articulation controller": "Cerebellar Model Articulation Controller"
    },
    {
        " neural networks. Ting Qin, et al. . Neural Processing Letters 19.1 : 49–61. Ting Qin, et al. . Neural Processing Letters 22.1 : 1–16.          Two modes of learning are available: ": null
    },
    {
        "stochastic": "Stochastic Gradient Descent"
    },
    {
        " and batch. In stochastic learning, each input creates a weight adjustment. In batch learning weights are adjusted based on a batch of inputs, accumulating errors over the batch. Stochastic learning introduces noise into the process, using the local gradient calculated from one data point; this reduces the chance of the network getting stuck in local minima. However, batch learning typically yields a faster, more stable descent to a local minimum, since each update is performed in the direction of the batchs average error. A common compromise is to use mini-batches , small batches with samples in each batch selected stochastically from the entire data set.               ANNs have evolved into a broad family of techniques that have advanced the state of the art across multiple domains. The simplest types have one or more static components, including number of units, number of layers, unit weights and ": null
    },
    {
        "topology": "Topology"
    },
    {
        ". Dynamic types allow one or more of these to evolve via learning. The latter are much more complicated, but can shorten learning periods and produce better results. Some types allow/require learning to be supervised by the operator, while others operate independently. Some types operate purely in hardware, while others are purely software and run on general purpose computers.     Some of the main breakthroughs include: ": null
    },
    {
        "convolutional neural networks": "Convolutional Neural Network"
    },
    {
        "that have proven particularly successful in processing visual and other two-dimensional data; LeCun et al., Backpropagation Applied to Handwritten Zip Code Recognition, Neural Computation, 1, pp. 541–551, 1989. ": null
    },
    {
        "Yann LeCun": "Yann Lecun"
    },
    {
        " . Slides on Deep Learning  long short-term memory avoid the ": null
    },
    {
        "vanishing gradient problem": "Vanishing Gradient Problem"
    },
    {
        "  and can handle signals that have a mix of low and high frequency components aiding large-vocabulary speech recognition,   text-to-speech synthesis,   and photo-real talking heads;  competitive networks such as ": null
    },
    {
        "generative adversarial networks": "Generative Adversarial Network"
    },
    {
        " in": "Reinforcement Learning"
    },
    {
        " which multiple networks compete with each other, on tasks such as winning a game  or on deceiving the opponent about the authenticity of an input.           Neural architecture search uses machine learning to automate ANN design. Various approaches to NAS have designed networks that compare well with hand-designed systems. The basic search algorithm is to propose a candidate model, evaluate it against a dataset and use the results as feedback to teach the NAS network.  Available systems include ": null
    },
    {
        "AutoML": "Automated Machine Learning"
    },
    {
        " and AutoKeras.      Design issues include deciding the number, type and connectedness of network layers, as well as the size of each and the connection type .     ": null
    },
    {
        "Hyperparameters": "Hyperparameter"
    },
    {
        "must also be defined as part of the design , governing matters such as how many neurons are in each layer, learning rate, step, stride, depth, receptive field and padding , etc.           Using Artificial neural networks requires an understanding of their characteristics.   Choice of model: This depends on the data representation and the application. Overly complex models slow learning.   Learning algorithm: Numerous trade-offs exist between learning algorithms. Almost any algorithm will work well with the correct ": null
    },
    {
        "hyperparameters": "Hyperparameter"
    },
    {
        "for training on a particular data set. However, selecting and tuning an algorithm for training on unseen data requires significant experimentation.   Robustness: If the model, cost function and learning algorithm are selected appropriately, the resulting ANN can become robust.   ANN capabilities fall within the following broad categories: ": null
    },
    {
        "Function approximation": "Function Approximation"
    },
    {
        ", or ": null
    },
    {
        "regression analysis": "Regression Analysis"
    },
    {
        ", including ": null
    },
    {
        "time series prediction": "Time Seriesprediction And Forecasting"
    },
    {
        ", ": null
    },
    {
        "fitness approximation": "Fitness Approximation"
    },
    {
        " and modeling.   ": null
    },
    {
        "Classification": "Statistical Classification"
    },
    {
        ", including ": null
    },
    {
        "pattern": "Pattern Recognition"
    },
    {
        " and sequence recognition, ": null
    },
    {
        "novelty detection": "Novelty Detection"
    },
    {
        " and sequential decision making.   ": null
    },
    {
        "Data processing": "Data Processing"
    },
    {
        ", including filtering, clustering, ": null
    },
    {
        "blind source separation": "Blind Source Separation"
    },
    {
        " and compression.   ": null
    },
    {
        "Robotics": "Robotics"
    },
    {
        ", including directing manipulators and ": null
    },
    {
        "prostheses": "Prosthesis"
    },
    {
        ".   ": null
    },
    {
        "Control": "Control Engineering"
    },
    {
        ", including ": null
    },
    {
        "computer numerical control": "Computer Numerical Control"
    },
    {
        ".       Because of their ability to reproduce and model nonlinear processes, Artificial neural networks have found applications in many disciplines. Application areas include ": null
    },
    {
        "system identification": "System Identification"
    },
    {
        " and control , ": null
    },
    {
        "quantum chemistry": "Quantum Chemistry"
    },
    {
        ",  ": null
    },
    {
        "general game playing": "General Game Playing"
    },
    {
        ", Silver, David, et al. . Nature 529.7587 : 484. ": null
    },
    {
        "pattern recognition": "Pattern Recognition"
    },
    {
        " , sequence recognition , ": null
    },
    {
        "medical diagnosis": "Medical Diagnosis"
    },
    {
        ", finance  , ": null
    },
    {
        "data mining": "Data Mining"
    },
    {
        ", visualization, ": null
    },
    {
        "machine translation": "Machine Translation"
    },
    {
        ", social network filtering  and ": null
    },
    {
        "e-mail spam": "E-Mail Spam"
    },
    {
        " filtering. ANNs have been used to diagnose cancers, including ": null
    },
    {
        "lung cancer": "Lung Cancer"
    },
    {
        ",  ": null
    },
    {
        "prostate cancer": "Prostate Cancer"
    },
    {
        ", ": null
    },
    {
        "colorectal cancer": "Colorectal Cancer"
    },
    {
        "  and to distinguish highly invasive cancer cell lines from less invasive lines using only cell shape information.       ANNs have been used to accelerate reliability analysis of infrastructures subject to natural disasters   and to predict foundation settlements.  ANNs have also been used for building black-box models in ": null
    },
    {
        "geoscience": "Geoscience"
    },
    {
        "hydrology": "Hydrology"
    },
    {
        ",   ocean modelling and ": null
    },
    {
        "coastal engineering": "Coastal Engineering"
    },
    {
        ",   and ": null
    },
    {
        "geomorphology": "Geomorphology"
    },
    {
        ".  ANNs have been employed in ": null
    },
    {
        "cybersecurity": "Computer Security"
    },
    {
        ", with the objective to discriminate between legitimate activities and malicious ones. For example, machine learning has been used for classifying Android malware,  for identifying domains belonging to threat actors  and for detecting URLs posing a security risk.  Research is underway on ANN systems designed for penetration testing,  for detecting botnets,  credit cards frauds  and network intrusions.     ANNs have been proposed as a tool to simulate the properties of many-body ": null
    },
    {
        "open quantum system": "Open Quantum System"
    },
    {
        "s.     In brain research ANNs have studied short-term behavior of ": null
    },
    {
        "individual neurons": "Biological Neuron Models"
    },
    {
        ",  /ref  ref  /ref  ref  /ref  math /math section end theory /  ref name Qin1 / ref  /ref  ref  /ref  ref  /ref ref  /ref  ref name VanEssen1991  /ref ref name Weng2012  /ref ref name :0  /ref  ref  /ref  ref  /ref  ref  /ref ref  /ref ref /ref ref ": null
    }
]