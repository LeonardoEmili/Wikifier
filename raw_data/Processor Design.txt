Processor design is the  |design_engineer|Design_Engineer| ing task of creating a  |processor|Processor| , a key component of  |computer_hardware|Computer_Hardware| . It is a subfield of  |computer_engineering|Computer_Engineering|  and  |electronics_engineering|Electronics_Engineering|  . The design process involves choosing an  |instruction_set|Instruction_Set|  and a certain execution paradigm  and results in a  |microarchitecture|Microarchitecture| , which might be described in e.g.  |VHDL|Vhdl|  or  |Verilog|Verilog| . For  |microprocessor|Microprocessor|  design, this description is then manufactured employing some of the various  |semiconductor_device_fabrication|Semiconductor_Device_Fabrication|  processes, resulting in a  |die|Die|  which is bonded onto a  |chip_carrier|Chip_Carrier| . This chip carrier is then soldered onto, or inserted into a  |socket|Cpu_Socket|  on, a  |printed_circuit_board|Printed_Circuit_Board|  .     The mode of operation of any processor is the execution of lists of instructions. Instructions typically include those to compute or manipulate data values using  |registers|Processor_Register| , change or retrieve values in read/write memory, perform relational tests between data values and to control program flow.              CPU design is divided into design of the following components:      |datapaths|Datapath| |control_unit|Control_Unit| |Memory|Memory|  components such as  |register_files|Register_File| ,  |caches|Cache_Memory| |Clock|Clock_Signal|  circuitry such as clock drivers,  |PLLs|Phase-Locked_Loop| ,  |clock_distribution_networks|Clock_Distribution_Network|    Pad transceiver circuitry    |Logic_gate|Logic_Gate|  cell  |library|Library|  which is used to implement the logic     CPUs designed for high-performance markets might require custom designs for each of these items to achieve frequency,  |power-dissipation|Power_Consumption| , and chip-area goals whereas CPUs designed for lower performance markets might lessen the implementation burden by acquiring some of these items by purchasing them as  |intellectual_property|Intellectual_Property| . Control logic implementation techniques  can be used to implement datapaths, register files, and clocks. Common logic styles used in CPU design include unstructured random logic,  |finite-state_machines|Finite-State_Machine| ,  |microprogramming|Microprogramming|  , and  |Programmable_logic_arrays|Programmable_Logic_Array|  .       Device types used to implement the logic include:    |Transistor-transistor_logic|Transistor-Transistor_Logic| |Small_Scale_Integration|Small_Scale_Integration|  logic chips - no longer used for CPUs    |Programmable_Array_Logic|Programmable_Array_Logic|  and  |Programmable_logic_devices|Programmable_Logic_Device|  - no longer used for CPUs    |Emitter-coupled_logic|Emitter-Coupled_Logic| |gate_arrays|Gate_Array|  - no longer common      |CMOS|Cmos| |gate_arrays|Gate_Array|  - no longer used for CPUs      |CMOS|Cmos| |mass-produced_ICs|Integrated_Circuit|  - the vast majority of CPUs by volume    |CMOS|Cmos| |ASICs|Application-Specific_Integrated_Circuit|  - only for a minority of special applications due to expense    |Field-programmable_gate_arrays|Field-Programmable_Gate_Array|  - common for  |soft_microprocessors|Soft_Microprocessor| , and more or less required for  |reconfigurable_computing|Reconfigurable_Computing|      A CPU design project generally has these major tasks:   Programmer-visible  |instruction_set_architecture|Instruction_Set_Architecture| , which can be implemented by a variety of  |microarchitectures|Microarchitecture|    Architectural study and performance modeling in  |ANSI_C|Ansi_C| / |C++|C++|  or  |SystemC|Systemc| |High-level_synthesis|High-Level_Synthesis|  or  |register_transfer_level|Register_Transfer_Level|  implementation    |RTL|Register_Transfer_Language|  verification    |Circuit_design|Circuit_Design|  of speed critical components    |Logic_synthesis|Logic_Synthesis|  or logic-gate-level design    |Timing_analysis|Static_Timing_Analysis|  to confirm that all logic and circuits will run at the specified operating frequency   Physical design including  |floorplanning|Floorplan_Floorplanning| ,  |place_and_route|Place_And_Route|  of logic gates   Checking that RTL, gate-level, transistor-level and physical-level representations are equivalent   Checks for  |signal_integrity|Signal_Integrity| ,  |chip_manufacturability|Design_Rule_Checking|      Re-designing a CPU core to a smaller die-area helps to shrink everything , resulting in the same number of transistors on a smaller die. It improves performance , reduces power  and reduces cost . Releasing a CPU on the same size die, but with a smaller CPU core, keeps the cost about the same but allows higher levels of integration within one  |very-large-scale_integration|Very-Large-Scale_Integration|  chip , improving performance and reducing overall system cost.     As with most complex electronic designs, the  |logic_verification|Functional_Verification|  effort now dominates the project schedule of a CPU.     Key CPU architectural innovations include  |index_register|Index_Register| ,  |cache|Cpu_Cache| ,  |virtual_memory|Virtual_Memory| ,  |instruction_pipelining|Instruction_Pipelining| ,  |superscalar|Superscalar| ,  |CISC|Complex_Instruction_Set_Computer| ,  |RISC|Reduced_Instruction_Set_Computer| ,  |virtual_machine|Virtual_Machine| ,  |emulators|Emulator| ,  |microprogram|Microprogram| , and  |stack|Stack| .                      A variety of  |new_CPU_design_ideas|History_Of_General-Purpose_Cpus1990_To_Today:_Looking_Forward|  have been proposed,   including  |reconfigurable_logic|Reconfigurable_Logic| ,  |clockless_CPUs|Clockless_Cpu| ,  |computational_RAM|Computational_Ram| , and  |optical_computing|Optical_Computing| .           |Benchmarking|Benchmark|  is a way of testing CPU speed. Examples include SPECint and  |SPECfp|Specfp| , developed by  |Standard_Performance_Evaluation_Corporation|Standard_Performance_Evaluation_Corporation| , and  |ConsumerMark|Consumermark|  developed by the Embedded Microprocessor Benchmark Consortium  |EEMBC|Eembc| .     Some of the commonly used metrics include:    |Instructions_per_second|Instructions_Per_Second|  - Most consumers pick a computer architecture  to be able to run a large base of pre-existing pre-compiled software. Being relatively uninformed on computer benchmarks, some of them pick a particular CPU based on operating frequency .    |FLOPS|Flops|  - The number of floating point operations per second is often important in selecting computers for scientific computations.    |Performance_per_watt|Performance_Per_Watt|  - System designers building  |parallel_computers|Parallel_Computing| , such as  |Google|Google_Search_Technologycurrent_Hardware| , pick CPUs based on their speed per watt of power, because the cost of powering the CPU outweighs the cost of the CPU itself.     Some system designers building parallel computers pick CPUs based on the speed per dollar.   System designers building  |real-time_computing|Real-Time_Computing|  systems want to guarantee worst-case response. That is easier to do when the CPU has low  |interrupt_latency|Interrupt_Latency|  and when it has deterministic response.    Computer programmers who program directly in assembly language want a CPU to support a full featured  |instruction_set|Instruction_Set| .   Low power - For systems with limited power sources .   Small size or low weight - for portable embedded systems, systems for spacecraft.   Environmental impact - Minimizing environmental impact of computers during manufacturing and recycling as well during use. Reducing waste, reducing hazardous materials. .     There may be tradeoffs in optimizing some of these metrics. In particular, many design techniques that make a CPU run faster make the performance per watt , performance per dollar , and deterministic response much worse, and vice versa.       There are several different markets in which CPUs are used. Since each of these markets differ in their requirements for CPUs, the devices designed for one market are in most cases inappropriate for the other markets.       The vast majority of revenues generated from CPU sales is for general purpose computing, that is, desktop, laptop, and server computers commonly used in businesses and homes. In this market, the Intel  |IA-32|Ia-32|  and the 64-bit version  |x86-64|X86-64|  architecture dominate the market, with its rivals  |PowerPC|Powerpc|  and  |SPARC|Sparc|  maintaining much smaller customer bases. Yearly, hundreds of millions of IA-32 architecture CPUs are used by this market. A growing percentage of these processors are for mobile implementations such as netbooks and laptops. Kerr, Justin.  Maximum PC. Published 2010-10-26.     Since these devices are used to run countless different types of programs, these CPU designs are not specifically targeted at one type of application or one function. The demands of being able to run a wide range of programs efficiently has made these CPU designs among the more advanced technically, along with some disadvantages of being relatively costly, and having high power consumption.       In 1984, most high-performance CPUs required four to five years to develop.   New system manages hundreds of transactions per second article   by Robert Horst and Sandra Metz, of Tandem Computers Inc.,   Electronics magazine, 1984 April 19:   While most high-performance CPUs require four to five years to develop,   The  |NonStop|Nonstop|  TXP processor took just 2+1/2 years --   six months to develop a complete written specification,   one year to construct a working prototype,   and another year to reach volume production.            Scientific computing is a much smaller niche market . It is used in government research labs and universities. Before 1990, CPU design was often done for this market, but mass market CPUs organized into large clusters have proven to be more affordable. The main remaining area of active hardware design and research for scientific computing is for high-speed data transmission systems to connect mass market CPUs.          As measured by units shipped, most CPUs are embedded in other machinery, such as telephones, clocks, appliances, vehicles, and infrastructure. Embedded processors sell in the volume of many billions of units per year, however, mostly at much lower price points than that of the general purpose processors.     These single-function devices differ from the more familiar general-purpose CPUs in several ways:   Low cost is of high importance.   It is important to maintain a low power dissipation as embedded devices often have a limited battery life and it is often impractical to include cooling fans. S. Mittal,  , IJCAET, 6, 440–459, 2014.   To give lower system cost, peripherals are integrated with the processor on the same silicon chip.   Keeping peripherals on-chip also reduces power consumption as external GPIO ports typically require buffering so that they can source or sink the relatively high current loads that are required to maintain a strong signal outside of the chip.   Many embedded applications have a limited amount of physical space for circuitry; keeping peripherals on-chip will reduce the space required for the circuit board.   The program and data memories are often integrated on the same chip. When the only allowed program memory is  |ROM|Read-Only_Memory| , the device is known as a  |microcontroller|Microcontroller| .   For many embedded applications, interrupt latency will be more critical than in some general-purpose processors.       The embedded CPU family with the largest number of total units shipped is the  |8051|8051| , averaging nearly a billion units per year.  The 8051 is widely used because it is very inexpensive. The design time is now roughly zero, because it is widely available as commercial intellectual property. It is now often embedded as a small part of a larger system on a chip. The silicon cost of an 8051 is now as low as US$0.001, because some implementations use as few as 2,200 logic gates and take 0.0127 square millimeters of silicon.    To figure dollars per square millimeter, see , and note that an SOC component has no pin or packaging costs.     As of 2009, more CPUs are produced using the  |ARM_architecture|Arm_Architecture|  instruction set than any other 32-bit instruction set.    by Mark Hachman, 2002.      by Jim Turley 2002.     The ARM architecture and the first ARM chip were designed in about one and a half years and 5 human years of work time.  1998     The 32-bit  |Parallax_Propeller|Parallax_Propeller|  microcontroller architecture and the first chip were designed by two people in about 10 human years of work time.  by  |Chip_Gracey|Chip_Gracey|      The 8-bit  |AVR_architecture|Atmel_Avr|  and first AVR microcontroller was conceived and designed by two students at the Norwegian Institute of Technology.     The 8-bit 6502 architecture and the first  |MOS_Technology_6502|Mos_Technology_6502|  chip were designed in 13 months by a group of about 9 people.          The 32 bit  |Berkeley_RISC|Berkeley_Risc|  I and RISC II architecture and the first chips were mostly designed by a series of students as part of a four quarter sequence of graduate courses.    This design became the basis of the commercial  |SPARC|Sparc|  processor design.     For about a decade, every student taking the 6.004 class at MIT was part of a team—each team had one semester to design and build a simple 8 bit CPU out of  |7400_series|7400_Series| |integrated_circuits|Integrated_Circuit| .   One team of 4 students designed and built a simple 32 bit CPU during that semester.        Some undergraduate courses require a team of 2 to 5 students to design, implement, and test a simple CPU in a FPGA in a single 15-week semester.      The MultiTitan CPU was designed with 2.5 man years of effort, which was considered relatively little design effort at the time.    24 people contributed to the 3.5 year MultiTitan research project, which included designing and building a prototype CPU.           For embedded systems, the highest performance levels are often not needed or desired due to the power consumption requirements. This allows for the use of processors which can be totally implemented by  |logic_synthesis|Logic_Synthesis|  techniques. These synthesized processors can be implemented in a much shorter amount of time, giving quicker  |time-to-market|Time-To-Market|.