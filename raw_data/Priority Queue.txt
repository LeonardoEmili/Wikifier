In  |computer_science|Computer_Science| , a priority queue is an  |abstract_data_type|Abstract_Data_Type|  which is like a regular  |queue|Queue|  or  |stack|Stack|  data structure, but where additionally each element has a priority associated with it. In a priority queue, an element with high priority is served before an element with low priority. In some implementations, if two elements have the same priority, they are served according to the order in which they were enqueued, while in other implementations, ordering of elements with the same priority is undefined.     While priority queues are often implemented with  |heaps|Heap| , they are conceptually distinct from heaps. A priority queue is a concept like a  |list|List|  or a  |map|Associativearray|  ; just as a list can be implemented with a  |linked_list|Linked_List|  or an  |array|Array_Data_Structure| , a priority queue can be implemented with a heap or a variety of other methods such as an unordered array.         A priority queue must at least support the following operations:     isemptyinsertwithpriority |element|Element|  to the  |queue|Queue|  with an associated priority.   pullhighestpriorityelementhighest priority, and return it.   : This is also known as popelement , getmaximumelement or getfrontelement .   : Some conventions reverse the order of priorities, considering lower values to be higher priority, so this may also be known as getminimumelement , and is often referred to as get-min in the literature.   : This may instead be specified as separate peekathighestpriorityelement and deleteelement functions, which can be combined to produce pullhighestpriorityelement .     In addition,  peek  , which returns the highest-priority element but does not modify the queue, is very frequently implemented, and nearly always executes in  |O|Big_O_Notation|  time. This operation and its O performance is crucial to many applications of priority queues.     More advanced implementations may support more complicated operations, such as pulllowestpriorityelement, inspecting the first few highest- or lowest-priority elements, clearing the queue, clearing subsets of the queue, performing a batch insert, merging two or more queues into one, incrementing priority of any element, etc.         One can imagine a priority queue as a modified  |queue|Queue| , but when one would get the next element off the queue, the highest-priority element is retrieved first.     Stacks and queues may be modeled as particular kinds of priority queues. As a reminder, here is how stacks and queues behave:     stack   elements are pulled in  |last-in_first-out|Lifo| -order   queue   elements are pulled in  |first-in_first-out|Fifo| -order     In a stack, the priority of each inserted element is monotonically increasing; thus, the last element inserted is always the first retrieved. In a queue, the priority of each inserted element is monotonically decreasing; thus, the first element inserted is always the first retrieved.             There are a variety of simple, usually inefficient, ways to implement a priority queue. They provide an analogy to help one understand what a priority queue is. For instance, one can keep all the elements in an unsorted list. Whenever the highest-priority element is requested, search through all elements for the one with the highest priority.          To improve performance, priority queues typically use a  |heap|Heap|  as their backbone, giving O performance for inserts and removals, and O to build initially. Variants of the basic heap data structure such as  |pairing_heaps|Pairing_Heap|  or  |Fibonacci_heaps|Fibonacci_Heap|  can provide better bounds for some operations.  Third edition, p. 518.     Alternatively, when a  |self-balancing_binary_search_tree|Self-Balancing_Binary_Search_Tree|  is used, insertion and removal also take O time, although building trees from existing sequences of elements takes O time; this is typical where one might already have access to these data structures, such as with third-party or standard libraries.     From a computational-complexity standpoint, priority queues are congruent to sorting algorithms. The section on  |the_equivalence_of_priority_queues_and_sorting_algorithms|Priority_Queueequivalenceofpriorityqueuesandsortingalgorithms| , below, describes how efficient sorting algorithms can create efficient priority queues.       There are several specialized  |heap|Heap| |data_structures|Data_Structures|  that either supply additional operations or outperform heap-based implementations for specific types of keys, specifically integer keys.     When the set of keys is , and only insert, find-min and extract-min are needed, a  |bucket_queue|Bucket_Queue|  can be constructed as an array of   |linked_lists|Linked_List|  plus a pointer , initially . Inserting an item with key  appends the item to the th, and updates , both in constant time. Extract-min deletes and returns one item from the list with index , then increments  if needed until it again points to a non-empty list; this takes  time in the worst case. These queues are useful for sorting the vertices of a graph by their degree.   Cgraph theorygraph theorylog log C2 m/2 1 3 |ta_type_operati|Ta_Type_Operati| 1in the case of min-heap |mputer_scien|Mputer_Scien|  nSS1and deleting elementsSn  log  log  n1log  log  n |stract_data_ty|Stract_Data_Ty| STL |ogrammi|Ogrammi| |ogrammi|Ogrammi| |ogrammi|Ogrammi| defaults to less if unspecifieddefaults to std::vector it strictly adheres to its abstract data type definition |+_librari|+_Librari| |ogramming_langua|Ogramming_Langua| |ogramming_langua|Ogramming_Langua| |mputi|Mputi| |mputi|Mputi| such as real-time traffic, e.g. an  |RTP|Real-Time_Transport_Protocol|  stream of a  |VoIP|Voice_Over_Internet_Protocol|  connectionMACsuch as  |VoIP|Voip|  or  |IPTV|Iptv| an amendment to  |IEEE_802.11|Ieee_802.11|  which provides  |quality_of_service|Quality_Of_Service| a standard for high-speed  |local_area_network|Local_Area_Network|  using existing home wiring .     Usually a limitation is set to limit the bandwidth that traffic from the highest priority queue can take, in order to prevent high priority packets from choking off all other traffic. This limit is usually never reached due to high level control instances such as the  |Cisco|Cisco_Systems,_Inc.| |Callmanager|Callmanager| , which can be programmed to inhibit calls which would exceed the programmed bandwidth limit.            Another use of a priority queue is to manage the events in a  |discrete_event_simulation|Discrete_Event_Simulation| . The events are added to the queue with their simulation time used as the priority. The execution of the simulation proceeds by repeatedly pulling the top of the queue and executing the event thereon.     See also |Scheduling|Scheduling| ,  |queueing_theory|Queueing_Theory|          When the graph is stored in the form of adjacency list or matrix, priority queue can be used to extract minimum efficiently when implementing  |Dijkstras_algorithm|Dijkstras_Algorithm| , although one also needs the ability to alter the priority of a particular vertex in the priority queue efficiently.          |Huffman_coding|Huffman_Coding|  requires one to repeatedly obtain the two lowest-frequency trees. A priority queue is  |one_method_of_doing_this|Huffman_Codingcompression| .          |Best-first_search|Best-First_Search|  algorithms, like the  |A_search_algorithm|A_Search_Algorithm| , find the shortest path between two  |vertices|Vertex|  or  |nodes|Node|  of a  |weighted_graph|Weighted_Graph| , trying out the most promising routes first. A priority queue  is used to keep track of unexplored routes; the one for which the estimate of the total path length is smallest is given highest priority. If memory limitations make best-first search impractical, variants like the  |SMA|Sma|  algorithm can be used instead, with a  |double-ended_priority_queue|Double-Ended_Priority_Queue|  to allow removal of low-priority items.         The Real-time Optimally Adapting Meshes  algorithm computes a dynamically changing triangulation of a terrain. It works by splitting triangles where more detail is needed and merging them where less detail is needed. The algorithm assigns each triangle in the terrain a priority, usually related to the error decrease if that triangle would be split. The algorithm uses two priority queues, one for triangles that can be split and another for triangles that can be merged. In each step the triangle from the split queue with the highest priority is split, or the triangle from the merge queue with the lowest priority is merged with its neighbours.       Using  |min_heap_priority_queue|Binary_Heap|  in  |Prims_algorithm|Prims_Algorithm|  to find the  |minimum_spanning_tree|Minimum_Spanning_Tree|  of a  |connected|Connected_Graph|  and  |undirected_graph|Undirected_Graph| , one can achieve a good running time. This min heap priority queue uses the min heap data structure which supports operations such as insert, minimum, extract-min, decrease-key.    In this implementation, the  |weight|Weighted_Graph|  of the edges is used to decide the priority of the  |vertices|Vertex| . Lower the weight, higher the priority and higher the weight, lower the priority.   