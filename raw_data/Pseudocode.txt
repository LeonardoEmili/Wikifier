Pseudocode is an informal  |high-level|High-Level_Programming|  description of the operating principle of a  |computer_program|Computer_Program|  or other  |algorithm|Algorithm| .     It uses the structural conventions of a normal  |programming_language|Programming_Language| , but is intended for human reading rather than machine reading. Pseudocode typically omits details that are essential for machine understanding of the algorithm, such as  |variable_declarations|Variable_Declaration| , system-specific code and some  |subroutines|Subroutine| . The programming language is  |augment|Augmented_Cognition| ed with  |natural_language|Natural_Language|  description details, where convenient, or with compact  |mathematical_notation|Mathematical_Notation| . The purpose of using pseudocode is that it is easier for people to understand than conventional programming language code, and that it is an efficient and environment-independent description of the key principles of an algorithm. It is commonly used in textbooks and  |scientific_publications|Scientific_Publications|  that are documenting various algorithms, and also in planning of computer program development, for sketching out the structure of the program before the actual coding takes place.     No standard for pseudocode syntax exists, as a program in pseudocode is not an executable program. Pseudocode resembles, but should not be confused with,  |skeleton_programs|Skeleton|  which can be  |compiled|Compiler|  without errors.  |Flowcharts|Flowchart| ,  |drakon-charts|Drakon|  and  |Unified_Modeling_Language|Unified_Modeling_Language|  charts can be thought of as a graphical alternative to pseudocode, but are more spacious on paper. Languages such as  |HAGGIS|Haggis|  bridge the gap between pseudocode and code written in programming languages.       Textbooks and  |scientific_publications|Scientific_Publication|  related to  |computer_science|Computer_Science|  and  |numerical_computation|Numerical_Computation|  often use pseudocode in description of algorithms, so that all programmers can understand them, even if they do not all know the same programming languages. In textbooks, there is usually an accompanying introduction explaining the particular conventions in use. The level of detail of the pseudocode may in some cases approach that of formalized general-purpose languages.     A  |programmer|Programmer|  who needs to implement a specific algorithm, especially an unfamiliar one, will often start with a pseudocode description, and then translate that description into the target programming language and modify it to interact correctly with the rest of the program. Programmers may also start a project by sketching out the code in pseudocode on paper before writing it in its actual language, as a  |top-down|Top-Down_And_Bottom-Up_Design|  structuring approach, with a process of steps to be followed as a refinement.       As the name suggests, pseudocode generally does not actually obey the  |syntax|Syntax|  rules of any particular language; there is no systematic standard form. Some writers borrow style and syntax from control structures from some conventional programming language, although this is discouraged. Code Complete, page 54 Avoid syntactic elements from the target programming language . Invitation to Computer Science, 8th Edition by Schneider/Gersting, Keep statements language independent as quoted at  Some syntax sources include  |Fortran|Fortran| ,  |Pascal|Pascal| ,  |BASIC|Basic| ,  |C|C| ,  |C++|C++| ,  |Java|Java| ,  |Lisp|Lisp| , and  |ALGOL|Algol| . Variable declarations are typically omitted. Function calls and blocks of code, such as code contained within a loop, are often replaced by a one-line natural language sentence.     Depending on the writer, pseudocode may therefore vary widely in style, from a near-exact imitation of a real programming language at one extreme, to a description approaching formatted prose at the other.     This is an example of pseudocode  .