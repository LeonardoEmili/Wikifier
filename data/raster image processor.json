[
    {
        "     A raster image processor  is a component used in a ": null
    },
    {
        "printing": "printing"
    },
    {
        " system which produces a ": null
    },
    {
        "raster": "raster graphics"
    },
    {
        " image also known as a ": null
    },
    {
        "bitmap": "bitmap"
    },
    {
        ". Such a bitmap is used by a later stage of the printing system to produce the printed output. The input may be a page description in a high-level ": null
    },
    {
        "page description language": "page description language"
    },
    {
        " such as ": null
    },
    {
        "PostScript": "postscript"
    },
    {
        ", ": null
    },
    {
        "PDF": "pdf"
    },
    {
        ", or ": null
    },
    {
        "XPS": "open xml paper specification"
    },
    {
        ". The input can be or include bitmaps of higher or lower resolution than the output device, which the RIP resizes using an ": null
    },
    {
        "image scaling": "image scaling"
    },
    {
        " algorithm.     Originally an RIP was a ": null
    },
    {
        "rack": "19-inch rack"
    },
    {
        " of electronic hardware which received the page description via some interface  and generated a hardware bitmap output which was used to enable or disable each ": null
    },
    {
        "pixel": "pixel"
    },
    {
        " on a real-time output device such as an optical ": null
    },
    {
        "film recorder": "film recorder"
    },
    {
        ", ": null
    },
    {
        "computer to film": "computer to film"
    },
    {
        ", or ": null
    },
    {
        "computer to plate": "computer to plate"
    },
    {
        ".     A RIP can be implemented as a software module on a general-purpose computer, or as a firmware program executed on a ": null
    },
    {
        "microprocessor": "microprocessor"
    },
    {
        " inside a printer. For high-end typesetting, standalone hardware RIPs are sometimes used. ": null
    },
    {
        "Ghostscript": "ghostscript"
    },
    {
        ", GhostPCL, and ColorBursts Overdrive are examples of software RIPs. Every PostScript printer contains a RIP in its ": null
    },
    {
        "firmware": "firmware"
    },
    {
        ". The RIP ": null
    },
    {
        "chip": "microprocessor"
    },
    {
        " in a ": null
    },
    {
        "laser printer": "laser printing"
    },
    {
        " sends its ": null
    },
    {
        "raster image": "raster image"
    },
    {
        " output to the ": null
    },
    {
        "laser": "laser"
    },
    {
        ".     Earlier RIPs retained backward compatibility with ": null
    },
    {
        "phototypesetters": "phototypesetting"
    },
    {
        "/photosetters, so they supported the older languages. So, for example, Linotype RIPs supported CORA .       Interpretation: This is the stage where the supported PDLs are translated into a private internal representation of each page. Most RIPs process pages serially, one page at a time, so the current machine state is only for the current page. After a page has been output, the page state is discarded to prepare for the next page.   Rendering: A process through which the private internal representation is turned into a ": null
    },
    {
        "continuous-tone": "continuous tone"
    },
    {
        " bitmap. In practical RIPs, interpretation and rendering are frequently done together. Simple languages were designed to work on minimal hardware, so tend to directly drive the renderer.   Screening: In order to print, the continuous-tone image is converted into a ": null
    },
    {
        "halftone": "halftone"
    },
    {
        " . Two screening methods or types are amplitude modulation screening and stochastic or frequency modulation": null
    }
]