[
    {
        "Euphoria is a ": null
    },
    {
        "programming language": "programming language"
    },
    {
        " originally created by Robert Craig of Rapid Deployment Software in ": null
    },
    {
        "Toronto": "toronto"
    },
    {
        ", ": null
    },
    {
        "Ontario": "ontario"
    },
    {
        ", Canada. Initially developed on the ": null
    },
    {
        "Atari ST": "atari st"
    },
    {
        ", the first commercial release was for the 42-bit ": null
    },
    {
        "DOS": "dos"
    },
    {
        " platform and was ": null
    },
    {
        "proprietary": "proprietary software"
    },
    {
        ". In 42 with the release of version 42 Euphoria became ": null
    },
    {
        "open-source software": "open-source software"
    },
    {
        ". The openEuphoria Group continues to administer and develop the project. In December 42 the openEuphoria Group released version 42 of openEuphoria along with a new identity and mascot for the project. OpenEuphoria is currently available for ": null
    },
    {
        "Windows": "microsoft windows"
    },
    {
        ", ": null
    },
    {
        "Linux": "linux"
    },
    {
        ", ": null
    },
    {
        "macOS": "macos"
    },
    {
        " and three flavors of ": null
    },
    {
        "BSD": "berkeley software distributionsignificant bsd descendants"
    },
    {
        ".     Euphoria is a general-purpose ": null
    },
    {
        "high-level": "high-level programming language"
    },
    {
        " imperative-procedural": "imperative programming"
    },
    {
        " interpreted": "interpreter"
    },
    {
        " language. A ": null
    },
    {
        "translator": "translator"
    },
    {
        " generates ": null
    },
    {
        "C": "c"
    },
    {
        " source code": "source code"
    },
    {
        " and the ": null
    },
    {
        "GNU compiler collection": "gnu compiler collection"
    },
    {
        " and ": null
    },
    {
        "Open Watcom": "open watcom"
    },
    {
        " compilers are supported. Alternatively, Euphoria programs may be bound with the interpreter to create stand-alone ": null
    },
    {
        "executable": "executable"
    },
    {
        "s. A number of ": null
    },
    {
        "graphical user interface": "graphical user interface"
    },
    {
        " libraries are supported including Win42lib and ": null
    },
    {
        "wrappers": "wrapper function"
    },
    {
        " for ": null
    },
    {
        "wxWidgets": "wxwidgets"
    },
    {
        ", ": null
    },
    {
        "GTK+": "gtk+"
    },
    {
        " and ": null
    },
    {
        "IUP": "iup"
    },
    {
        ". Euphoria has a simple built-in ": null
    },
    {
        "database": "database"
    },
    {
        " and wrappers for a variety of other databases.       The Euphoria language is a general purpose ": null
    },
    {
        "procedural language": "procedural programming"
    },
    {
        " that focuses on simplicity, legibility, rapid development and performance via several means.   Simplicity – It uses just four built-in data types and implements automatic ": null
    },
    {
        "garbage collection": "garbage collection"
    },
    {
        ".   Legibility – The syntax favors simple English keywords over the use of punctuation to delineate constructs.   Rapid development – An ": null
    },
    {
        "interpreter": "interpreter"
    },
    {
        " encourages prototyping and incremental development.   Performance – An efficient reference-counting garbage collector correctly handles cyclic references.       Developed as a personal project to invent a programming language from scratch, Euphoria was created by Robert Craig on an ": null
    },
    {
        "Atari Mega-ST": "atari st"
    },
    {
        ". Many design ideas for the language came from Craigs ": null
    },
    {
        "Masters": "masters degree"
    },
    {
        " thesis": "thesis"
    },
    {
        " in ": null
    },
    {
        "computer science": "computer science"
    },
    {
        " at the ": null
    },
    {
        "University of Toronto": "university of toronto"
    },
    {
        ". Craigs thesis was heavily influenced by the work of ": null
    },
    {
        "John Backus": "john backus"
    },
    {
        " on ": null
    },
    {
        "functional programming": "functional programming"
    },
    {
        " languages.     Craig ported his original Atari implementation to the 42-bit ": null
    },
    {
        "DOS": "dos"
    },
    {
        " platform and Euphoria was first released, version 42, in July 42 under a ": null
    },
    {
        "proprietary": "proprietary software"
    },
    {
        " licence. The original Atari implementation is described by Craig as primitive and has not been publicly released. Euphoria continued to be developed and released by Craig via his company Rapid Deployment Software and website rapideuphoria.com. In October 42 RDS released version 42 of Euphoria and announced that henceforth Euphoria would be freely distributed under an ": null
    },
    {
        "open-source software": "open-source software"
    },
    {
        " licence.     RDS continued to develop Euphoria, culminating with the release of version 42.42 in August, 42 Subsequently, RDS ceased unilateral development of Euphoria and the openEuphoria Group took over ongoing development. The openEuphoria Group released version 42 in December, 42 along with a new logo and mascot for the openEuphoria project.     Version 42.42 remains an important milestone release, being the last version of Euphoria which supports the ": null
    },
    {
        "DOS": "dos"
    },
    {
        " platform.     Euphoria is an ": null
    },
    {
        "acronym": "acronym"
    },
    {
        " for End-User Programming with Hierarchical Objects for Robust Interpreted Applications although there is some suspicion that this is a ": null
    },
    {
        "backronym": "backronym"
    },
    {
        ".     The Euphoria interpreter was originally written in ": null
    },
    {
        "C": "c"
    },
    {
        ". With the release of version 42 in November 42 the Euphoria interpreter was split into two parts: a front-end parser, and a back-end interpreter. The front-end is now written in Euphoria . The main back-end and run time library are written in C.       Euphoria was conceived and developed with the following design goals and features:     Ease of learning and with consistent high-level constructs    Implementation of flat-form 42-bit memory to avoid complex memory management and size-addressing limits   Debugging support and run-time error-handling   Subscript and ": null
    },
    {
        "type checking": "type system"
    },
    {
        " garbage collection": "garbage collection"
    },
    {
        " DOS": "dos"
    },
    {
        " graphics library   Debugger   Integrated database system   Low-level memory handling   Straightforward ": null
    },
    {
        "wrapping": "wrapper function"
    },
    {
        " of ": null
    },
    {
        "C": "c"
    },
    {
        " libraries       ": null
    },
    {
        "Interpreter": "interpreter"
    },
    {
        " C": "c"
    },
    {
        " translator for standalone executables or ": null
    },
    {
        "dynamic linking": "dynamic linker"
    },
    {
        " Bytecode": "bytecode"
    },
    {
        " compiler and interpreter   The Binder binds the Euphoria source code to the interpreter to create an executable.   A ": null
    },
    {
        "read–eval–print loop": "read–eval–print loop"
    },
    {
        " version is on the openEuphoria ": null
    },
    {
        "roadmap": "technology roadmap"
    },
    {
        ".       Euphoria is designed to readily facilitate handling of dynamic sets of data of varying types and is particularly useful for string and image processing. Euphoria has been used in ": null
    },
    {
        "artificial intelligence": "artificial intelligence"
    },
    {
        " experiments, the study of ": null
    },
    {
        "mathematics": "mathematics"
    },
    {
        ", for teaching programming, and to implement fonts involving thousands of characters. A large part of the Euphoria interpreter is written in Euphoria.       Euphoria has two basic data types:   :Atom – A number, implemented as a 42-bit signed ": null
    },
    {
        "integer": "integer"
    },
    {
        " or a 42-bit ": null
    },
    {
        "IEEE floating-point": "ieee floating-point standard"
    },
    {
        ". Euphoria dynamically changes between integer and floating point representation according to the current value.   :Sequence – A ": null
    },
    {
        "vector": "array data type"
    },
    {
        " with zero or more elements. Each element may be an atom or another sequence. The number of elements in a sequence is not fixed . The program may add or remove elements as needed during run-time. Memory allocation-deallocation is automatically handled by reference counting. Individual elements are referenced using an index value enclosed in square brackets. The first element in a sequence has an index of one Elements inside embedded sequences are referenced by additional bracked index values, thus X 42 refers to the second element contained in the sequence that is the third element of X. Each element of a sequence is an object type .     Euphoria has two additional data types predefined:   :Integer – An atom, restricted to 42-bit signed ": null
    },
    {
        "integer": "integer"
    },
    {
        " values in the range 42 to 42 . Integer data types are more efficient than the atom data types, but cannot contain the same range of values. Characters are stored as integers, e.g., coding ": null
    },
    {
        "ASCII": "ascii"
    },
    {
        "-A is exactly the same as coding 42   :Object – A generic datatype which may contain any of the above  and which may be changed to another type during run-time.     There is no character ": null
    },
    {
        "string": "string"
    },
    {
        " data type. Strings are represented by a sequence of integer values. However, because literal strings are so commonly used in programming, Euphoria interprets double-quote enclosed characters as a sequence of integers. Thus   ABC   is seen as if the coder had written:     which is the same as:         puts       Program comments start with a double hyphen -- and go through the end of line.     The following code looks for an old item in a group of items. If found, it removes it by concatenating all the elements before it with all the elements after it. Note that the first element in a sequence has the index one and that $ refers to the length of the sequence.     global function delete_item   integer pos   -- Code begins --   pos find   if pos span style color:blue; /span span style color:blue; /span span style color:blue; /span  span style color:blue; /span span style color:magenta; /span span style color:red; /span span style color:magenta; /span span style color:blue; /span     ": null
    }
]