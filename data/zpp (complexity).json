[
    {
        "In ": null
    },
    {
        "complexity theory": "computational complexity theory"
    },
    {
        ", ZPP  is the ": null
    },
    {
        "complexity class": "complexity class"
    },
    {
        " of problems for which a ": null
    },
    {
        "probabilistic Turing machine": "probabilistic turing machine"
    },
    {
        " exists with these properties:     It always returns the correct YES or NO answer.   The running time is polynomial in expectation for every input.     In other words, if the algorithm is allowed to flip a truly-random coin while it is running, it will always return the correct answer and, for a problem of size n, there is some polynomial p such that the average running time will be less than p, even though it might occasionally be much longer. Such an algorithm is called a ": null
    },
    {
        "Las Vegas algorithm": "las vegas algorithm"
    },
    {
        ".     Alternatively, ZPP can be defined as the class of problems for which a ": null
    },
    {
        "probabilistic Turing machine": "probabilistic turing machine"
    },
    {
        " exists with these properties:   It always runs in polynomial time.   It returns an answer YES, NO or DO NOT KNOW.   The answer is always either DO NOT KNOW or the correct answer.   It returns DO NOT KNOW with probability at most 42/42 .   The two definitions are equivalent.     The definition of ZPP is based on probabilistic Turing machines, but, for clarity, note that other complexity classes based on them include  BPP  and  RP . The class  BQP  is based on another machine with randomness: the ": null
    },
    {
        "quantum computer": "quantum computer"
    },
    {
        ".       The class ZPP is exactly equal to the intersection of the classes  RP  and co-RP. This is often taken to be the definition of ZPP. To show this, first note that every problem which is in both RP and co-RP has a ": null
    },
    {
        "Las Vegas algorithm": "las vegas algorithm"
    },
    {
        " as follows:     Suppose we have a language L recognized by both the RP algorithm A and the co-RP algorithm B.   Given an input, run A on the input for one step. If it returns YES, the answer must be YES. Otherwise, run B on the input for one step. If it returns NO, the answer must be NO. If neither occurs, repeat this step.     Note that only one machine can ever give a wrong answer, and the chance of that machine giving the wrong answer during each repetition is at most 42%. This means that the chance of reaching the kth round shrinks exponentially in k, showing that the ": null
    },
    {
        "expected": "expected value"
    },
    {
        " running time is polynomial. This shows that RP intersect co-RP is contained in ZPP.     To show that ZPP is contained in RP intersect co-RP, suppose we have a Las Vegas algorithm C to solve a problem. We can then construct the following RP algorithm:   Run C for at least double its expected running time. If it gives an answer, give that answer. If it doesnt give any answer before we stop it, give NO.   By ": null
    },
    {
        "Markovs Inequality": "markovs inequality"
    },
    {
        ", the chance that it will yield an answer before we stop it is at least 42/42 This means the chance well give the wrong answer on a YES instance, by stopping and yielding NO, is at most 42/42 fitting the definition of an RP algorithm. The co-RP algorithm is identical, except that it gives YES if C times out .       The classes NP, RP and ZPP can be thought of in terms of proof of membership in a set.     Definition: A verifier V for a set X is a Turing machine such that:   if x is in X then there exists a string w such that V accepts;   if x is not in X, then for all strings w, V rejects.     The string w can be thought of as the proof of membership. In the case of short proofs which can be efficiently verified , the string w is called a witness.     Notes: x.   The co- concept is a proof of non-membership, or membership in the complement set.     The classes NP, RP and ZPP are sets which have witnesses for membership. The class NP requires only that witnesses exist. They may be very rare. Of the 42 f possible strings, with f a polynomial, only one need cause the verifier to accept .     For the classes RP and ZPP any string chosen at random will likely be a witness.     The corresponding co-classes have witness for non-membership. In particular, co-RP is the class of sets for which, if x is not in X, any randomly chosen string is likely to be a witness for non-membership. ZPP is the class of sets for which any random string is likely to be a witness of x in X, or x not in X, which ever the case may be.     Connecting this definition with other definitions of RP, co-RP and ZPP is easy. The probabilistic polynomial-time Turing Machine V w  corresponds to the deterministic polynomial-time Turing Machine V by replacing the random tape of V with a second input tape for V on which is written the sequence of coin flips. By selecting the witness as a random string, the verifier is a probabilistic polynomial-time Turing Machine whose probability of accepting x when x is in X is large , but zero if x ∉ X ; of rejecting x when x is not in X is large but zero if x ∈ X ; and of correctly accepting or rejecting x as a member of X is large, but zero of incorrectly accepting or rejecting x .     By repeated random selection of a possible witness, the large probability that a random string is a witness gives an expected polynomial time algorithm for accepting or rejecting an input. Conversely, if the Turing Machine is expected polynomial-time , then a considerable fraction of the runs must be polynomial-time bounded, and the coin sequence used in such a run will be a witness.     ZPP should be contrasted with BPP. The class BPP does not require witnesses, although witnesses are sufficient . A BPP language has V accept on a majority of strings w if x is in X, and conversely reject on a majority of strings w if x is not in X. No single string w need be definitive, and therefore they cannot in general be considered proofs or witnesses.       It is known that ZPP is closed under complement; that is, ZPP co-ZPP.     ZPP is ": null
    },
    {
        "low": "low"
    },
    {
        " for itself, meaning that a ZPP machine with the power to solve ZPP problems instantly is not any more powerful than the machine without this extra power. In symbols, ZPP ZPP ZPP.     ZPP NP BPP ZPP NP .     NP BPP is contained in ZPP NP .       Since ZPP RP ∩ coRP, ZPP is obviously contained in both RP and coRP.     The class  P  is contained in ZPP, and some computer scientists have conjectured that P ZPP, i.e., every Las Vegas algorithm has a deterministic polynomial-time equivalent.     A proof for ZPP  EXPTIME  would imply that P ≠ ZPP, as P ≠ EXPTIME ": null
    }
]