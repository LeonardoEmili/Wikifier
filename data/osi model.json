[
    {
        "      The Open Systems Interconnection model  is a ": null
    },
    {
        "conceptual model": "Conceptual Model"
    },
    {
        " that characterizes and standardizes the communication functions of a ": null
    },
    {
        "telecommunication": "Telecommunication"
    },
    {
        " or computing system without regard to its underlying internal structure and technology. Its goal is the interoperability of diverse communication systems with standard ": null
    },
    {
        "communication protocols": "Communication Protocols"
    },
    {
        ". The model partitions a communication system into ": null
    },
    {
        "abstraction layer": "Abstraction Layer"
    },
    {
        "s. The original version of the model had seven layers.     A layer serves the layer above it and is served by the layer below it. For example, a layer that provides error-free communications across a network provides the path needed by applications above it, while it calls the next lower layer to send and receive packets that constitute the contents of that path. Two instances at the same layer are visualized as connected by a horizontal connection in that layer.     The model is a product of the Open Systems Interconnection project at the ": null
    },
    {
        "International Organization for Standardization": "International Organization For Standardization"
    },
    {
        " .            Prior to the inception of the OSI project, networking was largely either government-sponsored  or vendor-developed with proprietary standards, such as the ": null
    },
    {
        "System network architecture": "System Network Architecture"
    },
    {
        " of ": null
    },
    {
        "IBM": "Ibm"
    },
    {
        ", and ": null
    },
    {
        "DECnet": "Decnet"
    },
    {
        " of ": null
    },
    {
        "Digital Equipment Corporation": "Digital Equipment Corporation"
    },
    {
        ". An Experimental Packet Switched system in the UK circa 1973, also identified the need for defining higher level protocols. The NCC publication Why Distributed Computing which came from considerable research into future configurations for computer systems, resulted in the UK presenting the case for an international standards committee to cover this area at the ISO meeting in Sydney in March 1977.     In the late 1970s, the International Organization for Standardization conducted a program to develop general standards and methods of networking. A similar process evolved at the ": null
    },
    {
        "International Telegraph and Telephone Consultative Committee": "International Telegraph And Telephone Consultative Committee"
    },
    {
        " . Both bodies developed documents that defined similar networking models.     The OSI model was first defined in raw form in ": null
    },
    {
        "Washington, DC": "Washington, Dc"
    },
    {
        " in February 1978 by ": null
    },
    {
        "Hubert Zimmermann": "Hubert Zimmermann"
    },
    {
        " of France and the refined standard was published by the ISO in 1984.      In 1983, these two documents were merged to form a standard called The Basic Reference Model for Open Systems Interconnection. The standard is usually referred to as Open Systems Interconnection Reference Model, OSI Reference Model, or simply OSI model. It was published in 1984 by both the ISO, as standard ": null
    },
    {
        "ISO 7498": "Iso 7498"
    },
    {
        ", and the renamed CCITT  as standard X.200.     OSI had two major components, an abstract model of networking, called the Basic Reference Model or seven-layer model, and a set of specific protocols. The ": null
    },
    {
        "OSI reference model": "Osi Reference Model"
    },
    {
        " was a major advance in the teaching of network concepts. It promoted the idea of a consistent model of protocol layers, defining interoperability between network devices and software.     The concept of a seven-layer model was provided by the work of ": null
    },
    {
        "Charles Bachman": "Charles Bachman"
    },
    {
        " at ": null
    },
    {
        "Honeywell Information Systems": "Honeywell Information Systems"
    },
    {
        ".  Various aspects of OSI design evolved from experiences with the ": null
    },
    {
        "ARPANET": "Arpanet"
    },
    {
        ", NPLNET, EIN, ": null
    },
    {
        "CYCLADES": "Cyclades"
    },
    {
        " network and the work in IFIP WG6.1. The new design was documented in ISO 7498 and its various addenda. In this model, a networking system was divided into layers. Within each layer, one or more entities implement its functionality. Each entity interacted directly only with the layer immediately beneath it, and provided facilities for use by the layer above it.     The OSI standards documents are available from the ITU-T as the X.200-series of recommendations.    Some of the protocol specifications were also available as part of the ITU-T X series. The equivalent ISO and ISO/IEC standards for the OSI model were available from ISO. Not all are free of charge.      OSI was hence an industry effort, attempting to get industry participants to agree on common network standards to provide multi-vendor interoperability. It was common for large networks to support multiple network protocol suites, with many devices unable to interoperate with other devices because of a lack of common protocols. However, while OSI developed its networking standards, ": null
    },
    {
        "TCP/IP": "Tcp/Ip"
    },
    {
        " came into widespread use on multi-vendor networks for ": null
    },
    {
        "internetwork": "Internetwork"
    },
    {
        "ing.           ": null
    },
    {
        "Communication protocols": "Communication Protocols"
    },
    {
        " enable an entity in one host to interact with a corresponding entity at the same layer in another host. Service definitions, like the OSI Model, abstractly describe the functionality provided to an -layer by an layer, where N is one of the seven layers of protocols operating in the local host.     At each level N, two entities at the communicating devices  exchange ": null
    },
    {
        "protocol data units": "Protocol Data Unit"
    },
    {
        " by means of a layer N protocol. Each PDU contains a payload, called the ": null
    },
    {
        "service data unit": "Service Data Unit"
    },
    {
        " , along with protocol-related headers or footers.     Data processing by two communicating OSI-compatible devices proceeds as follows:   The data to be transmitted is composed at the topmost layer of the transmitting device  into a  protocol data unit  .   The PDU is passed to layer N-1, where it is known as the  service data unit  .   At layer N-1 the SDU is ": null
    },
    {
        "concatenated": "Concatenation"
    },
    {
        " with a header, a footer, or both, producing a layer N-1 PDU. It is then passed to layer N-2.   The process continues until reaching the lowermost level, from which the data is transmitted to the receiving device.   At the receiving device the data is passed from the lowest to the highest layer as a series of SDUs while being successively stripped from each layers header or footer, until reaching the topmost layer, where the last of the data is consumed.       The OSI model was defined in ISO/IEC 7498 which consists of the following parts:   ISO/IEC 7498-1 The Basic Model   ISO 7498-2 Security Architecture   ISO/IEC 7498-3 Naming and addressing   ISO/IEC 7498-4 Management framework       The recommendation X.200 describes seven layers, labeled 1 to 7. Layer 1 is the lowest layer in this model.               The ": null
    },
    {
        "physical layer": "Physical Layer"
    },
    {
        " is responsible for the transmission and reception of unstructured raw data between a device and a physical ": null
    },
    {
        "transmission medium": "Transmission Medium"
    },
    {
        ". It converts the digital bits into electrical, radio, or optical signals. Layer specifications define characteristics such as voltage levels, the timing of voltage changes, physical data rates, maximum transmission distances, modulation scheme, channel access method and physical connectors. This includes the layout of ": null
    },
    {
        "pins": "Lead"
    },
    {
        ", ": null
    },
    {
        "voltage": "Voltage"
    },
    {
        "s, line ": null
    },
    {
        "impedance": "Characteristic Impedance"
    },
    {
        ", cable specifications, signal timing and frequency for wireless devices. Bit rate control is done at the physical layer and may define transmission mode as ": null
    },
    {
        "simplex": "Simplex Communication"
    },
    {
        ", ": null
    },
    {
        "half duplex": "Duplex Half-Duplex"
    },
    {
        ", and ": null
    },
    {
        "full duplex": "Duplex Full-Duplex"
    },
    {
        ". The components of a physical layer can be described in terms of a ": null
    },
    {
        "network topology": "Network Topology"
    },
    {
        ". ": null
    },
    {
        "Bluetooth": "Bluetooth"
    },
    {
        ", ": null
    },
    {
        "Ethernet": "Ethernet Physical Layer"
    },
    {
        ", and ": null
    },
    {
        "USB": "Usb"
    },
    {
        " all have specifications for a physical layer.       The ": null
    },
    {
        "data link layer": "Data Link Layer"
    },
    {
        " provides ": null
    },
    {
        "node-to-node data transfer": "Node-To-Node Data Transfer"
    },
    {
        "â€”a link between two directly connected nodes. It detects and possibly corrects errors that may occur in the physical layer.   It defines the protocol to establish and terminate a connection between two physically connected devices. It also defines the protocol for ": null
    },
    {
        "flow control": "Flow Control"
    },
    {
        " between them.     ": null
    },
    {
        "IEEE 802": "Ieee 802"
    },
    {
        " divides the data link layer into two sublayers:    ": null
    },
    {
        "Medium access control": "Medium Access Control"
    },
    {
        " layer â€“ responsible for controlling how devices in a network gain access to a medium and permission to transmit data.   ": null
    },
    {
        "Logical link control": "Logical Link Control"
    },
    {
        " layer â€“ responsible for identifying and encapsulating network layer protocols, and controls error checking and frame synchronization.     The MAC and LLC layers of IEEE 802 networks such as ": null
    },
    {
        "802.3": "802.3"
    },
    {
        " Ethernet": "Ethernet"
    },
    {
        ", ": null
    },
    {
        "802.11": "802.11"
    },
    {
        " Wi-Fi": "Wi-Fi"
    },
    {
        ", and ": null
    },
    {
        "802.15.4": "802.15.4"
    },
    {
        " ZigBee": "Zigbee"
    },
    {
        " operate at the data link layer.     The ": null
    },
    {
        "Point-to-Point Protocol": "Point-To-Point Protocol"
    },
    {
        " is a data link layer protocol that can operate over several different physical layers, such as ": null
    },
    {
        "synchronous": "Synchronous Serial Communication"
    },
    {
        " and ": null
    },
    {
        "asynchronous": "Asynchronous Serial Communication"
    },
    {
        " serial lines.     The ": null
    },
    {
        "ITU-T": "Itu-T"
    },
    {
        " G.hn": "G.Hn"
    },
    {
        " standard, which provides high-speed local area networking over existing wires , includes a complete data link layer that provides both ": null
    },
    {
        "error correction": "Error Correction"
    },
    {
        " and flow control by means of a ": null
    },
    {
        "selective-repeat": "Selective Repeat"
    },
    {
        " sliding-window protocol": "Sliding Window Protocol"
    },
    {
        ".       The ": null
    },
    {
        "network layer": "Network Layer"
    },
    {
        " provides the functional and procedural means of transferring variable length ": null
    },
    {
        "data": "Data"
    },
    {
        " sequences  from one node to another connected in different networks . A network is a medium to which many nodes can be connected, on which every node has an address and which permits nodes connected to it to transfer messages to other nodes connected to it by merely providing the content of a message and the address of the destination node and letting the network find the way to deliver the message to the destination node, possibly ": null
    },
    {
        "routing": "Routing"
    },
    {
        " it through intermediate nodes. If the message is too large to be transmitted from one node to another on the data link layer between those nodes, the network may implement message delivery by splitting the message into several fragments at one node, sending the fragments independently, and reassembling the fragments at another node. It may, but does not need to, report delivery errors.     Message delivery at the network layer is not necessarily guaranteed to be reliable; a network layer protocol may provide reliable message delivery, but it need not do so.     A number of layer-management protocols, a function defined in the management annex, ISO 7498/4, belong to the network layer. These include routing protocols, multicast group management, network-layer information and error, and network-layer address assignment. It is the function of the payload that makes these belong to the network layer, not the protocol that carries them.        The ": null
    },
    {
        "transport layer": "Transport Layer"
    },
    {
        " provides the functional and procedural means of transferring variable-length data sequences from a source to a destination host, while maintaining the quality of service functions.     The transport layer controls the reliability of a given link through flow control, ": null
    },
    {
        "segmentation/desegmentation": "Packet Segmentation"
    },
    {
        ", and error control. Some protocols are state- and connection-oriented. This means that the transport layer can keep track of the segments and re-transmit those that fail delivery. The transport layer also provides the acknowledgement of the successful data transmission and sends the next data if no errors occurred. The transport layer creates segments out of the message received from the application layer. Segmentation is the process of dividing a long message into smaller messages.     OSI defines five classes of connection-mode transport protocols ranging from class 0 to class 4 . Class 0 contains no error recovery, and was designed for use on network layers that provide error-free connections. Class 4 is closest to TCP, although TCP contains functions, such as the graceful close, which OSI assigns to the session layer. Also, all OSI TP connection-mode ": null
    },
    {
        "protocol": "Communications Protocol"
    },
    {
        " classes provide expedited data and preservation of record boundaries. Detailed characteristics of TP0-4 classes are shown in the following table:           An easy way to visualize the transport layer is to compare it with a post office, which deals with the dispatch and classification of mail and parcels sent. A post office inspects only the outer envelope of mail to determine its delivery. Higher layers may have the equivalent of double envelopes, such as cryptographic presentation services that can be read by the addressee only. Roughly speaking, ": null
    },
    {
        "tunneling protocols": "Tunneling Protocol"
    },
    {
        "operate at the transport layer, such as carrying non-IP protocols such as ": null
    },
    {
        "IBMs": "Ibm"
    },
    {
        " SNA": "Ibm Systems Network Architecture"
    },
    {
        " or ": null
    },
    {
        "Novells": "Novell"
    },
    {
        " IPX": "Internetwork Packet Exchange"
    },
    {
        " over an IP network, or end-to-end encryption with ": null
    },
    {
        "IPsec": "Ipsec"
    },
    {
        ". While ": null
    },
    {
        "Generic Routing Encapsulation": "Generic Routing Encapsulation"
    },
    {
        " might seem to be a network-layer protocol, if the encapsulation of the payload takes place only at the endpoint, GRE becomes closer to a transport protocol that uses IP headers but contains complete Layer 2 frames or Layer 3 packets to deliver to the endpoint. ": null
    },
    {
        "L2TP": "Layer 2 Tunneling Protocol"
    },
    {
        " carries ": null
    },
    {
        "PPP": "Point-To-Point Protocol"
    },
    {
        " frames inside transport segments.     Although not developed under the OSI Reference Model and not strictly conforming to the OSI definition of the transport layer, the ": null
    },
    {
        "Transmission Control Protocol": "Transmission Control Protocol"
    },
    {
        " and the ": null
    },
    {
        "User Datagram Protocol": "User Datagram Protocol"
    },
    {
        " of the Internet Protocol Suite are commonly categorized as layer-4 protocols within OSI.       The ": null
    },
    {
        "session layer": "Session Layer"
    },
    {
        " controls the dialogues between computers. It establishes, manages and terminates the connections between the local and remote application. It provides for ": null
    },
    {
        "full-duplex": "Duplex"
    },
    {
        ", ": null
    },
    {
        "half-duplex": "Half-Duplex"
    },
    {
        ", or ": null
    },
    {
        "simplex": "Simplex Communication"
    },
    {
        " operation, and establishes procedures for checkpointing, suspending, restarting, and terminating a session. In the OSI model, this layer is responsible for gracefully closing a session, which is handled in the ": null
    },
    {
        "Transmission Control Protocol": "Transmission Control Protocol"
    },
    {
        " at the transport layer in the Internet Protocol Suite. This layer is also responsible for session checkpointing and recovery, which is not usually used in the Internet Protocol Suite. The session layer is commonly implemented explicitly in application environments that use ": null
    },
    {
        "remote procedure call": "Remote Procedure Call"
    },
    {
        "s.       The ": null
    },
    {
        "presentation layer": "Presentation Layer"
    },
    {
        " establishes context between application-layer entities, in which the application-layer entities may use different syntax and semantics if the presentation service provides a mapping between them. If a mapping is available, presentation protocol data units are encapsulated into session protocol data units and passed down the ": null
    },
    {
        "protocol stack": "Protocol Stack"
    },
    {
        ".     This layer provides independence from data representation by translating between application and network formats. The presentation layer transforms data into the form that the application accepts. This layer formats data to be sent across a network. It is sometimes called the syntax layer.  The presentation layer can include compression functions.  The Presentation Layer negotiates the Transfer Syntax.     The original presentation structure used the ": null
    },
    {
        "Basic Encoding Rules": "Basic Encoding Rules"
    },
    {
        " of ": null
    },
    {
        "Abstract Syntax Notation One": "Abstract Syntax Notation One"
    },
    {
        " , with capabilities such as converting an ": null
    },
    {
        "EBCDIC": "Ebcdic"
    },
    {
        "-coded text ": null
    },
    {
        "file": "Computer File"
    },
    {
        " to an ": null
    },
    {
        "ASCII": "Ascii"
    },
    {
        "-coded file, or ": null
    },
    {
        "serialization": "Serialization"
    },
    {
        " of ": null
    },
    {
        "objects": "Object"
    },
    {
        "and other ": null
    },
    {
        "data structures": "Data Structure"
    },
    {
        "from and to ": null
    },
    {
        "XML": "Xml"
    },
    {
        ". ASN.1 effectively makes an application protocol invariant with respect to syntax.       The ": null
    },
    {
        "application layer": "Application Layer"
    },
    {
        " is the OSI layer closest to the end user, which means both the OSI application layer and the user interact directly with the software application. This layer interacts with software applications that implement a communicating component. Such application programs fall outside the scope of the OSI model. Application-layer functions typically include identifying communication partners, determining resource availability, and synchronizing communication. When identifying communication partners, the application layer determines the identity and availability of communication partners for an application with data to transmit. The most important distinction in the application layer is the distinction between the application-entity and the application. For example, a reservation website might have two application-entities: one using HTTP to communicate with its users, and one for a remote database protocol to record reservations. Neither of these protocols have anything to do with reservations. That logic is in the application itself. The application layer per se has no means to determine the availability of resources in the network.       Cross-layer functions are services that are not tied to a given layer, but may affect more than one layer. Some orthogonal aspects, such as management and ": null
    },
    {
        "security": "Security Service"
    },
    {
        ", involve all of the layers . These services are aimed at improving the ": null
    },
    {
        "CIA triad": "Information Security"
    },
    {
        "â€”": null
    },
    {
        "confidentiality": "Confidentiality"
    },
    {
        ", ": null
    },
    {
        "integrity": "Integrity"
    },
    {
        ", and ": null
    },
    {
        "availability": "Availability"
    },
    {
        "â€”of the transmitted data.   Cross-layer functions are the norm, in practice, because the availability of a communication service is determined by the interaction between ": null
    },
    {
        "network design": "Network Design"
    },
    {
        " and ": null
    },
    {
        "network management": "Network Management"
    },
    {
        " protocols. Appropriate choices for both of these are needed to protect against ": null
    },
    {
        "denial of service": "Denial Of Service"
    },
    {
        ".     Specific examples of cross-layer functions include the following:   ": null
    },
    {
        "Security service ": "Security Service"
    },
    {
        "  as defined by ": null
    },
    {
        "ITU-T": "Itu-T"
    },
    {
        " X.800 recommendation.   Management functions, i.e. functions that permit to configure, instantiate, monitor, terminate the communications of two or more entities: there is a specific application-layer protocol, ": null
    },
    {
        "common management information protocol": "Common Management Information Protocol"
    },
    {
        " and its corresponding service, ": null
    },
    {
        "common management information service": "Common Management Information Service"
    },
    {
        " , they need to interact with every layer in order to deal with their instances.   ": null
    },
    {
        "Multiprotocol Label Switching": "Multiprotocol Label Switching"
    },
    {
        " , ATM, and X.25 are 3a protocols. OSI divides the Network Layer into three roles: 3acite web|urlhttp://www.itu.int/rec/T-REC-Q.1400/en/|titleITU-T Recommendation Q.1400 , Architecture framework for the development of signaling and OA & M protocols using OSI concepts|pages4, 7|publisherITUhlist | FTAM | X.400 | X.500 | DAP | ROSE |RTSE | ACSE ITU Rec. X.227 , X.217 . | CMIP X.700 series of recommendations from the ITU-T and ISO 9596. hlist hlist | INAP | MAP | TCAP | ISUP | TUP hlist | AFP | ZIP | RTMP | NBP hlist | SAP hlist | APPC hlist | HL7 | Modbus | HTTP | WebSocket hlist |ISO/IEC  8823 |X.226 | ISO/IEC  9576-1 |X.236hlist | MIME | SSL | TLS | XDR hlist | AFP hlist | TDI | ASCII | EBCDIC | MIDI | MPEG hlist |ISO/IEC  8327 |X.225 | ISO/IEC  9548-1 |X.235small|hlist | ASP | ADSP | PAP hlist | NWLink hlist | DLC ?hlist | Named pipes | NetBIOS | SAP | half duplex | full duplex | simplex | RPC | SOCKS hlist |ISO/IEC  8073 |TP0 |TP1 |TP2 |TP3 |TP4   |ISO/IEC  8602 |X.234hlist | TCP | UDP | SCTP | DCCP hlist | DDP hlist | SPX hlist | NBF hlist |ISO/IEC  8208 | X.25   | ISO/IEC  8878 | X.223 |ISO/IEC  8473-1 | CLNP  X.233 |ISO/IEC  10589 | IS-IS hlist | IP | IPsec | ICMP | IGMP | OSPF | RIP hlist | SCCP | MTP small|hlist | IPX hlist | RRC BMC hlist | NBF | Q.931 | NDP | IS-IS hlist |ISO/IEC  7666 | X.25   | Token Bus |X.222 |ISO/IEC  8802-2 | LLC   hlist | PPP | SBTV | SLIP hlist | MTP | Q.710 hlist | LocalTalk | ARA | PPP hlist | SDLC hlist | PDCP | LLC | MAC hlist | ARP | ARQ | ATM | Bit stuffing | CDP | CRC | DOCSIS | FDDI | FDP | Fibre Channel | Frame Relay | HDP | HDLC | IEEE 802.3 | IEEE 802.11a/b/g/n | IEEE 802.1Q | ISL | ITU-T G.hn DLL | Linux interface bonding | PPP |Q.921 | Token Ring hlist | X.25 hlist | MTP | Q.710 hlist | RS-232 | RS-422 | PhoneNet hlist | Twinax hlist | RS-232 | Full duplex | RJ45 | V.35 | V.34 | I.430 | I.431 | T1 | E1 | 10BASE-T | 100BASE-TX | 1000BASE-T | POTS | SONET | SDH | DSL | 802.11a/b/g/n PHY | ITU-T G.hn PHY | DOCSIS | DWDM | OTN ": null
    }
]