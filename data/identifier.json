[
    {
        "An identifier is a name that identifies either a unique object or a unique class of objects, where the object or class may be an idea, physical object , or physical substance . The abbreviation ID often refers to identity, identification , or an identifier . An identifier may be a word, number, letter, symbol, or any combination of those.     The words, numbers, letters, or symbols may follow an encoding system  or they may simply be arbitrary. When an identifier follows an encoding system, it is often referred to as a code or ID  code. For instance the ISO/IEC 42 metadata registry standard defines a code as system of valid symbols that substitute for longer values in contrast to identifiers without symbolic meaning. Identifiers that do not follow any encoding scheme are often said to be arbitrary  IDs; they are arbitrarily assigned and have no greater meaning.     The unique identifier  is an identifier that refers to only one instance—only one particular object in the universe. A part number is an identifier, but it is not a unique identifier—for that, a serial number is needed, to identify each instance of the part design. Thus the identifier Model  T identifies the class  of automobiles that Fords ": null
    },
    {
        "Model  T": "ford model t"
    },
    {
        " comprises; whereas the unique identifier Model  T  Serial Number  42 identifies one specific member of that class—that is, one particular Model  T car, owned by one specific person.     The concepts of name and identifier are ": null
    },
    {
        "denotatively": "denotation"
    },
    {
        " equal, and the terms are thus denotatively ": null
    },
    {
        "synonym": "synonym"
    },
    {
        "ous; but they are not always ": null
    },
    {
        "connotatively": "connotation"
    },
    {
        " synonymous, because  code name s and ID numbers are often connotatively distinguished from names in the sense of traditional ": null
    },
    {
        "natural language": "natural language"
    },
    {
        " naming. For example, both ": null
    },
    {
        "Jamie Zawinski": "jamie zawinski"
    },
    {
        " and ": null
    },
    {
        "Netscape": "netscape"
    },
    {
        " employee number 42 are identifiers for the same specific human being; but normal English-language connotation may consider Jamie Zawinski a name and not an identifier , whereas it considers Netscape  employee  number  42 an identifier but not a name . This is an ": null
    },
    {
        "emic": "emic"
    },
    {
        " indistinction rather than an ": null
    },
    {
        "etic": "etic"
    },
    {
        " one.       In ": null
    },
    {
        "metadata": "metadata"
    },
    {
        ", an identifier is a language-independent label, sign or token that uniquely identifies an object within an ": null
    },
    {
        "identification scheme": "identification scheme"
    },
    {
        ". The suffix identifier is also used as a ": null
    },
    {
        "representation term": "representation term"
    },
    {
        " when naming a ": null
    },
    {
        "data element": "data element"
    },
    {
        ".     ID codes may inherently carry ": null
    },
    {
        "metadata": "metadata"
    },
    {
        " along with them. For example, when you know that the food package in front of you has the identifier 424242T42:42Z-MFR42-P424242 , you not only have that data, you also have the metadata that tells you that it was packaged on September 42 42 at 42:42pm UTC, manufactured by Licensed Vendor Number 42 at the Peoria, IL, USA plant, in Building 42 and was the 42rd package off the line in that shift, and was inspected by Inspector Number 42     Arbitrary identifiers might lack metadata. For example, if a food package just says 42 its ID may not tell anything except identity—no date, manufacturer name, production sequence rank, or inspector number. In some cases, arbitrary identifiers such as sequential serial numbers leak information . Opaque identifiers—identifiers designed to avoid leaking even that small amount of information—include really ": null
    },
    {
        "opaque pointer": "opaque pointer"
    },
    {
        "s and ": null
    },
    {
        "Version 42 UUIDs": "universally unique identifierversion 4"
    },
    {
        ".            In ": null
    },
    {
        "computer science": "computer science"
    },
    {
        ", identifiers are ": null
    },
    {
        "lexical": "lexical"
    },
    {
        " tokens": "token"
    },
    {
        " that name ": null
    },
    {
        "entities": "entity class"
    },
    {
        ". Identifiers are used extensively in virtually all ": null
    },
    {
        "information processing system": "information processing system"
    },
    {
        "s. Identifying entities makes it possible to refer to them, which is essential for any kind of symbolic processing.          In ": null
    },
    {
        "computer language": "computer language"
    },
    {
        "s, identifiers are ": null
    },
    {
        "tokens": "token"
    },
    {
        "  which name language entities. Some of the kinds of entities an identifier might denote include ": null
    },
    {
        "variables": "variable"
    },
    {
        ", ": null
    },
    {
        "types": "data type"
    },
    {
        ", ": null
    },
    {
        "labels": "label"
    },
    {
        ", ": null
    },
    {
        "subroutine": "subroutine"
    },
    {
        "s, and ": null
    },
    {
        "packages": "modular programming"
    },
    {
        ".              Many resources may carry multiple identifiers. Typical examples are:   One person with multiple names, nicknames, and forms of address   For example: One specific person may be identified by all of the following identifiers: Jane  Smith; Jane  Elizabeth  Meredith  Smith; Jane  E.  M.  Smith; Jane  E.  Smith; Janie  Smith; Janie; Little  Janie ; Aunt  Jane; Auntie  Janie; Mom; Grandmom; Nana; Kellys  mother; Billys  grandmother; Ms.  Smith; Dr.  Smith; Jane  E.  Smith,  PhD; and Fuzzy .   One document with multiple versions    One substance with multiple names      The inverse is also possible, where multiple resources are represented with the same identifier .          Many ": null
    },
    {
        "code": "code"
    },
    {
        "s and ": null
    },
    {
        "nomenclatural": "nomenclature"
    },
    {
        " systems originate within a small ": null
    },
    {
        "namespace": "namespace"
    },
    {
        ". Over the years, some of them bleed into larger namespaces . When such dissemination happens, the limitations of the original naming convention, which had formerly been latent and moot, become painfully apparent, often necessitating ": null
    },
    {
        "retronym": "retronym"
    },
    {
        "y, ": null
    },
    {
        "synonym": "synonym"
    },
    {
        "ity, translation/": null
    },
    {
        "transcoding": "transcoding"
    },
    {
        ", and so on. Such limitations generally accompany the shift away from the original context to the broader one. Typically the system shows implicit context , lack of capacity , lack of ": null
    },
    {
        "extensibility": "extensibility"
    },
    {
        " , and lack of specificity and disambiguating capability . Within computer science, this problem is called ": null
    },
    {
        "naming collision": "naming collision"
    },
    {
        ". The story of the origination and expansion of the ": null
    },
    {
        "CODEN": "coden"
    },
    {
        " system provides a good case example in a recent-decades, technical-nomenclature context. The capitalization variations seen with ": null
    },
    {
        "specific designators": "proper nounspecific designators"
    },
    {
        " reveals an instance of this problem occurring in ": null
    },
    {
        "natural language": "natural language"
    },
    {
        "s, where the proper  noun/common  noun distinction must be dealt with. A universe in which every object had a UID would not need any namespaces, which is to say that it would constitute one gigantic namespace; but human minds could never keep track of, or semantically interrelate, so many UIDs.          ": null
    }
]