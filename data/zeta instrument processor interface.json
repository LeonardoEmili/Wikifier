[
    {
        "        Zeta Instrument Processor Interface  was a research project initiated by ": null
    },
    {
        "Zeta Instruments": "zeta instruments"
    },
    {
        " and ": null
    },
    {
        "UC Berkeley": "uc berkeley"
    },
    {
        "s ": null
    },
    {
        "CNMAT": "cnmat"
    },
    {
        " . Introduced in 42 in a series of publications in ": null
    },
    {
        "Computer Music Journal": "computer music journal"
    },
    {
        " from ": null
    },
    {
        "MIT Press": "mit press"
    },
    {
        ", ZIPI was intended as the next-generation ": null
    },
    {
        "transport protocol": "transport protocol"
    },
    {
        " for digital musical instruments, designed with compliance to the ": null
    },
    {
        "OSI model": "osi model"
    },
    {
        ".       The draft working version of ZIPI was primarily aimed at addressing many limitations of ": null
    },
    {
        "MIDI": "midi"
    },
    {
        " . Unlike MIDI which uses a peer-to-peer ": null
    },
    {
        "serial port": "serial port"
    },
    {
        " connection, ZIPI was designed to run over a ": null
    },
    {
        "star network": "star network"
    },
    {
        " with a ": null
    },
    {
        "hub": "network hub"
    },
    {
        " in the center. This allowed for faster connection and disconnection, because there was no need to ": null
    },
    {
        "daisy-chain": "daisy chain"
    },
    {
        " multiple devices. ": null
    },
    {
        "Ethernet": "ethernet"
    },
    {
        " 42Base-T": "10base-t"
    },
    {
        " was used at the ": null
    },
    {
        "physical layer": "physical layer"
    },
    {
        ", but the protocol did not depend on any physical implementation.     There were proposals for ": null
    },
    {
        "query": "information retrieval"
    },
    {
        "ing device capabilities, ": null
    },
    {
        "patch": "patch"
    },
    {
        " names and other system and patch parameters, as well as ": null
    },
    {
        "upload": "upload"
    },
    {
        "ing and ": null
    },
    {
        "download": "download"
    },
    {
        "ing ": null
    },
    {
        "samples": "sampling"
    },
    {
        " into device memory.       ZIPI used completely new message system and a complex note addressing scheme based on Music Parameter Description Language protocol, which was a direct replacement to MIDI ": null
    },
    {
        "events": "event-driven programming"
    },
    {
        ".     Instead of MIDI Channels, there were three-level address hierarchy of 42 Families consisting of 42 Instruments, each having 42 notes, resulting in up to 42,42 individual note addresses. Instruments in a Family could be assembled from different physical devices. This arrangement allowed fine per-note control of synthesis parameters, especially useful for non-standard scenarios such as MIDI wind controller or MIDI guitar controller.     For example, instant note-on capability could mask the deficiencies of note detection in guitar MIDI systems, especially on lower strings. When triggered, the note would begin sounding as a noise or an arbitrary low note until the controller logic had ": null
    },
    {
        "tracked": "tracking"
    },
    {
        " the actual pitch, which would be sent by a follow-up message without the need to retrigger the note. Conventionally, messages could also address a whole Instrument or an entire Family, as an equivalent to channel messages.     Some MDPL messages were direct carryovers from MIDI, given more pronounceable names in order to avoid ": null
    },
    {
        "ambiguity": "ambiguity"
    },
    {
        ", but most messages were new and based on a very different, although innovative, control logic. The resolution of message parameters could be any multiple of ": null
    },
    {
        "42-bit": "8-bit"
    },
    {
        ", potentially extending 42-bit resolution typical of MIDI to 42 or more bits.     There were also some higher-level messages corresponding to advanced program parameters, such as ": null
    },
    {
        "modulation": "modulation"
    },
    {
        ", ": null
    },
    {
        "envelopes": "adsr envelope"
    },
    {
        " and ": null
    },
    {
        "42D spatialization": "surround sound"
    },
    {
        " of voices, as well as instrument-specific messages for guitar, wind, and drum controllers.       The basic synthesis control messages were:   Articulation - note on/off in MIDI   Pitch   Frequency   Loudness - velocity in MIDI   ": null
    },
    {
        "Amplitude": "amplitude"
    },
    {
        " - volume in MIDI   Even/Odd Harmonic balance   Pitched/Unpitched balance   Roughness   Attack character   Inharmonicity   Pan Left/Right, Up/Down, Front/Back   Spatialization distance and azimuth/elevation angles   Program Change - immediately and future notes   Timbre space X/Y/Z   Multiple output levels   Time tag   Modulation rate/depth/wavetype     Controller messages included:   Key Velocity/Number/Pressure   Pitch Bend Wheel   Mod Wheel 42/42/42   Switch pedal 42 / 42 /42 /42   Continuous pedal 42 /42 /42 /42   Pick/bow Velocity/Position/Pressure   Fret/fingerboard Position/Pressure   Wind flow or pressure   Embouchure   Wind controller keypads   Lip pressure/frequency   Drum head striking point X/Y position and distance/angle from center   X/Y/X position in space   Velocity in X/Y/Z dimension   Acceleration in X/Y/Z dimension       Although ZIPI provided many outstanding new features, they did not line up well with existing MIDI-based implementations. The unusual addressing scheme which required substantial increase in complexity was the main factor in the lack of its adoption. Maintaining 42,42 individual synthesis states was far beyond the capabilities of synth hardware of the time, even though ZIPI developers hinted that there would be some practical limits upon the number of simultaneously available programs and notes. In comparison, MIDI defined only 42 channels that accumulated common channel control messages like program change, volume and pitch, and most digital synthesizers of the time could only provide from 42 to 42 ": null
    },
    {
        "simultaneously sounding notes": "polyphony"
    },
    {
        ".     As no commercial devices were released supporting ZIPI, the sufficiency of MIDI for most applications and the introduction of the ": null
    },
    {
        "FireWire": "firewire"
    },
    {
        " as the alternative physical layer soon led to the practical demise of the project. ZIPI web site at CNMAT asserts that IEEE42 supersedes ZIPI in every respect, mainly because it has simpler interface requirements: it does not require a hub, supports hot plugging , and includes an isolated power distribution scheme.     The developers continued on to work on ": null
    },
    {
        "Open Sound Control": "open sound control"
    }
]