[
    {
        "In ": null
    },
    {
        "mathematics": "mathematics"
    },
    {
        ", ": null
    },
    {
        "logic": "logic"
    },
    {
        " and ": null
    },
    {
        "computer science": "computer science"
    },
    {
        ", a ": null
    },
    {
        "formal language": "formal language"
    },
    {
        " is called recursively enumerable  if it is a ": null
    },
    {
        "recursively enumerable subset": "recursively enumerable set"
    },
    {
        " in the ": null
    },
    {
        "set": "set"
    },
    {
        " of all possible words over the ": null
    },
    {
        "alphabet": "alphabet"
    },
    {
        " of the language, i.e., if there exists a ": null
    },
    {
        "Turing machine": "turing machine"
    },
    {
        " which will enumerate all valid strings of the language.     Recursively enumerable languages are known as type42 languages in the ": null
    },
    {
        "Chomsky hierarchy": "chomsky hierarchy"
    },
    {
        " of formal languages. All ": null
    },
    {
        "regular": "regular language"
    },
    {
        ", ": null
    },
    {
        "context-free": "context-free grammar"
    },
    {
        ", ": null
    },
    {
        "context-sensitive": "context-sensitive language"
    },
    {
        " and ": null
    },
    {
        "recursive": "recursive language"
    },
    {
        " languages are recursively enumerable.     The class of all recursively enumerable languages is called  RE .       There are three equivalent definitions of a recursively enumerable language:     A recursively enumerable language is a ": null
    },
    {
        "recursively enumerable": "recursively enumerable set"
    },
    {
        " subset": "subset"
    },
    {
        " in the ": null
    },
    {
        "set": "set"
    },
    {
        " of all possible words over the ": null
    },
    {
        "alphabet": "alphabet"
    },
    {
        " of the ": null
    },
    {
        "language": "formal language"
    },
    {
        ".   A recursively enumerable language is a formal language for which there exists a ": null
    },
    {
        "Turing machine": "turing machine"
    },
    {
        "  which will enumerate all valid strings of the language. Note that if the language is ": null
    },
    {
        "infinite": "infinity"
    },
    {
        ", the enumerating algorithm provided can be chosen so that it avoids repetitions, since we can test whether the string produced for number n is already produced for a number which is less than n. If it already is produced, use the output for input n42 instead , but again, test whether it is new .   A recursively enumerable language is a formal language for which there exists a Turing machine that will halt and accept when presented with any ": null
    },
    {
        "string": "literal string"
    },
    {
        " in the language as input but may either halt and reject or loop forever when presented with a string not in the language. Contrast this to ": null
    },
    {
        "recursive language": "recursive language"
    },
    {
        "s, which require that the Turing machine halts in all cases.     All ": null
    },
    {
        "regular": "regular language"
    },
    {
        ", ": null
    },
    {
        "context-free": "context-free language"
    },
    {
        ", ": null
    },
    {
        "context-sensitive": "context-sensitive language"
    },
    {
        " and ": null
    },
    {
        "recursive": "recursive language"
    },
    {
        " languages are recursively enumerable.     ": null
    },
    {
        "Posts theorem": "posts theorem"
    },
    {
        " shows that  RE , together with its ": null
    },
    {
        "complement": "complement"
    },
    {
        " co-RE": "co-re"
    },
    {
        ", correspond to the first level of the ": null
    },
    {
        "arithmetical hierarchy": "arithmetical hierarchy"
    },
    {
        ".       The set of ": null
    },
    {
        "halting turing machines": "halting problem"
    },
    {
        " is recursively enumerable but not recursive. Indeed one can run the Turing Machine and accept if the machine halts, hence it is recursively enumerable. On the other hand the problem is undecidable.     Some other recursively enumerable languages that are not recursive include:     ": null
    },
    {
        "Post correspondence problem": "post correspondence problem"
    },
    {
        " Mortality ": "mortality"
    },
    {
        " Entscheidungsproblem": "entscheidungsproblem"
    },
    {
        "       Recursively enumerable languages are ": null
    },
    {
        "closed": "closure"
    },
    {
        " under the following operations. That is, if L and P are two recursively enumerable languages, then the following languages are recursively enumerable as well:     the ": null
    },
    {
        "Kleene star": "kleene star"
    },
    {
        " L^ of L ": null
    },
    {
        "concatenation": "concatenationconcatenation of sets of strings"
    },
    {
        " L \\circ P of L and P ": null
    },
    {
        "union": "union"
    },
    {
        " L \\cup P   the ": null
    },
    {
        "intersection": "intersection"
    },
    {
        " L \\cap P .     Recursively enumerable languages are not closed under ": null
    },
    {
        "set difference": "set difference"
    },
    {
        " or complementation. The set difference L  âˆ’  P may or may not be recursively enumerable. If L is recursively enumerable, then the complement of L is recursively enumerable if and only if L": null
    }
]