[
    {
        "In ": null
    },
    {
        "Boolean logic": "Boolean Logic"
    },
    {
        ", the majority function  is a ": null
    },
    {
        "function": "Function"
    },
    {
        " from n inputs to one output. The value of the operation is false when n/2 or more arguments are false, and true otherwise.   Alternatively, representing true values as 1 and false values as 0, we may use the formula     : \\operatorname \\left \\left \\lfloor \\frac + \\frac \\right \\rfloor.     The & minus;1/2 in the formula serves to break ties in favor of zeros when n is even. If the term & minus;1/2 is omitted, the formula can be used for a function that breaks ties in favor of ones.            A majority gate is a ": null
    },
    {
        "logical gate": "Logical Gate"
    },
    {
        " used in ": null
    },
    {
        "circuit complexity": "Circuit Complexity"
    },
    {
        " and other applications of ": null
    },
    {
        "Boolean circuits": "Boolean Circuits"
    },
    {
        ". A majority gate returns true if and only if more than 50% of its inputs are true.     For instance, in a ": null
    },
    {
        "full adder": "Adder"
    },
    {
        ", the carry output is found by applying a majority function to the three inputs, although frequently this part of the adder is broken down into several simpler logical gates.     Many systems have ": null
    },
    {
        "triple modular redundancy": "Triple Modular Redundancy"
    },
    {
        "; they use the majority function for ": null
    },
    {
        "majority logic decoding": "Majority Logic Decoding"
    },
    {
        " to implement ": null
    },
    {
        "error correction": "Error Correction"
    },
    {
        ".     A major result in ": null
    },
    {
        "circuit complexity": "Circuit Complexity"
    },
    {
        " asserts that the majority function cannot be computed by ": null
    },
    {
        "AC0 circuits": "Ac0"
    },
    {
        " of subexponential size.         For n 1 the median operator is just the unary identity operation x. For n 3 the ternary median operator can be expressed using conjunction and disjunction as xy + yz + zx. Remarkably this expression denotes the same operation independently of whether the symbol + is interpreted as ": null
    },
    {
        "inclusive or": "Disjunction"
    },
    {
        " or ": null
    },
    {
        "exclusive or": "Exclusive Or"
    },
    {
        ".     For an arbitrary n there exists a monotone formula for majority of size O.  This is proved using ": null
    },
    {
        "probabilistic method": "Probabilistic Method"
    },
    {
        ". Thus, this formula is non-constructive. However, one can obtain an explicit formula for majority of polynomial size using a ": null
    },
    {
        "sorting network": "Sorting Network"
    },
    {
        " of ": null
    },
    {
        "Ajtai": "Miklós Ajtai"
    },
    {
        ", ": null
    },
    {
        "Komlós": "János Komlós"
    },
    {
        ", and ": null
    },
    {
        "Szemerédi": "Endre Szemerédi"
    },
    {
        ".     The majority function produces 1 when more than half of the inputs are 1; it produces 0 when more than half the inputs are 0. Most applications deliberately force an odd number of inputs so they dont have to deal with the question of what happens when exactly half the inputs are 0 and exactly half the inputs are 1. The few systems that calculate the majority function on an even number of inputs are often biased towards 0 —they produce 0 when exactly half the inputs are 0 -- for example, a 4-input majority gate has a 0 output only when two or more 0s appear at its inputs.  In a few systems, a 4-input majority network randomly chooses 1 or 0 when exactly two 0s appear at its inputs.          For any x, y, and z, the ternary median operator & lang;x, y, z & rang; satisfies the following equations.   & lang;x, y, y & rang; y x, y, z & rang; & lang;z, x, y & rang;   & lang;x, y, z & rang; & lang;x, z, y & rang;   & lang; & lang;x, w, y & rang;, w, z & rang; & lang;x, w, & lang;y, w, z & rang; & rang;   An abstract system satisfying these as axioms is a ": null
    },
    {
        "median algebra": "Median Algebra"
    },
    {
        ".       ": null
    }
]