[
    {
        "     A quine is a ": null
    },
    {
        "computer program": "Computer Program"
    },
    {
        " which takes no input and produces a copy of its own ": null
    },
    {
        "source code": "Source Code"
    },
    {
        " as its only output. The standard terms for these programs in the ": null
    },
    {
        "computability theory": "Computability Theory"
    },
    {
        " and ": null
    },
    {
        "computer science": "Computer Science"
    },
    {
        " literature are self-replicating programs , self-reproducing programs , and self-copying programs .     A quine is a ": null
    },
    {
        "fixed point": "Fixed Point"
    },
    {
        " of an execution environment, when the execution environment is viewed as a ": null
    },
    {
        "function": "Function"
    },
    {
        " transforming programs into their outputs. Quines are possible in any ": null
    },
    {
        "Turing complete": "Turing Completeness"
    },
    {
        " programming language, as a direct consequence of ": null
    },
    {
        "Kleenes recursion theorem": "Kleenes Recursion Theorem"
    },
    {
        ". For amusement, programmers sometimes attempt to develop the shortest possible quine in any given ": null
    },
    {
        "programming language": "Programming Language"
    },
    {
        ".     The name quine was coined by ": null
    },
    {
        "Douglas Hofstadter": "Douglas Hofstadter"
    },
    {
        ", in his popular science book  GÃ¶del, Escher, Bach , in honor of philosopher ": null
    },
    {
        "Willard Van Orman Quine": "Willard Van Orman Quine"
    },
    {
        " , who made an extensive study of ": null
    },
    {
        "indirect self-reference": "Indirect Self-Reference"
    },
    {
        ", and in particular for the following paradox-producing expression, known as ": null
    },
    {
        "Quines paradox": "Quines Paradox"
    },
    {
        ":       Yields falsehood when preceded by its quotation yields falsehood when preceded by its quotation.       The idea of ": null
    },
    {
        "self-reproducing automata": "Von Neumann Universal Constructor"
    },
    {
        " came from the dawn of computing, if not before. ": null
    },
    {
        "John von Neumann": "John Von Neumann"
    },
    {
        " theorized about them in the 1940s. Later, ": null
    },
    {
        "Paul Bratley": "Paul Bratley"
    },
    {
        " and Jean Millos article Computer Recreations: Self-Reproducing Automata discussed them in 1972.    Bratley first became interested in self-reproducing programs after seeing the first known such program written in ": null
    },
    {
        "Atlas Autocode": "Atlas Autocode"
    },
    {
        " at Edinburgh in the 1960s by the ": null
    },
    {
        "University of Edinburgh": "University Of Edinburgh"
    },
    {
        " lecturer and researcher ": null
    },
    {
        "Hamish Dewar": "Hamish Dewar"
    },
    {
        ".     The download source requirement of the ": null
    },
    {
        "Affero General Public License": "Affero General Public License"
    },
    {
        " is based on the idea of a quine.         In general, the method used to create a quine in any programming language is to have, within the program, two pieces:  ": null
    },
    {
        "code": "Source Code"
    },
    {
        " used to do the actual printing and  ": null
    },
    {
        "data": "Data"
    },
    {
        " that represents the textual form of the code. The code functions by using the data to print the code , but it also uses the data, processed in a simple way, to print the textual representation of the data itself.     The following ": null
    },
    {
        "Java": "Java"
    },
    {
        " code demonstrates the basic structure of a quine.   public class Quine   ": null
    }
]