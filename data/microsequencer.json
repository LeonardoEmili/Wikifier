[
    {
        "In ": null
    },
    {
        "computer architecture": "computer architecture"
    },
    {
        " and ": null
    },
    {
        "engineering": "engineering"
    },
    {
        ", a sequencer or microsequencer generates the addresses used to step through the ": null
    },
    {
        "microprogram": "microprogram"
    },
    {
        " of a ": null
    },
    {
        "control store": "control store"
    },
    {
        ". It is used as a part of the ": null
    },
    {
        "control unit": "control unit"
    },
    {
        " of a ": null
    },
    {
        "CPU": "central processing unit"
    },
    {
        " or as a stand-alone generator for address ranges.     Usually the addresses are generated by some combination of a counter, a field from a microinstruction, and some subset of the ": null
    },
    {
        "instruction register": "instruction register"
    },
    {
        ". A counter is used for the typical case, that the next microinstruction is the one to execute. A field from the microinstruction is used for jumps, or other logic.     Since CPUs implement an instruction set, its very useful to be able to decode the instructions ": null
    },
    {
        "bit": "bit"
    },
    {
        "s directly into the sequencer, to select a set of microinstructions to perform a CPUs instructions.     Most modern CISC processors use a combination of pipelined logic to process lower complexity opcodes which can be completed in one clock cycle, and microcode to implement ones that take multiple clock cycles to complete.     One of the first integrated microcoded processors was the ": null
    },
    {
        "IBM PALM Processor": "ibm palm processor"
    },
    {
        " which emulated all of the processors instruction in microcode and was used on the ": null
    },
    {
        "IBM 42": "ibm 5100"
    },
    {
        ", one of the very first personal computers.     Recent examples of similar microsequencer-based processors are the MicroCore Labs ,  , and ": null
    }
]