[
    {
        "     A database is an organized collection of ": null
    },
    {
        "data": "data"
    },
    {
        ", generally stored and accessed electronically from a computer system. Where databases are more complex they are often developed using formal ": null
    },
    {
        "design and modeling": "design and modeling"
    },
    {
        " techniques.     The ": null
    },
    {
        "database management system": "database management system"
    },
    {
        " is the ": null
    },
    {
        "software": "software"
    },
    {
        " that interacts with ": null
    },
    {
        "end user": "end user"
    },
    {
        "s, applications, and the database itself to capture and analyze the data. The DBMS software additionally encompasses the core facilities provided to administer the database. The sum total of the database, the DBMS and the associated applications can be referred to as a database system . Often the term database is also used to loosely refer to any of the DBMS, the database system or an application associated with the database.     Computer scientists may classify database-management systems according to the ": null
    },
    {
        "database models": "database model"
    },
    {
        "that they support. ": null
    },
    {
        "Relational databases": "relational database"
    },
    {
        "became dominant in the 1980s. These model data as ": null
    },
    {
        "rows": "row"
    },
    {
        " and ": null
    },
    {
        "columns": "column"
    },
    {
        " in a series of ": null
    },
    {
        "tables": "table"
    },
    {
        ", and the vast majority use ": null
    },
    {
        "SQL": "sql"
    },
    {
        " for writing and querying data. In the 2000s, non-relational databases became popular, referred to as ": null
    },
    {
        "NoSQL": "nosql"
    },
    {
        " because they use different ": null
    },
    {
        "query language": "query language"
    },
    {
        "s.         Formally, a database refers to a set of related data and the way it is organized. Access to this data is usually provided by a database management system consisting of an integrated set of computer software that allows ": null
    },
    {
        "users": "user"
    },
    {
        " to interact with one or more databases and provides access to all of the data contained in the database . The DBMS provides various functions that allow entry, storage and retrieval of large quantities of information and provides ways to manage how that information is organized.     Because of the close relationship between them, the term database is often used casually to refer to both a database and the DBMS used to manipulate it.     Outside the world of professional ": null
    },
    {
        "information technology": "information technology"
    },
    {
        ", the term database is often used to refer to any collection of related data  as size and usage requirements typically necessitate use of a database management system.     Existing DBMSs provide various functions that allow management of a database and its data which can be classified into four main functional groups:     Data definition – Creation, modification and removal of definitions that define the organization of the data.   Update – Insertion, modification, and deletion of the actual data.    Retrieval – Providing information in a form directly usable or for further processing by other applications. The retrieved data may be made available in a form basically the same as it is stored in the database or in a new form obtained by altering or combining existing data from the database.    Administration – Registering and monitoring users, enforcing data security, monitoring performance, maintaining data integrity, dealing with concurrency control, and recovering information that has been corrupted by some event such as an unexpected system failure.      Both a database and its DBMS conform to the principles of a particular ": null
    },
    {
        "database model": "database model"
    },
    {
        ". Database system refers collectively to the database model, database management system, and database.     Physically, database ": null
    },
    {
        "servers": "server"
    },
    {
        " are dedicated computers that hold the actual databases and run only the DBMS and related software. Database servers are usually ": null
    },
    {
        "multiprocessor": "multiprocessor"
    },
    {
        " computers, with generous memory and ": null
    },
    {
        "RAID": "redundant array of independent disks"
    },
    {
        " disk arrays used for stable storage. RAID is used for recovery of data if any of the disks fail. Hardware database accelerators, connected to one or more servers via a high-speed channel, are also used in large volume transaction processing environments. DBMSs are found at the heart of most ": null
    },
    {
        "database application": "database application"
    },
    {
        "s. DBMSs may be built around a custom ": null
    },
    {
        "multitasking": "computer multitasking"
    },
    {
        " kernel": "kernel"
    },
    {
        " with built-in ": null
    },
    {
        "networking": "computer network"
    },
    {
        " support, but modern DBMSs typically rely on a standard ": null
    },
    {
        "operating system": "operating system"
    },
    {
        " to provide these functions.     Since DBMSs comprise a significant ": null
    },
    {
        "market": "market"
    },
    {
        ", computer and storage vendors often take into account DBMS requirements in their own development plans.     Databases and DBMSs can be categorized according to the database model that they support , the type of computer they run on , the ": null
    },
    {
        "query language": "query language"
    },
    {
        " used to access the database , and their internal engineering, which affects performance, ": null
    },
    {
        "scalability": "scalability"
    },
    {
        ", resilience, and security.         The sizes, capabilities, and performance of databases and their respective DBMSs have grown in orders of magnitude. These performance increases were enabled by the technology progress in the areas of ": null
    },
    {
        "processors": "central processing unit"
    },
    {
        ", ": null
    },
    {
        "computer memory": "computer memory"
    },
    {
        ", ": null
    },
    {
        "computer storage": "computer data storage"
    },
    {
        ", and ": null
    },
    {
        "computer network": "computer network"
    },
    {
        "s. The development of database technology can be divided into three eras based on data model or structure: ": null
    },
    {
        "navigational": "navigational database"
    },
    {
        ", SQL/": null
    },
    {
        "relational": "relational database"
    },
    {
        ", and post-relational.     The two main early navigational data models were the ": null
    },
    {
        "hierarchical model": "hierarchical database model"
    },
    {
        " and the ": null
    },
    {
        "CODASYL": "codasyl"
    },
    {
        " model      The ": null
    },
    {
        "relational model": "relational model"
    },
    {
        ", first proposed in 1970 by ": null
    },
    {
        "Edgar F. Codd": "edgar f. codd"
    },
    {
        ", departed from this tradition by insisting that applications should search for data by content, rather than by following links. The relational model employs sets of ledger-style tables, each used for a different type of entity. Only in the mid-1980s did computing hardware become powerful enough to allow the wide deployment of relational systems . By the early 1990s, however, relational systems dominated in all large-scale ": null
    },
    {
        "data processing": "data processing"
    },
    {
        " applications, and  they remain dominant: ": null
    },
    {
        "IBM DB2": "ibm db2"
    },
    {
        ", ": null
    },
    {
        "Oracle": "oracle database"
    },
    {
        ", ": null
    },
    {
        "MySQL": "mysql"
    },
    {
        ", and ": null
    },
    {
        "Microsoft SQL Server": "microsoft sql server"
    },
    {
        " are the most searched ": null
    },
    {
        "DBMS": "dbms"
    },
    {
        ".  The dominant database language, standardised SQL for the relational model, has influenced database languages for other data models.     ": null
    },
    {
        "Object databases": "object database"
    },
    {
        "were developed in the 1980s to overcome the inconvenience of ": null
    },
    {
        "object-relational impedance mismatch": "object-relational impedance mismatch"
    },
    {
        ", which led to the coining of the term post-relational and also the development of hybrid ": null
    },
    {
        "object-relational database": "object-relational database"
    },
    {
        "s.     The next generation of post-relational databases in the late 2000s became known as ": null
    },
    {
        "NoSQL": "nosql"
    },
    {
        " databases, introducing fast ": null
    },
    {
        "key-value stores": "key-value store"
    },
    {
        "and ": null
    },
    {
        "document-oriented database": "document-oriented database"
    },
    {
        "s. A competing next generation known as ": null
    },
    {
        "NewSQL": "newsql"
    },
    {
        " databases attempted new implementations that retained the relational/SQL model while aiming to match the high performance of NoSQL compared to commercially available relational DBMSs.               The introduction of the term database coincided with the availability of direct-access storage from the mid-1960s onwards. The term represented a contrast with the tape-based systems of the past, allowing shared interactive use rather than daily ": null
    },
    {
        "batch processing": "batch processing"
    },
    {
        ". The ": null
    },
    {
        "Oxford English Dictionary": "oxford english dictionary"
    },
    {
        " cites a 1962 report by the System Development Corporation of California as the first to use the term data-base in a specific technical sense.       As computers grew in speed and capability, a number of general-purpose database systems emerged; by the mid-1960s a number of such systems had come into commercial use. Interest in a standard began to grow, and ": null
    },
    {
        "Charles Bachman": "charles bachman"
    },
    {
        ", author of one such product, the ": null
    },
    {
        "Integrated Data Store": "integrated data store"
    },
    {
        " , founded the Database Task Group within ": null
    },
    {
        "CODASYL": "codasyl"
    },
    {
        ", the group responsible for the creation and standardization of ": null
    },
    {
        "COBOL": "cobol"
    },
    {
        ". In 1971, the Database Task Group delivered their standard, which generally became known as the CODASYL approach , and soon a number of commercial products based on this approach entered the market.     The CODASYL approach relied on the manual navigation of a linked data set which was formed into a large network. Applications could find records by one of three methods:   Use of a primary key    Navigating relationships from one record to another   Scanning all the records in a sequential order     Later systems added ": null
    },
    {
        "B-trees": "b-tree"
    },
    {
        "to provide alternate access paths. Many CODASYL databases also added a very straightforward query language. However, in the final tally, CODASYL was very complex and required significant training and effort to produce useful applications.     ": null
    },
    {
        "IBM": "international business machines"
    },
    {
        " also had their own DBMS in 1966, known as ": null
    },
    {
        "Information Management System": "ibm information management system"
    },
    {
        " . IMS was a development of software written for the ": null
    },
    {
        "Apollo program": "apollo program"
    },
    {
        " on the ": null
    },
    {
        "System/360": "system/360"
    },
    {
        ". IMS was generally similar in concept to CODASYL, but used a strict hierarchy for its model of data navigation instead of CODASYLs network model. Both concepts later became known as navigational databases due to the way data was accessed, and Bachmans 1973 ": null
    },
    {
        "Turing Award": "turing award"
    },
    {
        " presentation was The Programmer as Navigator. IMS is classified by IBM as a ": null
    },
    {
        "hierarchical database": "hierarchical database"
    },
    {
        ". IDMS and ": null
    },
    {
        "Cincom Systems": "cincom systems"
    },
    {
        " TOTAL": "cincom systems1970s"
    },
    {
        " database are classified as network databases. IMS remains in use .        ": null
    },
    {
        "Edgar F. Codd": "edgar f. codd"
    },
    {
        " worked at IBM in ": null
    },
    {
        "San Jose, California": "san jose, california"
    },
    {
        ", in one of their offshoot offices that was primarily involved in the development of ": null
    },
    {
        "hard disk": "hard disk"
    },
    {
        " systems. He was unhappy with the navigational model of the CODASYL approach, notably the lack of a search facility. In 1970, he wrote a number of papers that outlined a new approach to database construction that eventually culminated in the groundbreaking A Relational Model of Data for Large Shared Data Banks.     In this paper, he described a new system for storing and working with large databases. Instead of records being stored in some sort of ": null
    },
    {
        "linked list": "linked list"
    },
    {
        " of free-form records as in CODASYL, Codds idea was to use a ": null
    },
    {
        "table": "table"
    },
    {
        " of fixed-length records, with each table used for a different type of entity. A linked-list system would be very inefficient when storing sparse databases where some of the data for any one record could be left empty. The relational model solved this by splitting the data into a series of normalized tables , with optional elements being moved out of the main table to where they would take up room only if needed. Data may be freely inserted, deleted and edited in these tables, with the DBMS doing whatever maintenance needed to present a table view to the application/user.        \t   The relational model also allowed the content of the database to evolve without constant rewriting of links and pointers. The relational part comes from entities referencing other entities in what is known as one-to-many relationship, like a traditional hierarchical model, and many-to-many relationship, like a navigational model. Thus, a relational model can express both hierarchical and navigational models, as well as its native tabular model, allowing for pure or combined modeling in terms of these three models, as the application requires.     For instance, a common use of a database system is to track information about users, their name, login information, various addresses and phone numbers. In the navigational approach, all of this data would be placed in a single record, and unused items would simply not be placed in the database. In the relational approach, the data would be normalized into a user table, an address table and a phone number table . Records would be created in these optional tables only if the address or phone numbers were actually provided.     Linking the information back together is the key to this system. In the relational model, some bit of information was used as a ": null
    },
    {
        "key": "primary key"
    },
    {
        " , uniquely defining a particular record. When information was being collected about a user, information stored in the optional tables would be found by searching for this key. For instance, if the login name of a user is unique, addresses and phone numbers for that user would be recorded with the login name as its key. This simple re-linking of related data back into a single collection is something that traditional computer languages are not designed for.     Just as the navigational approach would require programs to loop in order to collect records, the relational approach would require loops to collect information about any one record. Codds suggestions was a set-oriented language, that would later spawn the ubiquitous ": null
    },
    {
        "SQL": "sql"
    },
    {
        ". Using a branch of mathematics known as ": null
    },
    {
        "tuple calculus": "tuple calculus"
    },
    {
        ", he demonstrated that such a system could support all the operations of normal databases as well as providing a simple system for finding and returning sets of data in a single operation.     Codds paper was picked up by two people at Berkeley, Eugene Wong and ": null
    },
    {
        "Michael Stonebraker": "michael stonebraker"
    },
    {
        ". They started a project known as ": null
    },
    {
        "INGRES": "ingres"
    },
    {
        " using funding that had already been allocated for a geographical database project and student programmers to produce code. Beginning in 1973, INGRES delivered its first test products which were generally ready for widespread use in 1979. INGRES was similar to ": null
    },
    {
        "System R": "ibm system r"
    },
    {
        " in a number of ways, including the use of a language for ": null
    },
    {
        "data access": "data access"
    },
    {
        ", known as ": null
    },
    {
        "QUEL": "quel query languages"
    },
    {
        ". Over time, INGRES moved to the emerging SQL standard.     IBM itself did one test implementation of the relational model, ": null
    },
    {
        "PRTV": "prtv"
    },
    {
        ", and a production one, ": null
    },
    {
        "Business System 12": "business system 12"
    },
    {
        ", both now discontinued. ": null
    },
    {
        "Honeywell": "honeywell"
    },
    {
        " wrote ": null
    },
    {
        "MRDS": "multics relational data store"
    },
    {
        " for ": null
    },
    {
        "Multics": "multics"
    },
    {
        ", and now there are two new implementations: ": null
    },
    {
        "Alphora Dataphor": "dataphor"
    },
    {
        " and ": null
    },
    {
        "Rel": "rel"
    },
    {
        ". Most other DBMS implementations usually called relational are actually SQL DBMSs.     In 1970, the University of Michigan began development of the ": null
    },
    {
        "MICRO Information Management System": "micro relational database management system"
    },
    {
        " based on D.L. Childs Set-Theoretic Data model. MICRO was used to manage very large data sets by the ": null
    },
    {
        "US Department of Labor": "us department of labor"
    },
    {
        ", the ": null
    },
    {
        "U.S. Environmental Protection Agency": "u.s. environmental protection agency"
    },
    {
        ", and researchers from the ": null
    },
    {
        "University of Alberta": "university of alberta"
    },
    {
        ", the ": null
    },
    {
        "University of Michigan": "university of michigan"
    },
    {
        ", and ": null
    },
    {
        "Wayne State University": "wayne state university"
    },
    {
        ". It ran on IBM mainframe computers using the ": null
    },
    {
        "Michigan Terminal System": "michigan terminal system"
    },
    {
        ". , M.A. Kahn, D.L. Rumelhart, and B.L. Bronson, October 1977, Institute of Labor and Industrial Relations , University of Michigan and Wayne State University The system remained in production until 1998.            In the 1970s and 1980s, attempts were made to build database systems with integrated hardware and software. The underlying philosophy was that such integration would provide higher performance at lower cost. Examples were IBM ": null
    },
    {
        "System/38": "system/38"
    },
    {
        ", the early offering of ": null
    },
    {
        "Teradata": "teradata"
    },
    {
        ", and the ": null
    },
    {
        "Britton Lee, Inc.": "britton lee, inc."
    },
    {
        " database machine.     Another approach to hardware support for database management was ": null
    },
    {
        "ICLs": "international computers limited"
    },
    {
        " CAFS": "content addressable file store"
    },
    {
        " accelerator, a hardware disk controller with programmable search capabilities. In the long term, these efforts were generally unsuccessful because specialized database machines could not keep pace with the rapid development and progress of general-purpose computers. Thus most database systems nowadays are software systems running on general-purpose hardware, using general-purpose computer data storage. However this idea is still pursued for certain applications by some companies like ": null
    },
    {
        "Netezza": "netezza"
    },
    {
        " and Oracle .       IBM started working on a prototype system loosely based on Codds concepts as  System R  in the early 1970s. The first version was ready in 1974/5, and work then started on multi-table systems in which the data could be split so that all of the data for a record did not have to be stored in a single large chunk . Subsequent multi-user versions were tested by customers in 1978 and 1979, by which time a standardized ": null
    },
    {
        "query language": "query language"
    },
    {
        " – SQL – had been added. Codds ideas were establishing themselves as both workable and superior to CODASYL, pushing IBM to develop a true production version of System R, known as SQL/DS, and, later, Database 2 .     ": null
    },
    {
        "Larry Ellisons": "larry ellison"
    },
    {
        "Oracle Database  started from a different chain, based on IBMs papers on System R. Though Oracle V1 implementations were completed in 1978, it wasnt until Oracle Version 2 when Ellison beat IBM to market in 1979.      Stonebraker went on to apply the lessons from INGRES to develop a new database, Postgres, which is now known as ": null
    },
    {
        "PostgreSQL": "postgresql"
    },
    {
        ". PostgreSQL is often used for global mission critical applications .     In Sweden, Codds paper was also read and ": null
    },
    {
        "Mimer SQL": "mimer sql"
    },
    {
        " was developed from the mid-1970s at ": null
    },
    {
        "Uppsala University": "uppsala university"
    },
    {
        ". In 1984, this project was consolidated into an independent enterprise.     Another data model, the ": null
    },
    {
        "entity–relationship model": "entity–relationship model"
    },
    {
        ", emerged in 1976 and gained popularity for ": null
    },
    {
        "database design": "database design"
    },
    {
        " as it emphasized a more familiar description than the earlier relational model. Later on, entity–relationship constructs were retrofitted as a ": null
    },
    {
        "data modeling": "data modeling"
    },
    {
        " construct for the relational model, and the difference between the two have become irrelevant.       The 1980s ushered in the age of ": null
    },
    {
        "desktop computing": "desktop computer"
    },
    {
        ". The new computers empowered their users with spreadsheets like ": null
    },
    {
        "Lotus 1-2-3": "lotus 1-2-3"
    },
    {
        " and database software like ": null
    },
    {
        "dBASE": "dbase"
    },
    {
        ". The dBASE product was lightweight and easy for any computer user to understand out of the box. ": null
    },
    {
        "C. Wayne Ratliff": "c. wayne ratliff"
    },
    {
        ", the creator of dBASE, stated: dBASE was different from programs like BASIC, C, FORTRAN, and COBOL in that a lot of the dirty work had already been done. The data manipulation is done by dBASE instead of by the user, so the user can concentrate on what he is doing, rather than having to mess with the dirty details of opening, reading, and closing files, and managing space allocation. . The FoxPro History. Retrieved on 2013-07-12. dBASE was one of the top selling software titles in the 1980s and early 1990s.       The 1990s, along with a rise in ": null
    },
    {
        "object-oriented programming": "object-oriented programming"
    },
    {
        ", saw a growth in how data in various databases were handled. Programmers and designers began to treat the data in their databases as ": null
    },
    {
        "objects": "object"
    },
    {
        ". That is to say that if a persons data were in a database, that persons attributes, such as their address, phone number, and age, were now considered to belong to that person instead of being extraneous data. This allows for relations between data to be relations to objects and their ": null
    },
    {
        "attributes": "property"
    },
    {
        " and not to individual fields. Development of an object-oriented DBMS; Portland, Oregon, United States; Pages: 472–482; 1986;  The term ": null
    },
    {
        "object-relational impedance mismatch": "object-relational impedance mismatch"
    },
    {
        " described the inconvenience of translating between programmed objects and database tables. ": null
    },
    {
        "Object databases": "object database"
    },
    {
        "and ": null
    },
    {
        "object-relational databases": "object-relational database"
    },
    {
        "attempt to solve this problem by providing an object-oriented language that programmers can use as alternative to purely relational SQL. On the programming side, libraries known as ": null
    },
    {
        "object-relational mappings": "object-relational mapping"
    },
    {
        " attempt to solve the same problem.            ": null
    },
    {
        "XML databases": "xml databases"
    },
    {
        " are a type of structured document-oriented database that allows querying based on ": null
    },
    {
        "XML": "xml"
    },
    {
        " document attributes. XML databases are mostly used in applications where the data is conveniently viewed as a collection of documents, with a structure that can vary from the very flexible to the highly rigid: examples include scientific articles, patents, tax filings, and personnel records.     ": null
    },
    {
        "NoSQL": "nosql"
    },
    {
        " databases are often very fast, do not require fixed table schemas, avoid join operations by storing ": null
    },
    {
        "denormalized": "denormalization"
    },
    {
        " data, and are designed to ": null
    },
    {
        "scale horizontally": "horizontal scaling"
    },
    {
        ".     In recent years, there has been a strong demand for massively distributed databases with high partition tolerance, but according to the ": null
    },
    {
        "CAP theorem": "cap theorem"
    },
    {
        " it is impossible for a ": null
    },
    {
        "distributed system": "distributed computing"
    },
    {
        " to simultaneously provide ": null
    },
    {
        "consistency": "consistency model"
    },
    {
        ", availability, and partition tolerance guarantees. A distributed system can satisfy any two of these guarantees at the same time, but not all three. For that reason, many NoSQL databases are using what is called ": null
    },
    {
        "eventual consistency": "eventual consistency"
    },
    {
        " to provide both availability and partition tolerance guarantees with a reduced level of data consistency.     ": null
    },
    {
        "NewSQL": "newsql"
    },
    {
        " is a class of modern relational databases that aims to provide the same scalable performance of NoSQL systems for online transaction processing workloads while still using SQL and maintaining the ": null
    },
    {
        "ACID": "acid"
    },
    {
        " guarantees of a traditional database system.            Databases are used to support internal operations of organizations and to underpin online interactions with customers and suppliers .     Databases are used to hold administrative information and more specialized data, such as engineering data or economic models. Examples include computerized ": null
    },
    {
        "library": "library"
    },
    {
        " systems, ": null
    },
    {
        "flight reservation system": "flight reservation system"
    },
    {
        "s, computerized ": null
    },
    {
        "parts inventory system": "parts inventory system"
    },
    {
        "s, and many ": null
    },
    {
        "content management systems": "content management system"
    },
    {
        "that store ": null
    },
    {
        "websites": "website"
    },
    {
        "as collections of webpages in a database.       One way to classify databases involves the type of their contents, for example: ": null
    },
    {
        "bibliographic": "bibliographic database"
    },
    {
        ", document-text, statistical, or multimedia objects. Another way is by their application area, for example: accounting, music compositions, movies, banking, manufacturing, or insurance. A third way is by some technical aspect, such as the database structure or interface type. This section lists a few of the adjectives used to characterize different kinds of databases.     An ": null
    },
    {
        "in-memory database": "in-memory database"
    },
    {
        " is a database that primarily resides in ": null
    },
    {
        "main memory": "main memory"
    },
    {
        ", but is typically backed-up by non-volatile computer data storage. Main memory databases are faster than disk databases, and so are often used where response time is critical, such as in telecommunications network equipment.   An ": null
    },
    {
        "active database": "active database"
    },
    {
        " includes an event-driven architecture which can respond to conditions both inside and outside the database. Possible uses include security monitoring, alerting, statistics gathering and authorization. Many databases provide active database features in the form of ": null
    },
    {
        "database trigger": "database trigger"
    },
    {
        "s.   A ": null
    },
    {
        "cloud database": "cloud database"
    },
    {
        " relies on ": null
    },
    {
        "cloud technology": "cloud computing"
    },
    {
        ". Both the database and most of its DBMS reside remotely, in the cloud , while its applications are both developed by programmers and later maintained and used by end-users through a ": null
    },
    {
        "web browser": "web browser"
    },
    {
        " and ": null
    },
    {
        "Open API": "open api"
    },
    {
        "s.   ": null
    },
    {
        "Data warehouses": "data warehouse"
    },
    {
        "archive data from operational databases and often from external sources such as market research firms. The warehouse becomes the central source of data for use by managers and other end-users who may not have access to operational data. For example, sales data might be aggregated to weekly totals and converted from internal product codes to use ": null
    },
    {
        "UPCs": "universal product code"
    },
    {
        " so that they can be compared with ": null
    },
    {
        "ACNielsen": "acnielsen"
    },
    {
        " data. Some basic and essential components of data warehousing include extracting, analyzing, and ": null
    },
    {
        "mining": "data mining"
    },
    {
        " data, transforming, loading, and managing data so as to make them available for further use.   A ": null
    },
    {
        "deductive database": "deductive database"
    },
    {
        " combines ": null
    },
    {
        "logic programming": "logic programming"
    },
    {
        " with a relational database.   A ": null
    },
    {
        "distributed database": "distributed database"
    },
    {
        " is one in which both the data and the DBMS span multiple computers.   A ": null
    },
    {
        "document-oriented database": "document-oriented database"
    },
    {
        " is designed for storing, retrieving, and managing document-oriented, or semi structured, information. Document-oriented databases are one of the main categories of NoSQL databases.   An ": null
    },
    {
        "embedded database": "embedded database"
    },
    {
        " system is a DBMS which is tightly integrated with an application software that requires access to stored data in such a way that the DBMS is hidden from the applications end-users and requires little or no ongoing maintenance. Graves, Steve.  , Embedded Computing Design magazine, January 2007. Retrieved on August 13, 2008.   End-user databases consist of data developed by individual end-users. Examples of these are collections of documents, spreadsheets, presentations, multimedia, and other files. Several products exist to support such databases. Some of them are much simpler than full-fledged DBMSs, with more elementary DBMS functionality.   A ": null
    },
    {
        "federated database system": "federated database system"
    },
    {
        " comprises several distinct databases, each with its own DBMS. It is handled as a single database by a federated database management system , which transparently integrates multiple autonomous DBMSs, possibly of different types , and provides them with an integrated conceptual view.   Sometimes the term multi-database is used as a synonym to federated database, though it may refer to a less integrated group of databases that cooperate in a single application. In this case, typically ": null
    },
    {
        "middleware": "middleware"
    },
    {
        " is used for distribution, which typically includes an atomic commit protocol , e.g., the ": null
    },
    {
        "two-phase commit protocol": "two-phase commit protocol"
    },
    {
        ", to allow ": null
    },
    {
        "distributed transactions": "distributed transaction"
    },
    {
        " across the participating databases.   A ": null
    },
    {
        "graph database": "graph database"
    },
    {
        " is a kind of NoSQL database that uses ": null
    },
    {
        "graph structures": "graph"
    },
    {
        " with nodes, edges, and properties to represent and store information. General graph databases that can store any graph are distinct from specialized graph databases such as ": null
    },
    {
        "triplestores": "triplestore"
    },
    {
        "and ": null
    },
    {
        "network databases": "network database model"
    },
    {
        ".   An ": null
    },
    {
        "array DBMS": "array dbms"
    },
    {
        " is a kind of NoSQL DBMS that allows modeling, storage, and retrieval of multi-dimensional ": null
    },
    {
        "arrays": "array data structure"
    },
    {
        " such as satellite images and climate simulation output.   In a ": null
    },
    {
        "hypertext": "hypertext"
    },
    {
        " or ": null
    },
    {
        "hypermedia": "hypermedia"
    },
    {
        " database, any word or a piece of text representing an object, e.g., another piece of text, an article, a picture, or a film, can be ": null
    },
    {
        "hyperlink": "hyperlink"
    },
    {
        "ed to that object. Hypertext databases are particularly useful for organizing large amounts of disparate information. For example, they are useful for organizing ": null
    },
    {
        "online encyclopedia": "online encyclopedia"
    },
    {
        "s, where users can conveniently jump around the text. The ": null
    },
    {
        "World Wide Web": "world wide web"
    },
    {
        " is thus a large distributed hypertext database.   A ": null
    },
    {
        "knowledge base": "knowledge base"
    },
    {
        "  is a special kind of database for ": null
    },
    {
        "knowledge management": "knowledge management"
    },
    {
        ", providing the means for the computerized collection, organization, and ": null
    },
    {
        "retrieval": "information retrieval"
    },
    {
        " of ": null
    },
    {
        "knowledge": "knowledge"
    },
    {
        ". Also a collection of data representing problems with their solutions and related experiences.     A ": null
    },
    {
        "mobile database": "mobile database"
    },
    {
        " can be carried on or synchronized from a mobile computing device.   ": null
    },
    {
        "Operational databases": "operational database"
    },
    {
        "store detailed data about the operations of an organization. They typically process relatively high volumes of updates using ": null
    },
    {
        "transactions": "transaction"
    },
    {
        ". Examples include ": null
    },
    {
        "customer databases": "customer relationship management"
    },
    {
        " that record contact, credit, and demographic information about a businesss customers, personnel databases that hold information such as salary, benefits, skills data about employees, ": null
    },
    {
        "enterprise resource planning": "enterprise resource planning"
    },
    {
        " systems that record details about product components, parts inventory, and financial databases that keep track of the organizations money, accounting and financial dealings.   A ": null
    },
    {
        "parallel database": "parallel database"
    },
    {
        " seeks to improve performance through ": null
    },
    {
        "parallelization": "parallel computing"
    },
    {
        " for tasks such as loading data, building indexes and evaluating queries.     ::The major parallel DBMS architectures which are induced by the underlying ": null
    },
    {
        "hardware": "computer hardware"
    },
    {
        " architecture are:   ::  Shared memory architecture , where multiple processors share the main memory space, as well as other data storage.   :: Shared disk architecture, where each processing unit has its own main memory, but all units share the other storage.   ::  Shared nothing architecture , where each processing unit has its own main memory and other storage.     ": null
    },
    {
        "Probabilistic databases": "probabilistic database"
    },
    {
        "employ ": null
    },
    {
        "fuzzy logic": "fuzzy logic"
    },
    {
        " to draw inferences from imprecise data.   ": null
    },
    {
        "Real-time databases": "real-time database"
    },
    {
        "process transactions fast enough for the result to come back and be acted on right away.   A ": null
    },
    {
        "spatial database": "spatial database"
    },
    {
        " can store the data with multidimensional features. The queries on such data include location-based queries, like Where is the closest hotel in my area? .   A ": null
    },
    {
        "temporal database": "temporal database"
    },
    {
        " has built-in time aspects, for example a temporal data model and a temporal version of SQL. More specifically the temporal aspects usually include valid-time and transaction-time.   A ": null
    },
    {
        "terminology-oriented database": "terminology-oriented database"
    },
    {
        " builds upon an ": null
    },
    {
        "object-oriented database": "object-oriented database"
    },
    {
        ", often customized for a specific field.   An ": null
    },
    {
        "unstructured data": "unstructured data"
    },
    {
        " database is intended to store in a manageable and protected way diverse objects that do not fit naturally and conveniently in common databases. It may include email messages, documents, journals, multimedia objects, etc. The name may be misleading since some objects can be highly structured. However, the entire possible object collection does not fit into a predefined structured framework. Most established DBMSs now support unstructured data in various ways, and new dedicated DBMSs are emerging.             Connolly and Begg define Database Management System as a software system that enables users to define, create, maintain and control access to the database .     The DBMS acronym is sometime extended to indicated the underlying ": null
    },
    {
        "database model": "database model"
    },
    {
        ", with RDBMS for ": null
    },
    {
        "relational": "relational model"
    },
    {
        ", OODBMS or ORDBMS for the ": null
    },
    {
        "object model": "object model"
    },
    {
        " and ORDBMS for ": null
    },
    {
        "Object-Relational": "object-relational_database"
    },
    {
        ". Other extensions can indicate some other characteristic, such as DDBMS for a distributed database management systems.     The functionality provided by a DBMS can vary enormously. The core functionality is the storage, retrieval and update of data. ": null
    },
    {
        "Codd": "edgar f. codd"
    },
    {
        " proposed the following functions and services a fully-fledged general purpose DBMS should provide:  The core part of the DBMS interacting between the database and the application interface sometimes referred to as the ": null
    },
    {
        "database engine": "database engine"
    },
    {
        ".     Often DBMSs will have configuration parameters that can be statically and dynamically tuned, for example the maximum amount of main memory on a server the database can use. The trend is to minimise the amount of manual configuration, and for cases such as ": null
    },
    {
        "embedded databases": "embedded database"
    },
    {
        "the need to target zero-administration is paramount.     The large major enterprise DBMSs have tended to increase in size and functionality and can have involved thousands of human years of development effort through their lifetime.     Early multi-user DBMS typically only allowed for the application to reside on the same computer with access via ": null
    },
    {
        "terminals": "computer terminal"
    },
    {
        " or terminal emulation software. The ": null
    },
    {
        "client–server architecture": "client–server architecture"
    },
    {
        " was a development where the application resided on a client desktop and the database on a server allowing the processing to be distributed. This evolved into a ": null
    },
    {
        "multitier architecture": "multitier architecture"
    },
    {
        " incorporating ": null
    },
    {
        "application servers": "application server"
    },
    {
        "and ": null
    },
    {
        "web servers": "web server"
    },
    {
        "with the end user interface via a ": null
    },
    {
        "web browser": "web browser"
    },
    {
        " with the database only directly connected to the adjacent tier.     A general-purpose DBMS will provide public ": null
    },
    {
        "application programming interfaces": "application programming interface"
    },
    {
        " and optionally a processor for ": null
    },
    {
        "database languages": "database language"
    },
    {
        "such as ": null
    },
    {
        "SQL": "sql"
    },
    {
        " to allow applications to be written to interact with the database. A special purpose DBMS may use a private API and be specifically customised and linked to a single application. For example, an ": null
    },
    {
        "email": "email"
    },
    {
        " system performing many of the functions of a general-purpose DBMS such as message insertion, message deletion, attachment handling, blocklist lookup, associating messages an email address and so forth however these functions are limited to what is required to handle email.         External interaction with the database will be via an application program that interfaces with the DBMS. This can range from a ": null
    },
    {
        "database tool": "comparison of database tools"
    },
    {
        " that allows users to execute SQL queries textually or graphically, to a web site that happens to use a database to store and search information.         A ": null
    },
    {
        "programmer": "programmer"
    },
    {
        " will ": null
    },
    {
        "code": "computer programming"
    },
    {
        " interactions to the database  via an ": null
    },
    {
        "application program interface": "application program interface"
    },
    {
        " or via a ": null
    },
    {
        "database language": "database language"
    },
    {
        ". The particular API or language chosen will need to be supported by DBMS, possible indirectly via a ": null
    },
    {
        "pre-processor": "pre-processor"
    },
    {
        " or a bridging API. Some APIs aim to be database independent, ": null
    },
    {
        "ODBC": "odbc"
    },
    {
        " being a commonly known example. Other common APIs include ": null
    },
    {
        "JDBC": "jdbc"
    },
    {
        " and ": null
    },
    {
        "ADO.NET": "ado.net"
    },
    {
        ".         Database languages are special-purpose languages, which allow one or more of the following tasks, sometimes distinguished as ": null
    },
    {
        "sublanguage": "sublanguage"
    },
    {
        "s:     ": null
    },
    {
        "Data control language": "data control language"
    },
    {
        " – controls access to data;   ": null
    },
    {
        "Data definition language": "data definition language"
    },
    {
        " – defines data types such as creating, altering, or dropping tables and the relationships among them;   ": null
    },
    {
        "Data manipulation language": "data manipulation language"
    },
    {
        " – performs tasks such as inserting, updating, or deleting data occurrences;   ": null
    },
    {
        "Data query language": "data query language"
    },
    {
        " – allows searching for information and computing derived information.     Database languages are specific to a particular data model. Notable examples include:     SQL combines the roles of data definition, data manipulation, and query in a single language. It was one of the first commercial languages for the relational model, although it departs in some respects from ": null
    },
    {
        "the relational model as described by Codd": "codds 12 rules"
    },
    {
        " . SQL became a standard of the ": null
    },
    {
        "American National Standards Institute": "american national standards institute"
    },
    {
        " in 1986, and of the ": null
    },
    {
        "International Organization for Standardization": "international organization for standardization"
    },
    {
        " in 1987. The standards have been regularly enhanced since and is supported by all mainstream commercial relational DBMSs.    ": null
    },
    {
        "OQL": "oql"
    },
    {
        " is an object model language standard . It has influenced the design of some of the newer query languages like ": null
    },
    {
        "JDOQL": "jdoql"
    },
    {
        " and ": null
    },
    {
        "EJB QL": "ejb ql"
    },
    {
        ".   ": null
    },
    {
        "XQuery": "xquery"
    },
    {
        " is a standard XML query language implemented by XML database systems such as ": null
    },
    {
        "MarkLogic": "marklogic"
    },
    {
        " and ": null
    },
    {
        "eXist": "exist"
    },
    {
        ", by relational databases with XML capability such as Oracle and DB2, and also by in-memory XML processors such as ": null
    },
    {
        "Saxon": "saxon xslt"
    },
    {
        ".   ": null
    },
    {
        "SQL/XML": "sql/xml"
    },
    {
        " combines ": null
    },
    {
        "XQuery": "xquery"
    },
    {
        " with SQL.     A database language may also incorporate features like:   DBMS-specific configuration and storage engine management   Computations to modify query results, like counting, summing, averaging, sorting, grouping, and cross-referencing   Constraint enforcement   Application programming interface version of the query language, for programmer convenience            Database storage is the container of the physical materialization of a database. It comprises the internal level in the database architecture. It also contains all the information needed  to reconstruct the conceptual level and external level from the internal level when needed. Putting data into permanent storage is generally the responsibility of the ": null
    },
    {
        "database engine": "database engine"
    },
    {
        " a.k.a. storage engine . Though typically accessed by a DBMS through the underlying operating system , storage properties and configuration setting are extremely important for the efficient operation of the DBMS, and thus are closely maintained by database administrators. A DBMS, while in operation, always has its database residing in several types of storage . The database data and the additional needed information, possibly in very large amounts, are coded into bits. Data typically reside in the storage in structures that look completely different from the way the data look in the conceptual and external levels, but in ways that attempt to optimize these levels reconstruction when needed by users and programs, as well as for computing additional types of needed information from the data .     Some DBMSs support specifying which ": null
    },
    {
        "character encoding": "character encoding"
    },
    {
        " was used to store data, so multiple encodings can be used in the same database.     Various low-level ": null
    },
    {
        "database storage structures": "database storage structures"
    },
    {
        " are used by the storage engine to serialize the data model so it can be written to the medium of choice. Techniques such as indexing may be used to improve performance. Conventional storage is row-oriented, but there are also ": null
    },
    {
        "column-oriented": "column-oriented dbms"
    },
    {
        " and ": null
    },
    {
        "correlation database": "correlation database"
    },
    {
        "s.            Often storage redundancy is employed to increase performance. A common example is storing materialized views, which consist of frequently needed external views or query results. Storing such views saves the expensive computing of them each time they are needed. The downsides of materialized views are the overhead incurred when updating them to keep them synchronized with their original updated database data, and the cost of storage redundancy.            Occasionally a database employs storage redundancy by database objects replication to increase data availability . Updates of a replicated object need to be synchronized across the object copies. In many cases, the entire database is replicated.               ": null
    },
    {
        "Database security": "database security"
    },
    {
        " deals with all various aspects of protecting the database content, its owners, and its users. It ranges from protection from intentional unauthorized database uses to unintentional database accesses by unauthorized entities .     Database access control deals with controlling who is allowed to access what information in the database. The information may comprise specific database objects , certain computations over certain objects , or using specific access paths to the former . Database access controls are set by special authorized personnel that uses dedicated protected security DBMS interfaces.     This may be managed directly on an individual basis, or by the assignment of individuals and ": null
    },
    {
        "privileges": "privilege"
    },
    {
        " to groups, or through the assignment of individuals and groups to roles which are then granted entitlements. Data security prevents unauthorized users from viewing or updating the database. Using passwords, users are allowed access to the entire database or subsets of it called subschemas . For example, an employee database can contain all the data about an individual employee, but one group of users may be authorized to view only payroll data, while others are allowed access to only work history and medical data. If the DBMS provides a way to interactively enter and update the database, as well as interrogate it, this capability allows for managing personal databases.     ": null
    },
    {
        "Data security": "data security"
    },
    {
        " in general deals with protecting specific chunks of data, both physically , or the interpretation of them, or parts of them to meaningful information .     Change and access logging records who accessed which attributes, what was changed, and when it was changed. Logging services allow for a forensic ": null
    },
    {
        "database audit": "database audit"
    },
    {
        " later by keeping a record of access occurrences and changes. Sometimes application-level code is used to record changes rather than leaving this to the database. Monitoring can be set up to attempt to detect security breaches.            ": null
    },
    {
        "Database transactions": "database transactions"
    },
    {
        " can be used to introduce some level of ": null
    },
    {
        "fault tolerance": "fault tolerance"
    },
    {
        " and ": null
    },
    {
        "data integrity": "data integrity"
    },
    {
        " after recovery from a ": null
    },
    {
        "crash": "crash"
    },
    {
        ". A database transaction is a unit of work, typically encapsulating a number of operations over a database , an abstraction supported in database and also other systems. Each transaction has well defined boundaries in terms of which program/code executions are included in that transaction .     The acronym ": null
    },
    {
        "ACID": "acid"
    },
    {
        " describes some ideal properties of a database transaction: ": null
    },
    {
        "atomicity": "atomicity"
    },
    {
        ", ": null
    },
    {
        "consistency": "consistency"
    },
    {
        ", ": null
    },
    {
        "isolation": "isolation"
    },
    {
        ", and ": null
    },
    {
        "durability": "durability"
    },
    {
        ".            A database built with one DBMS is not portable to another DBMS . However, in some situations, it is desirable to migrate a database from one DBMS to another. The reasons are primarily economical , functional, and operational . The migration involves the databases transformation from one DBMS type to another. The transformation should maintain the database related application intact. Thus, the databases conceptual and external architectural levels should be maintained in the transformation. It may be desired that also some aspects of the architecture internal level are maintained. A complex or large database migration may be a complicated and costly project by itself, which should be factored into the decision to migrate. This in spite of the fact that tools may exist to help migration between specific DBMSs. Typically, a DBMS vendor provides tools to help importing databases from other popular DBMSs.            After designing a database for an application, the next stage is building the database. Typically, an appropriate general-purpose DBMS can be selected to be used for this purpose. A DBMS provides the needed ": null
    },
    {
        "user interfaces": "user interface"
    },
    {
        "to be used by database administrators to define the needed applications data structures within the DBMSs respective data model. Other user interfaces are used to select needed DBMS parameters .     When the database is ready , it is typically populated with initial applications data before making it operational. In some cases, the database becomes operational while empty of application data, and data are accumulated during its operation.     After the database is created, initialised and populated it needs to be maintained. Various database parameters may need changing and the database may need to be tuned  for better performance; applications data structures may be changed or added, new related application programs may be written to add to the applications functionality, etc.          Sometimes it is desired to bring a database back to a previous state . To achieve this, a backup operation is done occasionally or continuously, where each desired database state is kept within dedicated backup files . When it is decided by a database administrator to bring the database back to this state , these files are used to restore that state.       Static analysis techniques for software verification can be applied also in the scenario of query languages. In particular, the ": null
    },
    {
        "Abstract interpretation": "abstract interpretation"
    },
    {
        " framework has been extended to the field of query languages for relational databases as a way to support sound approximation techniques. The semantics of query languages can be tuned according to suitable abstractions of the concrete domain of data. The abstraction of relational database system has many interesting applications, in particular, for security purposes, such as fine grained access control, watermarking, etc.         Other DBMS features might include:   ": null
    },
    {
        "Database logs": "database log"
    },
    {
        "– This helps in keeping a history of the executed functions.   Graphics component for producing graphs and charts, especially in a data warehouse system.   ": null
    },
    {
        "Query optimizer": "query optimizer"
    },
    {
        " – Performs query optimization on every query to choose an efficient  query plan  to be executed to compute the query result. May be specific to a particular storage engine.   Tools or hooks for database design, application programming, application program maintenance, database performance analysis and monitoring, database configuration monitoring, DBMS hardware configuration and related database mapping , storage allocation and database layout monitoring, storage migration, etc.     Increasingly, there are calls for a single system that incorporates all of these core functionalities into the same build, test, and deployment framework for database management and source control. Borrowing from other developments in the software industry, some market such offerings as ": null
    },
    {
        "DevOps": "devops"
    },
    {
        " for database .                The first task of a database designer is to produce a ": null
    },
    {
        "conceptual data model": "conceptual data model"
    },
    {
        " that reflects the structure of the information to be held in the database. A common approach to this is to develop an ": null
    },
    {
        "entity-relationship model": "entity-relationship model"
    },
    {
        ", often with the aid of drawing tools. Another popular approach is the ": null
    },
    {
        "Unified Modeling Language": "unified modeling language"
    },
    {
        ". A successful data model will accurately reflect the possible state of the external world being modeled: for example, if people can have more than one phone number, it will allow this information to be captured. Designing a good conceptual data model requires a good understanding of the application domain; it typically involves asking deep questions about the things of interest to an organization, like can a customer also be a supplier? , or if a product is sold with two different forms of packaging, are those the same product or different products? , or if a plane flies from New York to Dubai via Frankfurt, is that one flight or two ? . The answers to these questions establish definitions of the terminology used for entities and their relationships and attributes.     Producing the conceptual data model sometimes involves input from ": null
    },
    {
        "business processes": "business process modeling"
    },
    {
        ", or the analysis of ": null
    },
    {
        "workflow": "workflow"
    },
    {
        " in the organization. This can help to establish what information is needed in the database, and what can be left out. For example, it can help when deciding whether the database needs to hold historic data as well as current data.     Having produced a conceptual data model that users are happy with, the next stage is to translate this into a ": null
    },
    {
        "schema": "database schema"
    },
    {
        " that implements the relevant data structures within the database. This process is often called logical database design, and the output is a ": null
    },
    {
        "logical data model": "logical data model"
    },
    {
        " expressed in the form of a schema. Whereas the conceptual data model is independent of the choice of database technology, the logical data model will be expressed in terms of a particular database model supported by the chosen DBMS. .     The most popular database model for general-purpose databases is the relational model, or more precisely, the relational model as represented by the SQL language. The process of creating a logical database design using this model uses a methodical approach known as ": null
    },
    {
        "normalization": "database normalization"
    },
    {
        ". The goal of normalization is to ensure that each elementary fact is only recorded in one place, so that insertions, updates, and deletions automatically maintain consistency.     The final stage of database design is to make the decisions that affect performance, scalability, recovery, security, and the like, which depend on the particular DBMS. This is often called physical database design, and the output is the ": null
    },
    {
        "physical data model": "physical data model"
    },
    {
        ". A key goal during this stage is ": null
    },
    {
        "data independence": "data independence"
    },
    {
        ", meaning that the decisions made for performance optimization purposes should be invisible to end-users and applications. There are two types of data independence: Physical data independence and logical data independence. Physical design is driven mainly by performance requirements, and requires a good knowledge of the expected workload and access patterns, and a deep understanding of the features offered by the chosen DBMS.     Another aspect of physical database design is security. It involves both defining ": null
    },
    {
        "access control": "access control"
    },
    {
        " to database objects as well as defining security levels and methods for the data itself.               A database model is a type of data model that determines the logical structure of a database and fundamentally determines in which manner ": null
    },
    {
        "data": "data"
    },
    {
        " can be stored, organized, and manipulated. The most popular example of a database model is the relational model , which uses a table-based format.     Common logical data models for databases include:   ": null
    },
    {
        "Navigational databases": "navigational database"
    },
    {
        "  Hierarchical database model": "hierarchical database model"
    },
    {
        " Network model": "network model"
    },
    {
        " Graph database": "graph database"
    },
    {
        " Relational model": "relational model"
    },
    {
        " Entity–relationship model": "entity–relationship model"
    },
    {
        " Enhanced entity–relationship model": "enhanced entity–relationship model"
    },
    {
        " Object model": "object database"
    },
    {
        " Document model": "document-oriented database"
    },
    {
        " Entity–attribute–value model": "entity–attribute–value model"
    },
    {
        " Star schema": "star schema"
    },
    {
        "     An object-relational database combines the two related structures.     ": null
    },
    {
        "Physical data models": "physical data model"
    },
    {
        "include:   ": null
    },
    {
        "Inverted index": "inverted index"
    },
    {
        " Flat file": "flat file database"
    },
    {
        "     Other models include:   ": null
    },
    {
        "Associative model": "associative model of data"
    },
    {
        " Multidimensional model": "multidimensional database"
    },
    {
        " Array model": "array dbms"
    },
    {
        " Multivalue model": "multivalue model"
    },
    {
        "     Specialized models are optimized for particular types of data:   ": null
    },
    {
        "XML database": "xml database"
    },
    {
        " Semantic model": "semantic data model"
    },
    {
        " Content store": "content store"
    },
    {
        " Event store": "event store"
    },
    {
        " Time series model": "time series database"
    },
    {
        "              A database management system provides three views of the database data:     The external level defines how each group of end-users sees the organization of data in the database. A single database can have any number of views at the external level.   The conceptual level unifies the various external views into a compatible global view. It provides the synthesis of all the external views. It is out of the scope of the various database end-users, and is rather of interest to database application developers and database administrators.   The internal level  is the internal organization of data inside a DBMS. It is concerned with cost, performance, scalability and other operational matters. It deals with storage layout of the data, using storage structures such as ": null
    },
    {
        "indexes": "index"
    },
    {
        " to enhance performance. Occasionally it stores data of individual views , computed from generic data, if performance justification exists for such redundancy. It balances all the external views performance requirements, possibly conflicting, in an attempt to optimize overall performance across all activities.     While there is typically only one conceptual and physical view of the data, there can be any number of different external views. This allows users to see database information in a more business-related way rather than from a technical, processing viewpoint. For example, a financial department of a company needs the payment details of all employees as part of the companys expenses, but does not need details about employees that are the interest of the ": null
    },
    {
        "human resources": "human resources"
    },
    {
        " department. Thus different departments need different views of the companys database.     The three-level database architecture relates to the concept of data independence which was one of the major initial driving forces of the relational model. The idea is that changes made at a certain level do not affect the view at a higher level. For example, changes in the internal level do not affect application programs written using conceptual level interfaces, which reduces the impact of making physical changes to improve performance.     The conceptual view provides a level of indirection between internal and external. On one hand it provides a common view of the database, independent of different external view structures, and on the other hand it abstracts away details of how the data are stored or managed . In principle every level, and even every external view, can be presented by a different data model. In practice usually a given DBMS uses the same data model for both the external and the conceptual levels . The internal level, which is hidden inside the DBMS and depends on its implementation, requires a different level of detail and uses its own types of data structure types.     Separating the external, conceptual and internal levels was a major feature of the relational database model implementations that dominate 21st century databases.         Database technology has been an active research topic since the 1960s, both in ": null
    },
    {
        "academia": "academia"
    },
    {
        " and in the research and development groups of companies . Research activity includes ": null
    },
    {
        "theory": "database theory"
    },
    {
        " and development of ": null
    },
    {
        "prototype": "prototype"
    },
    {
        "s. Notable research topics have included ": null
    },
    {
        "models": "data model"
    },
    {
        ", the atomic transaction concept, and related ": null
    },
    {
        "concurrency control": "concurrency control"
    },
    {
        " techniques, query languages and ": null
    },
    {
        "query optimization": "query optimization"
    },
    {
        " methods, ": null
    },
    {
        "RAID": "raid"
    },
    {
        ", and more.     The database research area has several dedicated ": null
    },
    {
        "academic journals": "academic journal"
    },
    {
        "  and annual ": null
    },
    {
        "conferences": "academic conference"
    },
    {
        " ": null
    }
]