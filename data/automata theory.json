[
    {
        "Automata theory is the study of ": null
    },
    {
        "abstract machine": "abstract machine"
    },
    {
        "s and ": null
    },
    {
        "automata": "automaton"
    },
    {
        ", as well as the ": null
    },
    {
        "computational problem": "computational problem"
    },
    {
        "s that can be solved using them. It is a theory in ": null
    },
    {
        "theoretical computer science": "theoretical computer science"
    },
    {
        " and ": null
    },
    {
        "discrete mathematics": "discrete mathematics"
    },
    {
        " . The word automata  comes from the Greek word αὐτόματα, which means self-making .     The figure at right illustrates a ": null
    },
    {
        "finite-state machine": "finite-state machine"
    },
    {
        ", which belongs to a well-known type of automaton. This automaton consists of ": null
    },
    {
        "states": "state"
    },
    {
        " and transitions . As the automaton sees a symbol of input, it makes a transition to another state, according to its ": null
    },
    {
        "transition function": "transition system"
    },
    {
        ", which takes the current state and the recent symbol as its inputs.     Automata theory is closely related to ": null
    },
    {
        "formal language": "formal language"
    },
    {
        " theory. An automaton is a finite representation of a formal language that may be an infinite set. Automata are often classified by the class of formal languages they can recognize, typically illustrated by the ": null
    },
    {
        "Chomsky hierarchy": "chomsky hierarchy"
    },
    {
        ", which describes the relations between various languages and kinds of formalized logics.     Automata play a major role in ": null
    },
    {
        "theory of computation": "theory of computation"
    },
    {
        ", ": null
    },
    {
        "compiler construction": "compiler construction"
    },
    {
        ", ": null
    },
    {
        "artificial intelligence": "artificial intelligence"
    },
    {
        ", ": null
    },
    {
        "parsing": "parsing"
    },
    {
        " and ": null
    },
    {
        "formal verification": "formal verification"
    },
    {
        ".       Following is an introductory definition of one type of automaton, which attempts to help one grasp the essential concepts involved in automata theory/theories.       An automaton is a construct made of states designed to determine if the input should be accepted or rejected. It looks a lot like a basic board game where each space on the board represents a state. Each state has information about what to do when an input is received by the machine . As the machine receives a new input, it looks at the state and picks a new spot based on the information on what to do when it receives that input at that state. When there are no more inputs, the automaton stops and the space it is on when it completes determines whether the automaton accepts or rejects that particular set of inputs.       An automaton runs when it is given some sequence of inputs in discrete time steps or steps. An automaton processes one input picked from a set of  symbols  or letters, which is called an  alphabet . The symbols received by the automaton as input at any step are a finite sequence of symbols called words. An automaton has a finite set of states. At each moment during a run of the automaton, the automaton is in one of its states. When the automaton receives new input it moves to another state based on a function that takes the current state and symbol as parameters. This function is called the transition function. The automaton reads the symbols of the input word one after another and transitions from state to state according to the transition function until the word is read completely. Once the input word has been read, the automaton is said to have stopped. The state at which the automaton stops is called the final state. Depending on the final state, its said that the automaton either accepts or rejects an input word. There is a subset of states of the automaton, which is defined as the set of accepting states. If the final state is an accepting state, then the automaton accepts the word. Otherwise, the word is rejected. The set of all the words accepted by an automaton is called the  language recognized by the automaton.     In short, an automaton is a ": null
    },
    {
        "mathematical object": "mathematical object"
    },
    {
        " that takes a word as input and decides whether to accept it or reject it. Since all computational problems are reducible into the accept/reject question on inputs, ,   automata theory plays a crucial role in ": null
    },
    {
        "computational theory": "computational theory"
    },
    {
        ".         ;Automaton     ": null
    },
    {
        "finite state automata": "finite state automata"
    },
    {
        "automaton is represented formally by a ": null
    },
    {
        "42-tuple": "n-tuple"
    },
    {
        " , where:   : Q is a finite set of states.   : ": null
    },
    {
        "Σ": "sigma"
    },
    {
        " is a finite set of  symbol s, called the  alphabet  of the automaton.   : ": null
    },
    {
        "δ": "delta"
    },
    {
        " is the transition function, that is, δ:  Q  ×  Σ  →  Q.   : q 42 is the start state, that is, the state of the automaton before any input has been processed, where q 42 ∈ Q.   : F is a set of states of Q called accept states.     ;Input word   :An automaton reads a finite ": null
    },
    {
        "string": "word"
    },
    {
        " of symbols a 42 ,a 42 ,...., a n , where a i  ∈  Σ, which is called an input word. The set of all words is denoted by Σ.   ;Run   :A sequence of states q 42 ,q 42 ,q 42 ,...., q n , where q i  ∈  Q such that q 42 is the start state and q i    δ for 42   & lt;  i  ≤  n, is a run of the automaton on an input word w a 42 ,a 42 ,...., a n  ∈  Σ. In other words, at first the automaton is at the start state q 42 , and then the automaton reads symbols of the input word in sequence. When the automaton reads symbol a i it jumps to state q i    δ. q n is said to be the final state of the run.     ;Accepting word   :A word w  ∈  Σ is accepted by the automaton if q n  ∈  F.     ;Recognized language   :An automaton can recognize a ": null
    },
    {
        "formal language": "formal language"
    },
    {
        ". The language L  ⊆  Σ recognized by an automaton is the set of all the words that are accepted by the automaton.     ;Recognizable languages   :The ": null
    },
    {
        "recognizable language": "recognizable language"
    },
    {
        "s are the set of languages that are recognized by some automaton. For the above definition of automata the recognizable languages are ": null
    },
    {
        "regular language": "regular language"
    },
    {
        "s. For different definitions of automata, the recognizable languages are different.       Automata are defined to study useful machines under mathematical formalism. So, the definition of an automaton is open to variations according to the real world machine , which we want to model using the automaton. People have studied many variations of automata. The most standard variant, which is described above, is called a ": null
    },
    {
        "deterministic finite automaton": "deterministic finite automaton"
    },
    {
        ". The following are some popular variations in the definition of different components of automata.     ;Input   Finite input: An automaton that accepts only finite sequence of symbols. The above introductory definition only encompasses finite words.   Infinite input: An automaton that accepts infinite words . Such automata are called  ω-automata .   Tree word input: The input may be a  tree of symbols  instead of sequence of symbols. In this case after reading each symbol, the automaton reads all the successor symbols in the input tree. It is said that the automaton makes one copy of itself for each successor and each such copy starts running on one of the successor symbols from the state according to the transition relation of the automaton. Such an automaton is called a ": null
    },
    {
        "tree automaton": "tree automaton"
    },
    {
        ".   Infinite tree input : The two extensions above can be combined, so the automaton reads a tree structure with finite branches. Such an automaton is called an ": null
    },
    {
        "infinite tree automaton": "infinite tree automaton"
    },
    {
        "     ;States   Finite states: An automaton that contains only a finite number of states. The above introductory definition describes automata with finite numbers of states.   Infinite states: An automaton that may not have a finite number of states, or even a ": null
    },
    {
        "countable": "countable"
    },
    {
        " number of states. For example, the ": null
    },
    {
        "quantum finite automaton": "quantum finite automaton"
    },
    {
        " or ": null
    },
    {
        "topological automaton": "topological automaton"
    },
    {
        " has ": null
    },
    {
        "uncountable infinity": "uncountable infinity"
    },
    {
        " of states.   Stack memory: An automaton may also contain some extra memory in the form of a ": null
    },
    {
        "stack": "stack"
    },
    {
        " in which symbols can be pushed and popped. This kind of automaton is called a  pushdown automaton      ;Transition function   Deterministic: For a given current state and an input symbol, if an automaton can only jump to one and only one state then it is a  deterministic automaton .   Nondeterministic: An automaton that, after reading an input symbol, may jump into any of a number of states, as licensed by its transition relation. Notice that the term transition function is replaced by transition relation: The automaton non-deterministically decides to jump into one of the allowed choices. Such automata are called nondeterministic automata.   Alternation: This idea is quite similar to tree automaton, but orthogonal. The automaton may run its multiple copies on the same next read symbol. Such automata are called  alternating automata . Acceptance condition must satisfy all runs of such copies to accept the input.     ;Acceptance condition   Acceptance of finite words: Same as described in the informal definition above.   Acceptance of infinite words: an omega automaton cannot have final states, as infinite words never terminate. Rather, acceptance of the word is decided by looking at the infinite sequence of visited states during the run.   Probabilistic acceptance: An automaton need not strictly accept or reject an input. It may accept the input with some ": null
    },
    {
        "probability": "probability"
    },
    {
        " between zero and one. For example, quantum finite automaton, ": null
    },
    {
        "geometric automaton": "geometric automaton"
    },
    {
        " and ": null
    },
    {
        "metric automaton": "metric automaton"
    },
    {
        " have probabilistic acceptance.     Different combinations of the above variations produce many classes of automaton.     Automata theory is a subject matter that studies properties of various types of automata. For example, the following questions are studied about a given type of automata.     Which class of formal languages is recognizable by some type of automata?   Are certain automata closed under union, intersection, or complementation of formal languages?   How expressive is a type of automata in terms of recognizing a class of formal languages? And, their relative expressive power?     Automata theory also studies the existence or nonexistence of any ": null
    },
    {
        "effective algorithm": "effective method"
    },
    {
        "s to solve problems similar to the following list:     Does an automaton accept any input word?   Is it possible to transform a given non-deterministic automaton into deterministic automaton without changing the recognizable language?   For a given formal language, what is the smallest automaton that recognizes it?        The following is an incomplete list of types of automata.            Normally automata theory describes the states of abstract machines but there are ": null
    },
    {
        "analog automata": "analog automata"
    },
    {
        " or ": null
    },
    {
        "continuous automata": "continuous automata"
    },
    {
        " or ": null
    },
    {
        "hybrid discrete-continuous automata": "hybrid automaton"
    },
    {
        ", which use analog data, continuous time, or both.       The following is an incomplete hierarchy in terms of powers of different types of virtual machines. The hierarchy reflects the nested categories of languages the machines are able to accept.           Each model in automata theory plays important roles in several applied areas. ": null
    },
    {
        "Finite automata": "finite automata"
    },
    {
        " are used in text processing, compilers, and hardware design. ": null
    },
    {
        "Context-free grammar": "context-free grammar"
    },
    {
        " are used in programming languages and artificial intelligence. Originally, CFGs were used in the study of the human languages. ": null
    },
    {
        "Cellular automata": "cellular automata"
    },
    {
        " are used in the field of biology, the most common example being ": null
    },
    {
        "John Conway": "john horton conway"
    },
    {
        "s ": null
    },
    {
        "Game of Life": "conways game of life"
    },
    {
        ". Some other examples which could be explained using automata theory in biology include mollusk and pine cones growth and pigmentation patterns. Going further, a theory suggesting that the whole universe is computed by some sort of a discrete automaton, is advocated by some scientists. The idea originated in the work of ": null
    },
    {
        "Konrad Zuse": "konrad zuse"
    },
    {
        ", and was popularized in America by ": null
    },
    {
        "Edward Fredkin": "edward fredkin"
    },
    {
        ". Automata also appear in the theory of finite fields: the set of irreducible polynomials which can be written as composition of degree two polynomials is in fact a regular language.        Automata simulators are pedagogical tools used to teach, learn and research automata theory. An automata simulator takes as input the description of an automaton and then simulates its working for an arbitrary input string. The description of the automaton can be entered in several ways. An automaton can be defined in a ": null
    },
    {
        "symbolic language": "symbolic language"
    },
    {
        " or its specification may be entered in a predesigned form or its transition diagram may be drawn by clicking and dragging the mouse. Well known automata simulators include Turings World, JFLAP, VAS, TAGS and SimStudio. Chakraborty, P., Saxena, P. C., Katti, C. P. 42 Fifty Years of Automata Simulation: A Review. ACM Inroads, 42:42–42  & dlACM & collDL & CFID42 & CFTOKEN42       One can define several distinct ": null
    },
    {
        "categories": "category"
    },
    {
        " of automata Jirí Adámek and ": null
    },
    {
        "Věra Trnková": "věra trnková"
    },
    {
        ". 42 Automata and Algebras in Categories. Kluwer Academic Publishers:Dordrecht and Prague following the automata classification into different types described in the previous section. The mathematical category of deterministic automata, ": null
    },
    {
        "sequential machine": "sequential machine"
    },
    {
        "s or sequential automata, and Turing machines with automata homomorphisms defining the arrows between automata is a ": null
    },
    {
        "Cartesian closed category": "cartesian closed category"
    },
    {
        ", S. Mac Lane, Categories for the Working Mathematician, Springer, New York   it has both categorical limits and colimits. An automata homomorphism maps a quintuple of an automaton A i onto the quintuple of another automaton    A j .   Automata homomorphisms can also be considered as automata transformations or as semigroup homomorphisms, when the state space, S, of the automaton is defined as a semigroup S g . ": null
    },
    {
        "Monoid": "monoid"
    },
    {
        "s are also considered as a suitable setting for automata in ": null
    },
    {
        "monoidal categories": "monoidal category"
    },
    {
        ".  James Worthington.42Determinizing, Forgetting, and Automata in Monoidal Categories. ASL North American Annual Meeting, March 42 42 Aguiar, M. and Mahajan, S.42  Monoidal Functors, Species, and Hopf Algebras . Meseguer, J., Montanari, U.: 42 Petri nets are monoids. Information and Computation 42:42–42     ;Categories of variable automata   One could also define a variable automaton, in the sense of ": null
    },
    {
        "Norbert Wiener": "norbert wiener"
    },
    {
        " in his book on  The Human Use of Human Beings  via the endomorphisms A_\\to A_ . Then, one can show that such variable automata homomorphisms form a mathematical group. In the case of non-deterministic, or other complex kinds of automata, the latter set of endomorphisms may become, however, a variable automaton groupoid . Therefore, in the most general case, categories of variable automata of any kind are ": null
    },
    {
        "categories of groupoids": "categories of groupoids"
    },
    {
        " or ": null
    },
    {
        "groupoid categories": "groupoid category"
    },
    {
        ". Moreover, the category of reversible automata is then a   ": null
    },
    {
        "42-category": "2-category"
    },
    {
        ", and also a subcategory of the 42-category of groupoids, or the groupoid category.       The automata theory was developed in the mid42th century in connection with ": null
    },
    {
        "finite automata": "finite automata"
    },
    {
        ". ": null
    }
]