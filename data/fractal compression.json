[
    {
        "Fractal compression is a ": null
    },
    {
        "lossy compression": "lossy compression"
    },
    {
        " method for ": null
    },
    {
        "digital image": "digital image"
    },
    {
        "s, based on ": null
    },
    {
        "fractal": "fractal"
    },
    {
        "s. The method is best suited for textures and natural images, relying on the fact that parts of an image often resemble other parts of the same image. Fractal ": null
    },
    {
        "algorithms": "algorithms"
    },
    {
        " convert these parts into mathematical data called fractal codes which are used to recreate the encoded image.            Fractal image representation may be described mathematically as an ": null
    },
    {
        "iterated function system": "iterated function system"
    },
    {
        " .       We begin with the representation of a ": null
    },
    {
        "binary image": "binary image"
    },
    {
        ", where the image may be thought of as a subset of \\mathbb^42 . An IFS is a set of ": null
    },
    {
        "contraction mapping": "contraction mapping"
    },
    {
        "s ƒ 42 ,...,ƒ N ,     : f_i:\\mathbb^42\\to \\mathbb^42     According to these mapping functions, the IFS describes a two-dimensional set S as the fixed point of the ": null
    },
    {
        "Hutchinson operator": "hutchinson operator"
    },
    {
        "     : H\\bigcup_^N f_i, \\quad A \\subset \\mathbb^42     That is, H is an operator mapping sets to sets, and S is the unique set satisfying H S. The idea is to construct the IFS such that this set S is the input binary image. The set S can be recovered from the IFS by ": null
    },
    {
        "fixed point iteration": "fixed point iteration"
    },
    {
        ": for any nonempty ": null
    },
    {
        "compact": "compact space"
    },
    {
        " initial set A 42 , the iteration A k42   H converges to S.     The set S is self-similar because H S implies that S is a union of mapped copies of itself:   : Sf_42\\cup f_42 \\cup\\cdots\\cup f_N   So we see the IFS is a fractal representation of S.       IFS representation can be extended to a ": null
    },
    {
        "grayscale image": "grayscale"
    },
    {
        " by considering the images ": null
    },
    {
        "graph": "graph of a function"
    },
    {
        " as a subset of \\mathbb^42 . For a grayscale image u, consider the set   S . Then similar to the binary case, S is described by an IFS using a set of contraction mappings ƒ 42 ,...,ƒ N , but in \\mathbb^42 ,     : f_i:\\mathbb^42\\to \\mathbb^42       A challenging problem of ongoing research in fractal image representation is how to choose the ƒ 42 ,...,ƒ N  such that its fixed point approximates the input image, and how to do this efficiently.     A simple approach  for doing so is the following partitioned iterated function system :     Partition the image domain into range blocks R i  of size s×s.   For each R i , search the image to find a block D i  of size 42s×42s that is very similar to R i .   Select the mapping functions such that H   R i  for each i.     In the second step, it is important to find a similar block so that the IFS accurately represents the input image, so a sufficient number of candidate blocks for D i  need to be considered. On the other hand, a large search considering many blocks is computationally costly.   This bottleneck of searching for similar blocks is why PIFS fractal encoding is much slower than for example ": null
    },
    {
        "DCT": "discrete cosine transform"
    },
    {
        " and ": null
    },
    {
        "wavelet": "wavelet"
    },
    {
        " based image representation.     The initial square partitioning and ": null
    },
    {
        "brute-force search": "brute-force search"
    },
    {
        " algorithm presented by Jacquin provides a starting point for further research and extensions in many possible directions -- different ways of partitioning the image into range blocks of various sizes and shapes; fast techniques for quickly finding a close-enough matching domain block for each range block rather than brute-force searching, such as fast ": null
    },
    {
        "motion estimation": "motion estimation"
    },
    {
        " algorithms; different ways of encoding the mapping from the domain block to the range block; etc.   Dietmar Saupe, Raouf Hamzaoui.   .   42          Other researchers attempt to find algorithms to automatically encode an arbitrary image as RIFS or global IFS, rather than PIFS; and algorithms for fractal video compression including ": null
    },
    {
        "motion compensation": "motion compensation"
    },
    {
        " and three dimensional iterated function systems.   Bruno Lacroix.   .   42     Yuval Fisher.   .   42   p. 42       Fractal image compression has many similarities to ": null
    },
    {
        "vector quantization": "vector quantization"
    },
    {
        " image compression.   Henry Xiao.   .   42         With fractal compression, encoding is extremely computationally expensive because of the search used to find the self-similarities. Decoding, however, is quite fast. While this asymmetry has so far made it impractical for real time applications, when video is archived for distribution from disk storage or file downloads fractal compression becomes more competitive.        At common compression ratios, up to about 42:42 Fractal compression provides similar results to ": null
    },
    {
        "DCT-based": "discrete cosine transform"
    },
    {
        " algorithms such as ": null
    },
    {
        "JPEG": "jpeg"
    },
    {
        ".  At high compression ratios fractal compression may offer superior quality. For satellite imagery, ratios of over 42:42  have been achieved with acceptable results. Fractal video compression ratios of 42:42–42:42 have been achieved in reasonable compression times .      Compression efficiency increases with higher image complexity and color depth, compared to simple ": null
    },
    {
        "grayscale": "grayscale"
    },
    {
        " images.       An inherent feature of fractal compression is that images become resolution independent   Byte Magazine article on fractal compression/resolution independence after being converted to fractal code. This is because the iterated function systems in the compressed file scale indefinitely. This indefinite scaling property of a fractal is known as fractal scaling .       The resolution independence of a fractal-encoded image can be used to increase the display resolution of an image. This process is also known as fractal interpolation . In fractal interpolation, an image is encoded into fractal codes via fractal compression, and subsequently decompressed at a higher resolution. The result is an up-sampled image in which iterated function systems have been used as the ": null
    },
    {
        "interpolant": "interpolant"
    },
    {
        ".  College of Mathematics and Physics, Chongqing University, China   Fractal interpolation maintains geometric detail very well compared to traditional interpolation methods like ": null
    },
    {
        "bilinear interpolation": "bilinear interpolation"
    },
    {
        " and ": null
    },
    {
        "bicubic interpolation": "bicubic interpolation"
    },
    {
        ".  Departamento de Matemáticas, Universidad de Zaragoza, Campus Plaza de San Francisco, Zaragoza, Spain   Hokkaido Univ., Graduate School of Engineering, JPN   Nagasaki University, Faculty of Engineering Since the interpolation cannot reverse Shannon entropy however, it ends up sharpening the image by adding random instead of meaningful detail. One cannot, for example, enlarge an image of a crowd where each persons face is one or two pixels and hope to identify them.       ": null
    },
    {
        "Michael Barnsley": "michael barnsley"
    },
    {
        " led development of fractal compression in 42 and was granted several ": null
    },
    {
        "patent": "patent"
    },
    {
        "s on the technology.  Barnsley and Sloans first ": null
    },
    {
        "iterated function system": "iterated function system"
    },
    {
        " patent, filed in October 42 The most widely known practical fractal compression algorithm was invented by Barnsley and Alan Sloan. Barnsleys graduate student Arnaud Jacquin implemented the first automatic algorithm in software in 42  Tech report Arnaud E. Jacquin. . IEEE Transactions on Image Processing, 42 42 All methods are based on the ": null
    },
    {
        "fractal transform": "fractal transform"
    },
    {
        " using ": null
    },
    {
        "iterated function system": "iterated function system"
    },
    {
        "s. Michael Barnsley and Alan Sloan formed Iterated Systems Inc. Iterated Systems Inc. changed its name to  in 42 and in turn was bought out by Interwoven, Inc. in 42Fractal Image FormatFractal ImagerFractal": null
    }
]