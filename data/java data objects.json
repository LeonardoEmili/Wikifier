[
    {
        "Java Data Objects  is a specification of ": null
    },
    {
        "Java": "java platform"
    },
    {
        " object": "object"
    },
    {
        " persistence": "persistence"
    },
    {
        ". One of its features is a transparency of the persistence services to the ": null
    },
    {
        "domain model": "domain model"
    },
    {
        ". JDO persistent objects are ordinary ": null
    },
    {
        "Java programming language": "java"
    },
    {
        " classes": "class"
    },
    {
        " ; there is no requirement for them to implement certain ": null
    },
    {
        "interfaces": "interface"
    },
    {
        " or extend from special classes. JDO 42 was developed under the ": null
    },
    {
        "Java Community Process": "java community process"
    },
    {
        " as . JDO 42 was developed under  and was released on May 42 42 JDO 42 was completed in Feb 42 developed by the  project. JDO 42 was released in October 42 JDO 42 was released in April 42     Object persistence is defined in the external ": null
    },
    {
        "XML": "xml"
    },
    {
        " metafiles, which may have vendor-specific extensions. JDO vendors provide developers with enhancers, which modify compiled Java class files so they can be transparently persisted. Currently, JDO vendors offer several options for persistence, e.g. to ": null
    },
    {
        "RDBMS": "relational database"
    },
    {
        ", to ": null
    },
    {
        "OODB": "object database"
    },
    {
        ", or to ": null
    },
    {
        "files": "computer file"
    },
    {
        ".     JDO enhanced classes are portable across different vendors implementation. Once enhanced, a Java class can be used with any vendors JDO product.     JDO is integrated with ": null
    },
    {
        "Java EE": "java platform, enterprise edition"
    },
    {
        " in several ways. First of all, the vendor implementation may be provided as a . Secondly, JDO may work in the context of JEE ": null
    },
    {
        "transaction services": "java transaction service"
    },
    {
        ".       ": null
    },
    {
        "Enterprise JavaBeans": "enterprise javabeans"
    },
    {
        " 42 specification also covered persistence, as had EJB v42 with ": null
    },
    {
        "Entity Bean": "entity bean"
    },
    {
        "s. There have been standards conflicts between the two standards bodies in terms of pre-eminence. JDO has several commercial implementations.     In the end, persistence has been broken out of EJB42 Core , and a new standard formed, the ": null
    },
    {
        "Java Persistence API": "java persistence api"
    },
    {
        " . JPA uses the javax.persistence package, and was first specified in a separate document within the EJB42 spec , but was later moved to its own spec . Significantly, javax.persistence will not require an EJB container, and thus will work within a Java SE environment as well, as JDO always has. JPA, however, is an ": null
    },
    {
        "object-relational mapping": "object-relational mapping"
    },
    {
        " standard, while JDO is both an object-relational mapping standard and a transparent object persistence standard. JDO, from an API point of view, is agnostic to the technology of the underlying datastore, whereas JPA is targeted to RDBMS datastores .     Leading JDO commercial implementations and open source projects also offer a JPA API implementation as an alternative access to their underlying persistence engines, formerly exposed solely via JDO in the original products. There are many open source implementations of JDO.         Disconnected object graphs concept   Standardized ORM mapping descriptors   JDOQL Enhancements   Get e.g. a  from javax.jdo.PersistenceManager   More: Named Queries , FetchPlan, Sequence, Delete by Query, multiple User Objects on PM         JDO 42 : FOStore   JDO 42 : ": null
    },
    {
        "JPOX": "datanucleus"
    },
    {
        " 42   JDO 42 : JPOX 42   JDO 42 : ": null
    },
    {
        "DataNucleus": "datanucleus"
    }
]