[
    {
        "                A thin client is a lightweight ": null
    },
    {
        "computer": "computer"
    },
    {
        " that has been optimized for ": null
    },
    {
        "establishing a remote connection": "remote desktop"
    },
    {
        " with a server-based computing environment. The server does most of the work, which can include launching software programs, performing calculations, and storing data. This contrasts with a ": null
    },
    {
        "fat client": "fat client"
    },
    {
        " or a conventional ": null
    },
    {
        "personal computer": "personal computer"
    },
    {
        "; the former is also intended for working in a ": null
    },
    {
        "client–server model": "client–server model"
    },
    {
        " but has significant local processing power, while the latter aims to perform its function mostly locally.     Thin clients occur as components of a broader computing infrastructure, where many clients share their computations with a server or ": null
    },
    {
        "server farm": "server farm"
    },
    {
        ". The server-side infrastructure uses ": null
    },
    {
        "cloud computing": "cloud computing"
    },
    {
        " software such as ": null
    },
    {
        "application virtualization": "application virtualization"
    },
    {
        ", hosted shared desktop or ": null
    },
    {
        "desktop virtualization": "desktop virtualization"
    },
    {
        " . This combination forms what is known as a cloud-based system where desktop resources are centralized at one or more ": null
    },
    {
        "data center": "data center"
    },
    {
        "s. The benefits of centralization are hardware resource optimization, reduced ": null
    },
    {
        "software maintenance": "software maintenance"
    },
    {
        ", and improved security.     Example of hardware resource optimization: Cabling, busing and I/O can be minimized while idle memory and processing power can be applied to user sessions that most need it.   Example of reduced software maintenance: ": null
    },
    {
        "Software patching": "software patching"
    },
    {
        " and ": null
    },
    {
        "operating system": "operating system"
    },
    {
        " migrations can be applied, tested and activated for all users in one instance to accelerate roll-out and improve administrative efficiency.   Example of improved security: Software assets are centralized and easily fire-walled, monitored and protected. Sensitive data is uncompromised in cases of desktop loss or theft.     Thin client hardware generally supports a keyboard, mouse, monitor, jacks for sound peripherals, and open ports for ": null
    },
    {
        "USB": "usb"
    },
    {
        " devices . Some thin clients include legacy serial or parallel ports to support older devices such as receipt printers, scales or time clocks. Thin client software typically consists of a ": null
    },
    {
        "graphical user interface": "graphical user interface"
    },
    {
        " , cloud access agents , a local ": null
    },
    {
        "web browser": "web browser"
    },
    {
        ", ": null
    },
    {
        "terminal emulator": "terminal emulator"
    },
    {
        "s , and a basic set of local ": null
    },
    {
        "utilities": "utility software"
    },
    {
        ".           In using cloud-based architecture, the server takes on the processing load of several client sessions, acting as a host for each endpoint device. The client software is narrowly purposed and lightweight; therefore, only the host server or server farm needs to be secured, rather than securing software installed on every endpoint device . One of the combined benefits of using cloud architecture with thin client desktops is that critical IT assets are centralized for better utilization of resources. Unused memory, bussing lanes, and processor cores within an individual user session, for example, can be leveraged for other active user sessions.     The simplicity of thin client hardware and software results in a very low ": null
    },
    {
        "total cost of ownership": "total cost of ownership"
    },
    {
        ", but some of these initial savings can be offset by the need for a more robust cloud infrastructure required on the server side.     An alternative to traditional server deployment which spreads out infrastructure costs over time is a cloud-based subscription model known as ": null
    },
    {
        "desktop as a service": "desktop as a service"
    },
    {
        ", which allows IT organizations to outsource the cloud infrastructure to a third party.          Thin client computing is known to simplify the desktop endpoints by reducing the client-side software footprint. With a lightweight, read-only ": null
    },
    {
        "operating system": "operating system"
    },
    {
        " , client-side setup and administration is greatly reduced. Cloud access is the primary role of a thin client which eliminates the need for a large suite of local user applications, data storage, and utilities. This architecture shifts most of the software execution burden from the endpoint to the data center. User assets are centralized for greater visibility. Data recovery and desktop repurposing tasks are also centralized for faster service and greater scalability.       While the server must be robust enough to handle several client sessions at once, thin client hardware requirements are minimal compared to that of a traditional PC desktop. Most thin clients have low energy processors, ": null
    },
    {
        "flash storage": "flash storage"
    },
    {
        ", memory, and no moving parts. This reduces the cost and power consumption, making them affordable to own and easy to replace or deploy. Since thin clients consist of fewer hardware components than a traditional desktop PC, they can operate in more hostile environments. And because they typically dont store critical data locally, risk of theft is minimized because there is little or no user data to be compromised.       Modern thin clients have come a long way to meet the demands of todays graphical computing needs. New generations of low energy chipset and CPU  combinations improve processing power and graphical capabilities. To minimize latency of high resolution video sent across the network, some host software stacks leverage multimedia redirection techniques to offload video rendering to the desktop device. Video codecs are often embedded on the thin client to support these various multimedia formats. Other host software stacks makes use of ": null
    },
    {
        "User Datagram Protocol": "user datagram protocol"
    },
    {
        " in order to accelerate fast changing pixel updates required by modern video content. Thin clients typically support local software agents capable of accepting and decoding UDP.     Some of the more graphically intense use cases, remain a challenge for thin clients. These use cases might include the applications like photo editors, 42D drawing programs, and animation tools. This can be addressed at the host server using dedicated ": null
    },
    {
        "GPU": "gpu"
    },
    {
        " cards, allocation of ": null
    },
    {
        "vGPUs": "vgpus"
    },
    {
        " , workstation cards, and hardware acceleration cards. These solutions allow IT administrators to provide power-user performance where it is needed, to a relatively generic endpoint device such as a thin client.       To achieve such simplicity, thin clients sometimes lag behind desktop PCs in terms of extensibility. For example, if a local software utility or set of device drivers are needed in order to support a locally attached peripheral device , the thin client operating system may lack the resources needed to fully integrate the required dependencies . Modern thin clients address this limitation via port mapping or USB redirection software. However, these methods cannot address all scenarios. Therefore, it is good practice to perform validation tests of locally attached peripherals in advance to ensure compatibility. Further, in large distributed desktop environments, printers are often networked, negating the need for device drivers on every desktop.     While running local productivity applications goes beyond the normal scope of a thin client, it is sometimes needed in rare use cases. License restrictions that apply to thin clients can sometimes prevent them from supporting these applications. Local storage constraints may also limit the space required to install large applications or application suites.     It is also important to acknowledge that network bandwidth and performance is more critical in any type of cloud-based computing model. IT organizations must ensure that their network can accommodate the number of users that they need to serve. If demand for bandwidth exceeds network limits, it could result in a major loss of end user productivity.     A similar risk exists inside the data center. Servers must be sized correctly in order to deliver adequate performance to end users. In a cloud-based computing model, the servers can also represent a single point of failure risk. If a server fails, end users lose access to all of the resources supported by that server. This risk can be mitigated by building redundancies, fail-over processes, backups, and load balancing utilities into the system. Redundancy provides reliable host availability but it can add cost to smaller user populations that lack scale.         Popular providers of thin clients include Wyse Technology, ": null
    },
    {
        "NComputing": "ncomputing"
    },
    {
        ", ": null
    },
    {
        "Dell": "dell"
    },
    {
        " , ": null
    },
    {
        "HP": "hewlett-packard"
    },
    {
        ", ": null
    },
    {
        "IGEL Technology": "igel technology"
    },
    {
        ", ": null
    },
    {
        "LG": "lg"
    },
    {
        " and ": null
    },
    {
        "Samsung Electronics": "samsung electronics"
    },
    {
        ".             Thin clients have their roots in ": null
    },
    {
        "multi-user systems": "multi-user"
    },
    {
        ", traditionally ": null
    },
    {
        "mainframes": "mainframes"
    },
    {
        " accessed by some sort of ": null
    },
    {
        "computer terminal": "computer terminal"
    },
    {
        ". As computer graphics matured, these terminals transitioned from providing a ": null
    },
    {
        "command-line interface": "command-line interface"
    },
    {
        " to a full ": null
    },
    {
        "graphical user interface": "graphical user interface"
    },
    {
        ", as is common on modern advanced thin clients. The prototypical multi-user environment along these lines, ": null
    },
    {
        "Unix": "unix"
    },
    {
        ", began to support fully graphical ": null
    },
    {
        "X terminal": "x terminal"
    },
    {
        "s, i.e., devices running ": null
    },
    {
        "display server": "display server"
    },
    {
        " software, from about 42 X terminals remained relatively popular even after the arrival of other thin clients in the mid-late 42s. Modern Unix derivatives like ": null
    },
    {
        "BSD": "bsd"
    },
    {
        " and ": null
    },
    {
        "Linux": "linux"
    },
    {
        " continue the tradition of the multi-user, remote display/input session. Typically, X software is not made available on non-X-based thin clients, although no technical reason for this exclusion would prevent it.     ": null
    },
    {
        "Windows NT": "windows nt"
    },
    {
        " became capable of multi-user operations primarily through the efforts of ": null
    },
    {
        "Citrix Systems": "citrix systems"
    },
    {
        ", which repackaged ": null
    },
    {
        "Windows NT 42": "windows nt 3.51"
    },
    {
        " as the multi-user operating system ": null
    },
    {
        "WinFrame": "winframe"
    },
    {
        " in 42 launched in coordination with Wyse Technologys Winterm thin client. ": null
    },
    {
        "Microsoft": "microsoft"
    },
    {
        " licensed this technology back from Citrix and implemented it into ": null
    },
    {
        "Windows NT 42": "windows nt 4.0"
    },
    {
        " Terminal Server Edition, under a project codenamed Hydra. Windows NT then became the basis of Windows 42 and Windows XP.  Microsoft Windows systems support graphical terminals via the ": null
    },
    {
        "Remote Desktop Services": "remote desktop services"
    },
    {
        " component. The Wyse Winterm was the first Windows-display-focused thin client to access this environment.     The term thin client was coined in 42  by Tim Negris, VP of Server Marketing at ": null
    },
    {
        "Oracle Corporation": "oracle corporation"
    },
    {
        ", while working with company founder ": null
    },
    {
        "Larry Ellison": "larry ellison"
    },
    {
        " on the launch of ": null
    },
    {
        "Oracle 42": "oracle database"
    },
    {
        ". At the time, Oracle wished to differentiate their server oriented software from Microsofts desktop oriented products. Ellison subsequently popularized Negris ": null
    },
    {
        "buzzword": "buzzword"
    },
    {
        " with frequent use in his speeches and interviews about Oracle products. Ellison would go on to be a founding board member of thin client maker Network Computer, Inc , later renamed Liberate.           The term stuck for several reasons. The earlier term graphical terminal had been chosen to distinguish such terminals from text-based terminals, and thus put the emphasis heavily on graphics – which became obsolete as a distinguishing characteristic in the 42s as text-only physical terminals themselves became obsolete, and text-only computer systems were no longer manufactured. The term thin client also conveys better what was then viewed as the fundamental difference: thin clients can be designed with less expensive hardware, because they have reduced computational workloads.     By the 42s, thin clients were not the only desktop devices for general purpose computing that were thin – in the sense of having a small form factor and being relatively inexpensive. The ": null
    },
    {
        "nettop": "nettop"
    },
    {
        " form factor for desktop PCs was introduced, and nettops could run full feature Windows or Linux; ": null
    },
    {
        "tablets": "tablet computer"
    },
    {
        " and tablet-laptop hybrids had also entered the market. However, while there was now little size difference, thin clients retained some key advantages over these competitors, such as not needing a local drive. However, thin client can be a ": null
    },
    {
        "misnomer": "misnomer"
    },
    {
        " for slim form factor computers using ": null
    },
    {
        "flash memory": "flash memory"
    },
    {
        " such as ": null
    },
    {
        "compactflash": "compactflash"
    },
    {
        ", ": null
    },
    {
        "SD card": "sd card"
    },
    {
        ", or permanent flash memory as a ": null
    },
    {
        "hard disk": "hard disk drive"
    },
    {
        " substitute.            Zero client is also referred as ultra thin client, contains no moving parts but centralizes all processing and storage to just what is running on the server. As a result, it requires no local driver to install, no patch management, and no local operating system licensing fees or updates. The device consumes very little power and is tamper-resistant and completely incapable of storing any data locally, providing a more secure endpoint.   While a traditional thin client is streamlined for multi-protocol client-server communication, a zero client has a highly tuned on board processor specifically designed for one possible protocol . A zero client makes use of very lightweight firmware that merely initializes network communication through a basic GUI , decodes display information received from the server, and sends local input back to the host. A device with such simple functionality has less demand for complex hardware or silicon, and therefore becomes less prone to obsolescence. Another key benefit of the zero client model is that its lightweight firmware represents an ultra-small attack surface making it more secure than a thin client. Further, the local firmware is so simple that it requires very little setup or ongoing administration. Its the ultimate in desktop simplification but the trade-off is flexibility. Most mainstream zero clients are optimized for one communication protocol only. This limits the number of host environments that a zero client can provide its users with access to.     Providers     Popular providers of zero clients include Wyse , , , , .       Web clients only provide a ": null
    },
    {
        "web browser": "web browser"
    },
    {
        ", and rely on ": null
    },
    {
        "web apps": "web applications"
    },
    {
        " to provide general-purpose computing functionality. However, note that web applications may use ": null
    },
    {
        "web storage": "web storage"
    },
    {
        " to store some data locally, e.g. for offline mode , and they can perform significant processing tasks as well. ": null
    },
    {
        "Rich Internet Applications": "rich internet applications"
    },
    {
        " for instance may cross the boundary, and HTML42 web apps can leverage browsers as run-time environments through the use of a ": null
    },
    {
        "cache manifest": "cache manifest in html5"
    },
    {
        " or so-called packaged apps .     Examples of web thin clients include ": null
    },
    {
        "Chromebooks": "chromebooks"
    },
    {
        " and ": null
    },
    {
        "Chromeboxes": "chromeboxes"
    },
    {
        "  and phones running Firefox OS.   O   Chromebooks and Chromeboxes also have the capability of remote desktop using the free ": null
    },
    {
        "Chrome Remote Desktop": "chrome remote desktop"
    }
]