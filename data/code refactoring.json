[
    {
        "        Code refactoring is the process of restructuring existing computer code—changing the  factoring —without changing its external behavior. Refactoring is intended to improve  nonfunctional  attributes of the ": null
    },
    {
        "software": "Software"
    },
    {
        ". Advantages include improved code ": null
    },
    {
        "readability": "Readability"
    },
    {
        " and reduced ": null
    },
    {
        "complexity": "Cyclomatic Complexity"
    },
    {
        "; these can improve ": null
    },
    {
        "source-code": "Source Code"
    },
    {
        " maintainability": "Maintainability"
    },
    {
        " and create a more expressive internal ": null
    },
    {
        "architecture": "Software Architecture"
    },
    {
        " or ": null
    },
    {
        "object model": "Object Model"
    },
    {
        " to improve ": null
    },
    {
        "extensibility": "Extensibility"
    },
    {
        ".     Typically, refactoring applies a series of standardised basic micro-refactorings, each of which is a tiny change in a ": null
    },
    {
        "computer programs": "Computer Program"
    },
    {
        "source code that either preserves the behaviour of the software, or at least does not modify its conformance to ": null
    },
    {
        "functional requirement": "Functional Requirement"
    },
    {
        "s. Many ": null
    },
    {
        "development environments": "Development Environment"
    },
    {
        " provide automated support for performing the mechanical aspects of these basic refactorings. If done well, code refactoring may help software developers discover and fix hidden or dormant ": null
    },
    {
        "bugs": "Software Bug"
    },
    {
        " or ": null
    },
    {
        "vulnerabilities": "Vulnerability"
    },
    {
        " in the system by simplifying the underlying logic and eliminating unnecessary levels of complexity. If done poorly it may fail the requirement that external functionality not be changed, introduce new bugs, or both.            Refactoring is usually motivated by noticing a ": null
    },
    {
        "code smell": "Code Smell"
    },
    {
        ". For example, the method at hand may be very long, or it may be a near ": null
    },
    {
        "duplicate": "Duplicate Code"
    },
    {
        " of another nearby method. Once recognized, such problems can be addressed by refactoring the source code, or transforming it into a new form that behaves the same as before but that no longer smells .     For a long routine, one or more smaller subroutines can be extracted; or for duplicate routines, the duplication can be removed and replaced with one shared function. Failure to perform refactoring can result in accumulating ": null
    },
    {
        "technical debt": "Technical Debt"
    },
    {
        "; on the other hand, refactoring is one of the primary means of repaying technical debt.        There are two general categories of benefits to the activity of refactoring.   Maintainability. It is easier to fix bugs because the source code is easy to read and the intent of its author is easy to grasp.  This might be achieved by reducing large monolithic routines into a set of individually concise, well-named, single-purpose methods. It might be achieved by moving a method to a more appropriate class, or by removing misleading comments.   Extensibility. It is easier to extend the capabilities of the application if it uses recognizable ": null
    },
    {
        "design pattern": "Design Pattern"
    },
    {
        "s, and it provides some flexibility where none before may have existed.       Automatic ": null
    },
    {
        "unit tests": "Unit Testing"
    },
    {
        " should be set up before refactoring to ensure routines still behave as expected.  Unit tests can bring stability to even large refactors when performed with a single ": null
    },
    {
        "atomic commit": "Atomic_Commitrevision_Control"
    },
    {
        ". A common strategy to allow safe and atomic refactors spanning multiple projects is to store all projects in a single ": null
    },
    {
        "repository": "Repository"
    },
    {
        ", known as ": null
    },
    {
        "monorepo": "Monorepo"
    },
    {
        ".      With unit testing in place, refactoring is then an iterative cycle of making a small ": null
    },
    {
        "program transformation": "Program Transformation"
    },
    {
        ", testing it to ensure correctness, and making another small transformation. If at any point a test fails, the last small change is undone and repeated in a different way. Through many small steps the program moves from where it was to where you want it to be. For this very iterative process to be practical, the tests must run very quickly, or the programmer would have to spend a large fraction of their time waiting for the tests to finish. Proponents of ": null
    },
    {
        "extreme programming": "Extreme Programming"
    },
    {
        " and other ": null
    },
    {
        "agile software development": "Agile Software Development"
    },
    {
        " describe this activity as an integral part of the ": null
    },
    {
        "software development cycle": "Software Development Process"
    },
    {
        ".       Here are some examples of micro-refactorings; some of these may only apply to certain languages or language types. A longer list can be found in ": null
    },
    {
        "Martin Fowlers": "Martin Fowler"
    },
    {
        "refactoring book   and website. . Many development environments provide automated support for these micro-refactorings. For instance, a programmer could click on the name of a variable and then select the Encapsulate field refactoring from a ": null
    },
    {
        "context menu": "Context Menu"
    },
    {
        ". The IDE would then prompt for additional details, typically with sensible defaults and a preview of the code changes. After confirmation by the programmer it would carry out the required changes throughout the code.   Techniques that allow for more ": null
    },
    {
        "abstraction": "Abstraction"
    },
    {
        " Encapsulate field": "Field Encapsulation"
    },
    {
        " – force code to access the field with getter and setter methods   ": null
    },
    {
        "Generalize type": "Type Generalization"
    },
    {
        " – create more general types to allow for more code sharing   Replace type-checking code with state/strategy    Replace conditional with ": null
    },
    {
        "polymorphism": "Polymorphism"
    },
    {
        "    Techniques for breaking code apart into more logical pieces   Componentization breaks code down into reusable semantic units that present clear, well-defined, simple-to-use interfaces.   ": null
    },
    {
        "Extract class": "Extract Class"
    },
    {
        " moves part of the code from an existing class into a new class.   Extract method, to turn part of a larger ": null
    },
    {
        "method": "Method"
    },
    {
        " into a new method. By breaking down code in smaller pieces, it is more easily understandable. This is also applicable to ": null
    },
    {
        "function": "Function"
    },
    {
        "s.   Techniques for improving names and location of code   Move method or move field – move to a more appropriate ": null
    },
    {
        "class": "Class"
    },
    {
        " or source file   ": null
    },
    {
        "Rename method": "Rename Method"
    },
    {
        " or rename field – changing the name into a new one that better reveals its purpose   Pull up – in ": null
    },
    {
        "object-oriented programming": "Object-Oriented Programming"
    },
    {
        " , move to a ": null
    },
    {
        "superclass": "Superclass"
    },
    {
        " subclass": "Subclass"
    },
    {
        "   Automatic ": null
    },
    {
        "clone detection": "Clone Detection"
    },
    {
        " Bruntink, Magiel, et al. . Software Maintenance, 2004. Proceedings. 20th IEEE International Conference on. IEEE, 2004.       While the term refactoring originally referred exclusively to refactoring of software code, in recent years code written in ": null
    },
    {
        "hardware description languages": "Hardware Description Language"
    },
    {
        " has also been refactored. The term hardware refactoring is used as a shorthand term for refactoring of code in hardware description languages. Since HDLs are not considered to be ": null
    },
    {
        "programming languages": "Programming Language"
    },
    {
        "by most hardware engineers, ": null
    },
    {
        "Hardware description languagesHDL and programming languages": "Hardware Description Languageshdl And Programming Languages"
    },
    {
        " hardware refactoring is to be considered a separate field from traditional code refactoring.     Automated refactoring of analog hardware descriptions  has been proposed by Zeng and Huss. Kaiping Zeng, Sorin A. Huss, Architecture refinements by code refactoring of behavioral VHDL-AMS models . ISCAS 2006 In their approach, refactoring preserves the simulated behavior of a hardware design. The non-functional measurement that improves is that refactored code can be processed by standard synthesis tools, while the original code cannot.   Refactoring of digital HDLs, albeit manual refactoring, has also been investigated by ": null
    },
    {
        "Synopsys": "Synopsys"
    },
    {
        " fellow": "Fellow"
    },
    {
        " Mike Keating. M. Keating : Complexity, Abstraction, and the Challenges of Designing Complex Systems , in DAC08 tutorial  Bridging a Verification Gap: C++ to RTL for Practical Design M. Keating, P. Bricaud: Reuse Methodology Manual for System-on-a-Chip Designs, Kluwer Academic Publishers, 1999. His target is to make complex systems easier to understand, which increases the designers productivity.       Although refactoring code has been done informally for decades, ": null
    },
    {
        "William Griswolds": "Bill Griswold"
    },
    {
        "1991 Ph.D. dissertation is one of the first major academic works on refactoring functional and procedural programs, followed by ": null
    },
    {
        "William Opdykes": "William Opdyke"
    },
    {
        "1992 dissertation on the refactoring of object-oriented programs,  although all the theory and machinery have long been available as ": null
    },
    {
        "program transformation": "Program Transformation"
    },
    {
        " systems. All of these resources provide a catalog of common methods for refactoring; a refactoring method has a description of how to apply the ": null
    },
    {
        "method": "Scientific Method"
    },
    {
        " and indicators for when you should apply the method.     ": null
    },
    {
        "Martin Fowlers": "Martin Fowler"
    },
    {
        "book Refactoring: Improving the Design of Existing Code is the canonical reference.     The first known use of the term refactoring in the published literature was in a September, 1990 article by ": null
    },
    {
        "William Opdyke": "William Opdyke"
    },
    {
        " and ": null
    },
    {
        "Ralph Johnson": "Ralph Johnson"
    },
    {
        ".    Griswolds Ph.D. thesis,    Opdykes Ph.D. thesis,  published in 1992, also used this term.     The term factoring has been used in the ": null
    },
    {
        "Forth": "Forth"
    },
    {
        " community since at least the early 1980s. Chapter Six of ": null
    },
    {
        "Leo Brodies": "Leo Brodie"
    },
    {
        "book  Thinking Forth  is dedicated to the subject.     In extreme programming, the Extract Method refactoring technique has essentially the same meaning as factoring in Forth; to break down a word  into smaller, more easily maintained functions.     Refactorings can also be reconstructed  posthoc to produce concise descriptions of complex software changes recorded in software repositories like CVS or SVN.          Many software ": null
    },
    {
        "editors": "Text Editor"
    },
    {
        " and ": null
    },
    {
        "IDEs": "Integrated Development Environment"
    },
    {
        " have automated refactoring support. It is possible to refactor application code as well as test code.  Here is a list of a few of these editors, or so-called ": null
    },
    {
        "refactoring browsers": "Refactoring Browser"
    },
    {
        ".   ": null
    },
    {
        "DMS Software Reengineering Toolkit": "Dms Software Reengineering Toolkit"
    },
    {
        "   Eclipse based:   ": null
    },
    {
        "Eclipse": "Eclipse"
    },
    {
        "    PyDev": "Pydev"
    },
    {
        "    Photran": "Photran"
    },
    {
        "    Embarcadero Delphi": "Embarcadero Delphi"
    },
    {
        " AppCode": "Appcode"
    },
    {
        "    IntelliJ IDEA": "Intellij Idea"
    },
    {
        "    PyCharm": "Pycharm"
    },
    {
        "    WebStorm": "Webstorm"
    },
    {
        "    Android Studio": "Android Studio"
    },
    {
        "    JDeveloper": "Jdeveloper"
    },
    {
        "    NetBeans": "Netbeans"
    },
    {
        "    Smalltalk": "Smalltalk"
    },
    {
        ": Most dialects include powerful refactoring tools. Many use the original refactoring browser produced in the early 90s by ": null
    },
    {
        "Ralph Johnson": "Ralph Johnson"
    },
    {
        ".   Visual Studio based:   ": null
    },
    {
        "Visual Studio": "Visual Studio"
    },
    {
        "   CodeRush": "Coderush"
    },
    {
        "   Visual Assist": "Visual Assist"
    },
    {
        "   Wing IDE": "Wing Ide"
    },
    {
        "    Xcode": "Xcode"
    },
    {
        "  ": null
    }
]