[
    {
        "CycL in ": null
    },
    {
        "computer science": "computer science"
    },
    {
        " and ": null
    },
    {
        "artificial intelligence": "artificial intelligence"
    },
    {
        " is an ": null
    },
    {
        "ontology language": "ontology language"
    },
    {
        " used by ": null
    },
    {
        "Doug Lenats": "doug lenat"
    },
    {
        " Cyc": "cyc"
    },
    {
        " artificial intelligence project": "list of notable artificial intelligence projects"
    },
    {
        ". ": null
    },
    {
        "Ramanathan V. Guha": "ramanathan v. guha"
    },
    {
        " was instrumental in the design of early versions of the language. There is a close variant of CycL known as MELD.     The original version of CycL was a ": null
    },
    {
        "frame language": "frame language"
    },
    {
        ", but the modern version is not. Rather, it is a ": null
    },
    {
        "declarative language": "declarative language"
    },
    {
        " based on classical ": null
    },
    {
        "first-order logic": "first-order logic"
    },
    {
        ", with extensions for ": null
    },
    {
        "modal operators": "modal logic"
    },
    {
        " and ": null
    },
    {
        "higher order quantification": "higher-order logic"
    },
    {
        ".     CycL is used to represent the knowledge stored in the Cyc Knowledge Base, available from ": null
    },
    {
        "Cycorp": "cycorp"
    },
    {
        ". The source code written in CycL released with the ": null
    },
    {
        "OpenCyc": "cycopencyc"
    },
    {
        " system is licensed as open source, to increase its usefulness in supporting the ": null
    },
    {
        "semantic web": "semantic web"
    },
    {
        ".       CycL has some basic ideas:   Naming the constants used to refer to information for represented concepts.   Grouping the constants together in a generalization/specialization hierarchy .   Stating general rules that support ": null
    },
    {
        "inference": "inference"
    },
    {
        " about the concepts.   The truth or falsity of a CycL sentence is context-relative; these contexts are represented in CycL as Microtheories.       The concept names in Cyc are known as constants. Constants start with $ and are case-sensitive. There are constants for:   Individual items known as individuals, such as $BillClinton or $France.   Collections, such as $Tree-ThePlant or $EquivalenceRelation . A member of a collection is called an instance of that collection.   Truth Functions which can be applied to one or more other concepts and return either true or false. For example, $siblings is the sibling relationship, true if the two arguments are siblings. By convention, truth function constants start with a lower-case letter. Truth functions may be broken down into logical connectives , quantifiers and predicates.   Functions, which produce new terms from given ones. For example, $FruitFn, when provided with an argument describing a type of plants, will return the collection of its fruits. By convention, function constants start with an upper-case letter and end with the string Fn .       The most important predicates are $isa and $genls. The first one describes that one item is an instance of some collection , the second one that one collection is a subcollection of another one . Facts about concepts are asserted using certain CycL sentences. Predicates are written before their arguments, in parentheses:     For example:   : \\;   Bill Clinton belongs to the collection of U.S. presidents and   : \\;   All trees are plants .   : \\;   Paris is the capital of France.         Sentences can also contain variables, strings starting with ? . One important rule asserted about the $isa predicate reads         with the interpretation if OBJ is an instance of the collection SUBSET and SUBSET is a subcollection of SUPERSET, then OBJ is an instance of the collection SUPERSET .     Another more complicated example is one that expresses a rule about a group or category rather than any particular individual, is:         which means that for every instance of the collection $ChordataPhylum , there exists a female animal which is its mother .           The knowledge base is divided into microtheories": null
    }
]