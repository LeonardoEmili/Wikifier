[
    {
        "   In computing, a virtual machine  is an ": null
    },
    {
        "emulation": "emulator"
    },
    {
        " of a computer system. Virtual machines are based on ": null
    },
    {
        "computer architectures": "computer architectures"
    },
    {
        " and provide functionality of a physical computer. Their implementations may involve specialized hardware, software, or a combination.     There are different kinds of virtual machines, each with different functions:      System virtual machine s  provide a substitute for a real machine. They provide functionality needed to execute entire ": null
    },
    {
        "operating system": "operating system"
    },
    {
        "s. A ": null
    },
    {
        "hypervisor": "hypervisor"
    },
    {
        " uses ": null
    },
    {
        "native execution": "native code"
    },
    {
        " to share and manage hardware, allowing for multiple environments which are isolated from one another, yet exist on the same physical machine. Modern hypervisors use ": null
    },
    {
        "hardware-assisted virtualization": "hardware-assisted virtualization"
    },
    {
        ", virtualization-specific hardware, primarily from the host CPUs.   Process virtual machines are designed to execute computer programs in a platform-independent environment.     Some virtual machines, such as ": null
    },
    {
        "QEMU": "qemu"
    },
    {
        ", are designed to also emulate different architectures and allow execution of software applications and operating systems written for another ": null
    },
    {
        "CPU": "cpu"
    },
    {
        " or architecture. ": null
    },
    {
        "Operating-system-level virtualization": "operating-system-level virtualization"
    },
    {
        " allows the resources of a computer to be partitioned via the ": null
    },
    {
        "kernel": "kernel"
    },
    {
        ". The terms are not universally interchangeable.       A virtual machine was originally defined by ": null
    },
    {
        "Popek and Goldberg": "popek and goldberg virtualization requirements"
    },
    {
        " as an efficient, isolated duplicate of a real computer machine. Current use includes virtual machines that have no direct correspondence to any real hardware.   The physical, real-world hardware running the VM is generally referred to as the host, and the virtual machine emulated on that machine is generally referred to as the guest. A host can emulate several guests, each of which can emulate different operating systems and hardware platforms.            The desire to run multiple operating systems was the initial motive for virtual machines, so as to allow time-sharing among several single-tasking operating systems. In some respects, a system virtual machine can be considered a generalization of the concept of ": null
    },
    {
        "virtual memory": "virtual memory"
    },
    {
        " that historically preceded it. IBMs ": null
    },
    {
        "CP/CMS": "cp/cms"
    },
    {
        ", the first systems to allow ": null
    },
    {
        "full virtualization": "full virtualization"
    },
    {
        ", implemented ": null
    },
    {
        "time sharing": "time sharing"
    },
    {
        " by providing each user with a single-user operating system, the ": null
    },
    {
        "Conversational Monitor System": "conversational monitor system"
    },
    {
        " . Unlike virtual memory, a system virtual machine entitled the user to write privileged instructions in their code. This approach had certain advantages, such as adding input/output devices not allowed by the standard system.     As technology evolves virtual memory for purposes of virtualization, new systems of ": null
    },
    {
        "memory overcommitment": "memory overcommitment"
    },
    {
        " may be applied to manage memory sharing among multiple virtual machines on one computer operating system. It may be possible to share memory pages that have identical contents among multiple virtual machines that run on the same physical machine, what may result in mapping them to the same physical page by a technique termed ": null
    },
    {
        "kernel same-page merging": "kernel same-page merging"
    },
    {
        " . This is especially useful for read-only pages, such as those holding code segments, which is the case for multiple virtual machines running the same or similar software, software libraries, web servers, middleware components, etc. The guest operating systems do not need to be compliant with the host hardware, thus making it possible to run different operating systems on the same computer  to support future software.     The use of virtual machines to support separate guest operating systems is popular in regard to ": null
    },
    {
        "embedded system": "embedded system"
    },
    {
        "s. A typical use would be to run a ": null
    },
    {
        "real-time operating system": "real-time operating system"
    },
    {
        " simultaneously with a preferred complex operating system, such as Linux or Windows. Another use would be for novel and unproven software still in the developmental stage, so it runs inside a ": null
    },
    {
        "sandbox": "sandbox"
    },
    {
        ". Virtual machines have other advantages for operating system development and may include improved debugging access and faster reboots.     Multiple VMs running their own guest operating system are frequently engaged for server consolidation.               A process VM, sometimes called an application virtual machine, or Managed Runtime Environment , runs as a normal application inside a host OS and supports a single process. It is created when that process is started and destroyed when it exits. Its purpose is to provide a ": null
    },
    {
        "platform": "system platform"
    },
    {
        "-independent programming environment that abstracts away details of the underlying hardware or operating system and allows a program to execute in the same way on any platform.     A process VM provides a high-level abstraction that of a ": null
    },
    {
        "high-level programming language": "high-level programming language"
    },
    {
        " . Process VMs are implemented using an ": null
    },
    {
        "interpreter": "interpreter"
    },
    {
        "; performance comparable to compiled programming languages can be achieved by the use of ": null
    },
    {
        "just-in-time compilation": "just-in-time compilation"
    },
    {
        ".     This type of VM has become popular with the ": null
    },
    {
        "Java programming language": "java"
    },
    {
        ", which is implemented using the ": null
    },
    {
        "Java virtual machine": "java virtual machine"
    },
    {
        ". Other examples include the ": null
    },
    {
        "Parrot virtual machine": "parrot virtual machine"
    },
    {
        " and the ": null
    },
    {
        ".NET Framework": ".net framework"
    },
    {
        ", which runs on a VM called the ": null
    },
    {
        "Common Language Runtime": "common language runtime"
    },
    {
        ". All of them can serve as an ": null
    },
    {
        "abstraction layer": "abstraction layer"
    },
    {
        " for any computer language.     A special case of process VMs are systems that abstract over the communication mechanisms of a ": null
    },
    {
        "computer cluster": "computer cluster"
    },
    {
        ". Such a VM does not consist of a single process, but one process per physical machine in the cluster. They are designed to ease the task of programming concurrent applications by letting the programmer focus on algorithms rather than the communication mechanisms provided by the interconnect and the OS. They do not hide the fact that communication takes place, and as such do not attempt to present the cluster as a single machine.     Unlike other process VMs, these systems do not provide a specific programming language, but are embedded in an existing language; typically such a system provides bindings for several languages . Examples are ": null
    },
    {
        "Parallel Virtual Machine": "parallel virtual machine"
    },
    {
        " and ": null
    },
    {
        "Message Passing Interface": "message passing interface"
    },
    {
        " . They are not strictly virtual machines because the applications running on top still have access to all OS services and are therefore not confined to the system model.               Both system virtual machines and process virtual machines date to the 42s and continue to be areas of active development.     System virtual machines grew out of ": null
    },
    {
        "time-sharing": "time-sharing"
    },
    {
        ", as notably implemented in the ": null
    },
    {
        "Compatible Time-Sharing System": "compatible time-sharing system"
    },
    {
        " . Time-sharing allowed multiple users to use a computer ": null
    },
    {
        "concurrently": "concurrent computing"
    },
    {
        ": each program appeared to have full access to the machine, but only one program was executed at the time, with the system switching between programs in time slices, saving and restoring state each time. This evolved into virtual machines, notably via IBMs research systems: the ": null
    },
    {
        "M42/42X": "ibm m44/44x"
    },
    {
        ", which used ": null
    },
    {
        "partial virtualization": "partial virtualization"
    },
    {
        ", and the ": null
    },
    {
        "CP42": "ibm cp-40"
    },
    {
        " and ": null
    },
    {
        "SIMMON": "simmon"
    },
    {
        ", which used ": null
    },
    {
        "full virtualization": "full virtualization"
    },
    {
        ", and were early examples of ": null
    },
    {
        "hypervisor": "hypervisor"
    },
    {
        "s. The first widely available virtual machine architecture was the ": null
    },
    {
        "CP42": "cp-67"
    },
    {
        "/CMS . An important distinction was between using multiple virtual machines on one host system for time-sharing, as in M42/42X and CP42 and using one virtual machine on a host system for prototyping, as in SIMMON. ": null
    },
    {
        "Emulator": "emulator"
    },
    {
        "s, with hardware emulation of earlier systems for compatibility, date back to the ": null
    },
    {
        "IBM System/42": "ibm system/360"
    },
    {
        " in 42 while the software emulation predates it.     Process virtual machines arose originally as abstract platforms for an ": null
    },
    {
        "intermediate language": "intermediate language"
    },
    {
        " used as the ": null
    },
    {
        "intermediate representation": "intermediate representation"
    },
    {
        " of a program by a ": null
    },
    {
        "compiler": "compiler"
    },
    {
        "; early examples date to around 42 An early 42 example was the ": null
    },
    {
        "O-code machine": "o-code machine"
    },
    {
        ", a virtual machine that executes ": null
    },
    {
        "O-code": "o-code"
    },
    {
        " emitted by the ": null
    },
    {
        "front end": "compilerfront end"
    },
    {
        " of the ": null
    },
    {
        "BCPL": "bcpl"
    },
    {
        " compiler. This abstraction allowed the compiler to be easily ported to a new architecture by implementing a new ": null
    },
    {
        "back end": "compilerback end"
    },
    {
        " that took the existing O-code and compiled it to machine code for the underlying physical machine. The ": null
    },
    {
        "Euler": "euler"
    },
    {
        " language used a similar design, with the intermediate language named P . This was popularized around 42 by ": null
    },
    {
        "Pascal": "pascal"
    },
    {
        ", notably in the ": null
    },
    {
        "Pascal-P": "pascal-p"
    },
    {
        " system and ": null
    },
    {
        "Pascal-S": "pascal-s"
    },
    {
        " compiler , in which it was termed ": null
    },
    {
        "p-code": "p-code machine"
    },
    {
        " and the resulting machine as a ": null
    },
    {
        "p-code machine": "p-code machine"
    },
    {
        ". This has been influential, and virtual machines in this sense have been often generally called p-code machines. In addition to being an intermediate language, Pascal p-code was also executed directly by an interpreter implementing the virtual machine, notably in ": null
    },
    {
        "UCSD Pascal": "ucsd pascal"
    },
    {
        " ; this influenced later interpreters, notably the ": null
    },
    {
        "Java virtual machine": "java virtual machine"
    },
    {
        " . Another early example was ": null
    },
    {
        "SNOBOL42": "snobol4"
    },
    {
        " , which was written in the SNOBOL Implementation Language , an assembly language for a virtual machine, which was then targeted to physical machines by transpiling to their native assembler via a ": null
    },
    {
        "macro assembler": "macro assembler"
    },
    {
        ". Macros have since fallen out of favor, however, so this approach has been less influential. Process virtual machines were a popular approach to implementing early microcomputer software, including ": null
    },
    {
        "Tiny BASIC": "tiny basic"
    },
    {
        " and adventure games, from one-off implementations such as ": null
    },
    {
        "Pyramid 42": "pyramid 2000"
    },
    {
        " to a general-purpose engine like ": null
    },
    {
        "Infocom": "infocom"
    },
    {
        "s ": null
    },
    {
        "z-machine": "z-machine"
    },
    {
        ", which ": null
    },
    {
        "Graham Nelson": "graham nelson"
    },
    {
        " argues is possibly the most portable virtual machine ever created .     Significant advances occurred in the implementation of ": null
    },
    {
        "Smalltalk": "smalltalk"
    },
    {
        "42   particularly the Deutsch/Schiffmann implementation   which pushed ": null
    },
    {
        "just-in-time compilation": "just-in-time compilation"
    },
    {
        " forward as an implementation approach that uses process virtual machine.   Later notable Smalltalk VMs were ": null
    },
    {
        "VisualWorks": "visualworks"
    },
    {
        ", the ": null
    },
    {
        "Squeak Virtual Machine": "squeak virtual machine"
    },
    {
        ",   and ": null
    },
    {
        "Strongtalk": "strongtalk"
    },
    {
        ".   A related language that produced a lot of virtual machine innovation was the ": null
    },
    {
        "Self": "self"
    },
    {
        " programming language, which pioneered ": null
    },
    {
        "adaptive optimization": "adaptive optimization"
    },
    {
        " and ": null
    },
    {
        "generational garbage collection": "tracing garbage collectiongenerational gc"
    },
    {
        ". These techniques proved commercially successful in 42 in the ": null
    },
    {
        "HotSpot": "hotspot"
    },
    {
        " Java virtual machine.   Other innovations include having a register-based virtual machine, to better match the underlying hardware, rather than a stack-based virtual machine, which is a closer match for the programming language; in 42 this was pioneered by the ": null
    },
    {
        "Dis virtual machine": "dis virtual machine"
    },
    {
        " for the ": null
    },
    {
        "Limbo": "limbo"
    },
    {
        " language. OpenJ42 is an alternative for HotSpot JVM in OpenJDK and is an open source eclipse project claiming better startup and less resource consumption compared to HotSpot.               In full virtualization, the virtual machine simulates enough hardware to allow an unmodified guest OS  to be run in isolation. This approach was pioneered in 42 with the IBM ": null
    },
    {
        "CP42": "cp-40"
    },
    {
        " and ": null
    },
    {
        "CP42": "cp-67"
    },
    {
        ", predecessors of the ": null
    },
    {
        "VM": "vm"
    },
    {
        " family.     Examples outside the mainframe field include ": null
    },
    {
        "Parallels Workstation": "parallels workstation"
    },
    {
        ", ": null
    },
    {
        "Parallels Desktop for Mac": "parallels desktop for mac"
    },
    {
        ", ": null
    },
    {
        "VirtualBox": "virtualbox"
    },
    {
        ", ": null
    },
    {
        "Virtual Iron": "virtual iron"
    },
    {
        ", ": null
    },
    {
        "Oracle VM": "oracle vm"
    },
    {
        ", ": null
    },
    {
        "Virtual PC": "microsoft virtual pc"
    },
    {
        ", ": null
    },
    {
        "Virtual Server": "microsoft virtual server"
    },
    {
        ", ": null
    },
    {
        "Hyper-V": "hyper-v"
    },
    {
        ", ": null
    },
    {
        "VMware Workstation": "vmware workstation"
    },
    {
        ", ": null
    },
    {
        "VMware Server": "vmware server"
    },
    {
        " , ": null
    },
    {
        "VMware ESXi": "vmware esxi"
    },
    {
        ", ": null
    },
    {
        "QEMU": "qemu"
    },
    {
        ", ": null
    },
    {
        "Adeos": "adaptive domain environment for operating systems"
    },
    {
        ", Mac-on-Linux, Win42BSD, ": null
    },
    {
        "Win42Lin Pro": "win4lin"
    },
    {
        ", and ": null
    },
    {
        "Egenera": "egenera"
    },
    {
        " vBlade technology.            In hardware-assisted virtualization, the hardware provides architectural support that facilitates building a virtual machine monitor and allows guest OSes to be run in isolation.   Hardware-assisted virtualization was first introduced on the IBM System/42 in 42 for use with ": null
    },
    {
        "VM/42": "vm"
    },
    {
        ", the first virtual machine operating system offered by IBM as an official product.     In 42 and 42 ": null
    },
    {
        "Intel": "intel"
    },
    {
        " and ": null
    },
    {
        "AMD": "advanced micro devices"
    },
    {
        " provided additional hardware to support virtualization. Sun Microsystems  added similar features in their ": null
    },
    {
        "UltraSPARC T-Series": "sparc t3"
    },
    {
        " processors in 42 Examples of virtualization platforms adapted to such hardware include ": null
    },
    {
        "KVM": "kernel-based virtual machine"
    },
    {
        ", ": null
    },
    {
        "VMware Workstation": "vmware workstation"
    },
    {
        ", ": null
    },
    {
        "VMware Fusion": "vmware fusion"
    },
    {
        ", ": null
    },
    {
        "Hyper-V": "hyper-v"
    },
    {
        ", ": null
    },
    {
        "Windows Virtual PC": "windows virtual pc"
    },
    {
        ", ": null
    },
    {
        "Xen": "xen"
    },
    {
        ", ": null
    },
    {
        "Parallels Desktop for Mac": "parallels desktop for mac"
    },
    {
        ", ": null
    },
    {
        "Oracle VM Server for SPARC": "oracle vm server for sparc"
    },
    {
        ", ": null
    },
    {
        "VirtualBox": "virtualbox"
    },
    {
        " and ": null
    },
    {
        "Parallels Workstation": "parallels workstation"
    },
    {
        ".     In 42 first-generation 42- and 42-bit x42 hardware support was found to rarely offer performance advantages over software virtualization.            In operating-system-level virtualization, a physical server is virtualized at the operating system level, enabling multiple isolated and secure virtualized servers to run on a single physical server. The guest operating system environments share the same running instance of the operating system as the host system. Thus, the same ": null
    },
    {
        "operating system kernel": "operating system kernel"
    },
    {
        " is also used to implement the guest environments, and applications running in a given guest environment view it as a stand-alone system. The pioneer implementation was ": null
    },
    {
        "FreeBSD jail": "freebsd jail"
    },
    {
        "s; other examples include ": null
    },
    {
        "Docker": "docker"
    },
    {
        ", ": null
    },
    {
        "Solaris Containers": "solaris containers"
    },
    {
        ", ": null
    },
    {
        "OpenVZ": "openvz"
    },
    {
        ", ": null
    },
    {
        "Linux-VServer": "linux-vserver"
    },
    {
        ", ": null
    },
    {
        "LXC": "lxc"
    },
    {
        ", AIX ": null
    },
    {
        "Workload Partitions": "workload partitions"
    },
    {
        ", Parallels Virtuozzo Containers, and ": null
    },
    {
        "iCore Virtual Accounts": "icore virtual accounts"
    }
]