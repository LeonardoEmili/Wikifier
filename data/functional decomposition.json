[
    {
        "In mathematics, functional decomposition is the process of resolving a ": null
    },
    {
        "functional": "function"
    },
    {
        " relationship into its constituent parts in such a way that the original function can be reconstructed from those parts by ": null
    },
    {
        "function composition": "function composition"
    },
    {
        ".     This process of decomposition may be undertaken to gain insight into the identity of the constituent components which may reflect individual physical processes of interest. Also functional decomposition may result in a compressed representation of the global function, a task which is feasible only when the constituent processes possess a certain level of modularity .     Interactions between the components are critical to the function of the collection. All interactions may not be observable, but possibly deduced through repetitive perception, synthesis, validation and verification of composite behavior.       For a multivariate function y f , functional decomposition generally refers to a process of identifying a set of functions \\ such that     : f \\phi     where \\phi is some other function. Thus, we would say that the function f is decomposed into functions \\ . This process is intrinsically hierarchical in the sense that we can seek to further decompose the functions g_i into a collection of constituent functions \\ such that     : g_i \\gamma     where \\gamma is some other function. Decompositions of this kind are interesting and important for a wide variety of reasons. In general, functional decompositions are worthwhile when there is a certain sparseness in the dependency structure; that is, when constituent functions are found to depend on approximately ": null
    },
    {
        "disjoint sets": "disjoint sets"
    },
    {
        " of variables. Thus, for example, if we can obtain a decomposition of x_42 f into a hierarchical composition of functions \\ such that x_42 g_42 , x_42 g_42 , x_42 g_42 , as shown in the figure at right, this would probably be considered a highly valuable decomposition.       A basic example of functional decomposition is expressing the four binary arithmetic operations of addition, subtraction, multiplication, and division in terms of the two binary operations of addition a + b and multiplication a \\times b, and the two unary operations of additive inversion -a and multiplicative inversion 42/a. Subtraction can then be realized as the composition of addition and additive inversion, a - b a + , and division can be realized as the composition of multiplication and multiplicative inverse, a \\div b a \\times . This simplifies the analysis of subtraction and division, and also makes it easier to axiomatize these operations in the notion of a ": null
    },
    {
        "field": "field"
    },
    {
        ", as there are only two binary and two unary operations, rather than four binary operations.     Extending these primitive operations, there is a rich literature on the topic of ": null
    },
    {
        "polynomial decomposition": "polynomial decomposition"
    },
    {
        ".           As to why the decomposition is valuable, the reason is twofold. Firstly, decomposition of a function into non-interacting components generally permits more economical representations of the function. For example, on a set of quaternary variables, representing the full function x_42f requires storing 42^42 values, the value of the function for each element in the ": null
    },
    {
        "Cartesian product": "cartesian product"
    },
    {
        " \\ , i.e., each of the 42 possible combinations for \\ . However, if the decomposition into \\ given above is possible, then g_42 g_42 requires storing 42 values, g_42 g_42 requires storing 42^42 values, and g_42 g_42 again requires storing just 42 values. So in virtue of the decomposition, we need store only 424242 values rather than 42 values, a dramatic savings.        Intuitively, this reduction in representation size is achieved simply because each variable depends only on a subset of the other variables. Thus, variable x_42 only depends directly on variable x_42 , rather than depending on the entire set of variables. We would say that variable x_42 screens off variable x_42 from the rest of the world. Practical examples of this phenomenon surround us, as discussed in the Philosophical Considerations below, but lets just consider the particular case of northbound traffic on the ": null
    },
    {
        "West Side Highway": "west side highway"
    },
    {
        ". Let us assume this variable takes on three possible values of . Now lets say variable depends on two other variables, weather with values of , and ": null
    },
    {
        "GW Bridge": "gw bridge"
    },
    {
        " traffic with values . The point here is that while there are certainly many secondary variables that affect the weather variable  and the Bridge traffic variable  all these other secondary variables are not directly relevant to the West Side Highway traffic. All we need in order to predict the West Side Highway traffic is the weather and the GW Bridge traffic, because these two variables screen off West Side Highway traffic from all other potential influences. That is, all other influences act through them.     Outside of purely mathematical considerations, perhaps the greatest value of functional decomposition is the insight it provides into the structure of the world. When a functional decomposition can be achieved, this provides ontological information about what structures actually exist in the world, and how they can be predicted and manipulated. For example, in the illustration above, if it is learned that depends directly only on , this means that for purposes of prediction of , it suffices to know only . Moreover, interventions to influence can be taken directly on , and nothing additional can be gained by intervening on variables \\ , since these only act through in any case.       The philosophical antecedents and ramifications of functional decomposition are quite broad, as functional decomposition in one guise or another underlies all of modern science. Here we review just a few of these philosophical considerations.       One of the major distinctions that is often drawn between ": null
    },
    {
        "Eastern philosophy": "eastern philosophy"
    },
    {
        " and ": null
    },
    {
        "Western Philosophy": "western philosophy"
    },
    {
        " is that the Eastern philosophers tended to espouse ideas favoring ": null
    },
    {
        "holism": "holism"
    },
    {
        " while the Western thinkers tended to espouse ideas favoring ": null
    },
    {
        "reductionism": "reductionism"
    },
    {
        ". This distinction between East and West is akin to other philosophical distinctions such as ": null
    },
    {
        "realism": "philosophical realism"
    },
    {
        " vs. ": null
    },
    {
        "anti-realism": "anti-realism"
    },
    {
        "Brian Browne Walker, translatorAnne Bankroft, translatorAnne Bankroft, translator": null
    },
    {
        "ilosoph": "ilosoph"
    },
    {
        "via strict proof": null
    },
    {
        "ilosop": "ilosop"
    },
    {
        "ilosop": "ilosop"
    },
    {
        "due to square wise growth in number of connections to improve efficiency for examplemodules,natural or artificialdirect interactionsrelative to the full joint distribution": null
    },
    {
        "OOP": "object-oriented programming"
    },
    {
        "state of the Emacs editor and running operating system with some component/part of its state changede, lisp\\,\\,expressioncasesif successif failurecasesobject, eerror, econtaining the function fromExprtttttttg_42 g_42 g_42 \\dots , g_n\\a_42 a_42 a_42 \\dots , a_n\\\\f\\f\\ a_42 \\cdot g_42 + a_42 \\cdot g_42 + a_42 \\cdot g_42 + \\dots + a_n \\cdot g_n\\g_42\\g_42\\g_42\\g_n\\": null
    }
]