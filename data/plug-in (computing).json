[
    {
        "      In ": null
    },
    {
        "computing": "computing"
    },
    {
        ", a plug-in  is a ": null
    },
    {
        "software component": "software component"
    },
    {
        " that adds a specific feature to an existing ": null
    },
    {
        "computer program": "computer program"
    },
    {
        ". When a program supports plug-ins, it enables customization.     ": null
    },
    {
        "Web browsers": "web browser"
    },
    {
        "have historically allowed ": null
    },
    {
        "executables": "executable"
    },
    {
        "as plug-ins, though they are now mostly ": null
    },
    {
        "deprecated": "deprecation"
    },
    {
        ".  Two plug-in examples are the ": null
    },
    {
        "Adobe Flash Player": "adobe flash player"
    },
    {
        " for playing videos and a ": null
    },
    {
        "Java virtual machine": "java virtual machine"
    },
    {
        " for running ": null
    },
    {
        "applet": "java applet"
    },
    {
        "s.     A ": null
    },
    {
        "theme": "theme"
    },
    {
        " or ": null
    },
    {
        "skin": "skin"
    },
    {
        " is a preset package containing additional or changed graphical appearance details, achieved by the use of a graphical user interface that can be applied to specific software and websites to suit the purpose, topic, or tastes of different users to customize the look and feel of a piece of computer software or an operating system front-end GUI .       Applications support plug-ins for many reasons. Some of the main reasons include:   to enable ": null
    },
    {
        "third-party developers": "third-party developer"
    },
    {
        "to create abilities which extend an application   to support easily adding new features   to reduce the size of an application   to separate ": null
    },
    {
        "source code": "source code"
    },
    {
        " from an application because of incompatible ": null
    },
    {
        "software license": "software license"
    },
    {
        "s.     Types of applications and why they use plug-ins:     ": null
    },
    {
        "Audio editors": "digital audio editor"
    },
    {
        " use plug-ins to generate, process or analyze sound. ": null
    },
    {
        "Ardour": "ardour"
    },
    {
        " and ": null
    },
    {
        "Audacity": "audacity"
    },
    {
        " are examples of such editors.   ": null
    },
    {
        "Digital audio workstations": "digital audio workstation"
    },
    {
        " use plug-ins to generate sound or process it. Examples include ": null
    },
    {
        "Logic Pro X": "logic pro"
    },
    {
        " and ": null
    },
    {
        "Pro Tools": "pro tools"
    },
    {
        ".   ": null
    },
    {
        "Email clients": "email client"
    },
    {
        "use plug-ins to decrypt and encrypt email. ": null
    },
    {
        "Pretty Good Privacy": "pretty good privacy"
    },
    {
        " is an example of such plug-ins.   ": null
    },
    {
        "Video game console emulators": "video game console emulator"
    },
    {
        "often use plug-ins to modularize the separate subsystems of the devices they seek to emulate.          For example, the ": null
    },
    {
        "PCSX2": "pcsx2"
    },
    {
        " emulator makes use of video, audio, optical, etc. plug-ins for those respective components of the ": null
    },
    {
        "PlayStation 2": "playstation 2"
    },
    {
        ".   ": null
    },
    {
        "Graphics software": "graphics software"
    },
    {
        " use plug-ins to support file formats and process images.    ": null
    },
    {
        "Media players": "media player"
    },
    {
        " use plug-ins to support file formats and apply filters. ": null
    },
    {
        "foobar2000": "foobar2000"
    },
    {
        ", ": null
    },
    {
        "GStreamer": "gstreamer"
    },
    {
        ", ": null
    },
    {
        "Quintessential": "quintessential media player"
    },
    {
        ", ": null
    },
    {
        "VST": "virtual studio technology"
    },
    {
        ", ": null
    },
    {
        "Winamp": "winamp"
    },
    {
        ", ": null
    },
    {
        "XMMS": "xmms"
    },
    {
        " are examples of such media players.   ": null
    },
    {
        "Packet sniffers": "packet sniffer"
    },
    {
        "use plug-ins to decode packet formats. ": null
    },
    {
        "OmniPeek": "omnipeek"
    },
    {
        " is an example of such packet sniffers.   ": null
    },
    {
        "Remote sensing applications": "remote sensing application"
    },
    {
        "use plug-ins to process data from different sensor types; e.g., ": null
    },
    {
        "Opticks": "opticks"
    },
    {
        ".   ": null
    },
    {
        "Text editors": "text editors"
    },
    {
        " and ": null
    },
    {
        "Integrated development environments": "integrated development environment"
    },
    {
        "use plug-ins to support ": null
    },
    {
        "programming languages": "programming languages"
    },
    {
        " or enhance development process e.g., ": null
    },
    {
        "Visual Studio": "microsoft visual studio"
    },
    {
        ", ": null
    },
    {
        "RAD Studio": "rad studio"
    },
    {
        ", ": null
    },
    {
        "Eclipse": "eclipse"
    },
    {
        ", ": null
    },
    {
        "IntelliJ IDEA": "intellij idea"
    },
    {
        ", ": null
    },
    {
        "jEdit": "jedit"
    },
    {
        " and ": null
    },
    {
        "MonoDevelop": "monodevelop"
    },
    {
        " support plug-ins. Visual Studio itself can be plugged into other applications via ": null
    },
    {
        "Visual Studio Tools for Office": "visual studio tools for office"
    },
    {
        " and ": null
    },
    {
        "Visual Studio Tools for Applications": "visual studio tools for applications"
    },
    {
        ".   ": null
    },
    {
        "Web browsers": "web browser"
    },
    {
        "have historically used ": null
    },
    {
        "executables": "executable"
    },
    {
        "as plug-ins, though they are now mostly ": null
    },
    {
        "deprecated": "deprecation"
    },
    {
        ". Examples include ": null
    },
    {
        "Adobe Flash Player": "adobe flash player"
    },
    {
        ", ": null
    },
    {
        "Java SE": "java se"
    },
    {
        ", ": null
    },
    {
        "QuickTime": "quicktime"
    },
    {
        ", ": null
    },
    {
        "Microsoft Silverlight": "microsoft silverlight"
    },
    {
        " and ": null
    },
    {
        "Unity": "unity"
    },
    {
        ".               The host application provides services which the plug-in can use, including a way for plug-ins to register themselves with the host application and a ": null
    },
    {
        "protocol": "protocol"
    },
    {
        " for the exchange of data with plug-ins. Plug-ins depend on the services provided by the host application and do not usually work by themselves. Conversely, the host application operates independently of the plug-ins, making it possible for end-users to add and update plug-ins dynamically without needing to make changes to the host application.  – Description of the difference between Mozilla Firefox plugins and extensions under the general term add-on.  – Description of the Wordpress Plug-in architecture.     Programmers typically implement plug-in functionality using ": null
    },
    {
        "shared libraries": "shared library"
    },
    {
        ", which get ": null
    },
    {
        "dynamically loaded": "dynamic loading"
    },
    {
        " at run time, installed in a place prescribed by the host application. ": null
    },
    {
        "HyperCard": "hypercard"
    },
    {
        " supported a similar facility, but more commonly included the plug-in code in the HyperCard documents  themselves. Thus the HyperCard stack became a self-contained application in its own right, distributable as a single entity that end-users could run without the need for additional installation-steps. Programs may also implement plugins by loading a directory of simple ": null
    },
    {
        "script": "script"
    },
    {
        " files written in a ": null
    },
    {
        "scripting language": "scripting language"
    },
    {
        " like ": null
    },
    {
        "Python": "python"
    },
    {
        " or ": null
    },
    {
        "Lua": "lua"
    },
    {
        ".          In ": null
    },
    {
        "Mozilla Foundation": "mozilla foundation"
    },
    {
        " definitions, the words add-on , ": null
    },
    {
        "extension": "browser extension"
    },
    {
        " and plug-in are not synonyms. Add-on can refer to anything that extends the functions of a Mozilla application. Extensions comprise a subtype, albeit the most common and the most powerful one. Mozilla applications come with integrated add-on managers that, similar to ": null
    },
    {
        "package manager": "package manager"
    },
    {
        "s, install, update and manage extensions. The term, Plug-in , however, strictly refers to ": null
    },
    {
        "NPAPI": "npapi"
    },
    {
        "-based web content renderers. Plug-ins are being deprecated.        Plug-ins appeared as early as the mid 1970s, when the ": null
    },
    {
        "EDT": "edt"
    },
    {
        " text editor": "text editor"
    },
    {
        " running on the ": null
    },
    {
        "Unisys": "unisys"
    },
    {
        " VS/9": "vs/9"
    },
    {
        " operating system": "operating system"
    },
    {
        " using the ": null
    },
    {
        "UNIVAC Series 90": "univac series 90"
    },
    {
        "mainframe computers": "mainframe computer"
    },
    {
        "provided the ability to run a program from the editor and to allow such a program to access the editor buffer, thus allowing an external program to access an edit session in memory. EDT Text Editor Reference Manual, ": null
    },
    {
        "Cinnaminson, New Jersey": "cinnaminson, new jersey"
    },
    {
        ": ": null
    },
    {
        "Unisys Corporation": "unisys corporation"
    },
    {
        ", 1975 The plug-in program could make calls to the editor to have it perform text-editing services upon the buffer that the editor shared with the plug-in. The ": null
    },
    {
        "Waterloo": "university of waterloo"
    },
    {
        " Fortran ": null
    },
    {
        "compiler": "compiler"
    },
    {
        " used this feature to allow interactive compilation of ": null
    },
    {
        "Fortran": "fortran"
    },
    {
        " programs edited by EDT.     Very early ": null
    },
    {
        "PC": "personal computer"
    },
    {
        " software applications to incorporate plug-in functionality included HyperCard and ": null
    },
    {
        "QuarkXPress": "quarkxpress"
    },
    {
        " on the ": null
    },
    {
        "Macintosh": "apple macintosh"
    },
    {
        ", both released in 1987. In 1988, ": null
    },
    {
        "Silicon Beach Software": "silicon beach software"
    },
    {
        " included plug-in functionality in ": null
    },
    {
        "Digital Darkroom": "digital darkroom"
    },
    {
        " and ": null
    },
    {
        "SuperPaint": "superpaint"
    },
    {
        ", and Ed Bomke coined the term plug-in.": null
    }
]