[
    {
        "This is a list of ": null
    },
    {
        "data structure": "data structure"
    },
    {
        "s. For a wider list of terms, see ": null
    },
    {
        "list of terms relating to algorithms and data structures": "list of terms relating to algorithms and data structures"
    },
    {
        ". For a comparison of running time a subset of this list see ": null
    },
    {
        "comparison of data structures": "comparison of data structures"
    },
    {
        ".         ": null
    },
    {
        "Primitive type": "primitive type"
    },
    {
        "s ": null
    },
    {
        "Boolean": "boolean data type"
    },
    {
        ", true or false.   ": null
    },
    {
        "Character": "character"
    },
    {
        " Floating-point": "floating point"
    },
    {
        " numbers, limited precision approximations of ": null
    },
    {
        "real number": "real number"
    },
    {
        " values.   Including ": null
    },
    {
        "Single precision": "single precision"
    },
    {
        " and ": null
    },
    {
        "Double precision": "double precision"
    },
    {
        " IEEE 42": "ieee 754"
    },
    {
        " Floats, among ": null
    },
    {
        "others": ":category:floating_point_types"
    },
    {
        " Fixed-point numbers": "fixed-point arithmetic"
    },
    {
        " Integer": "integer"
    },
    {
        ", integral or fixed-precision values.   ": null
    },
    {
        "Reference": "reference"
    },
    {
        " , a small value referring to another objects address in memory, possibly a much larger one.   ": null
    },
    {
        "Enumerated type": "enumerated type"
    },
    {
        ", a small set of uniquely named values.     ": null
    },
    {
        "Composite type": "composite type"
    },
    {
        "s or non-primitive type ": null
    },
    {
        "Array": "array data structure"
    },
    {
        "    Record": "record"
    },
    {
        "    Union": "union"
    },
    {
        "      Abstract data types": "abstract data types"
    },
    {
        " Container": "container"
    },
    {
        " List": "list"
    },
    {
        " Tuple": "tuple"
    },
    {
        " Multimap": "multimap"
    },
    {
        "    Set": "set"
    },
    {
        " Multiset ": "multiset"
    },
    {
        " Stack": "stack"
    },
    {
        " Queue": "queue"
    },
    {
        "    Double-ended queue": "double-ended queue"
    },
    {
        " Graph": "graph"
    },
    {
        "      Some properties of abstract data types:          Order means the insertion sequence counts. Unique means that duplicate elements are not allowed, based on some inbuilt or, alternatively, user-defined rule for comparing elements.       A data structure is said to be linear if its elements form a sequence.       ": null
    },
    {
        "Array": "array data structure"
    },
    {
        " Bit array": "bit array"
    },
    {
        " Bit field": "bit field"
    },
    {
        " Bitboard": "bitboard"
    },
    {
        " Bitmap": "bitmap"
    },
    {
        " Circular buffer": "circular buffer"
    },
    {
        " Control table": "control table"
    },
    {
        " Image": "system image"
    },
    {
        " Dope vector": "dope vector"
    },
    {
        " Dynamic array": "dynamic array"
    },
    {
        " Gap buffer": "gap buffer"
    },
    {
        " Hashed array tree": "hashed array tree"
    },
    {
        " Heightmap": "heightmap"
    },
    {
        " Lookup table": "lookup table"
    },
    {
        " Matrix": "matrix"
    },
    {
        " Parallel array": "parallel array"
    },
    {
        " Sorted array": "sorted array"
    },
    {
        " Sparse matrix": "sparse matrix"
    },
    {
        " Iliffe vector": "iliffe vector"
    },
    {
        " Variable-length array": "variable-length array"
    },
    {
        " Doubly linked list": "doubly linked list"
    },
    {
        " Array list": "array list"
    },
    {
        " Linked list": "linked list"
    },
    {
        " Association list": "association list"
    },
    {
        " Self-organizing list": "self-organizing list"
    },
    {
        " Skip list": "skip list"
    },
    {
        " Unrolled linked list": "unrolled linked list"
    },
    {
        " VList": "vlist"
    },
    {
        " Conc-tree list": "conc-tree list"
    },
    {
        " Xor linked list": "xor linked list"
    },
    {
        " Zipper": "zipper"
    },
    {
        " Doubly connected edge list": "doubly connected edge list"
    },
    {
        " also known as half-edge   ": null
    },
    {
        "Difference list": "difference list"
    },
    {
        " Free list": "free list"
    },
    {
        "        AA tree": "aa tree"
    },
    {
        " AVL tree": "avl tree"
    },
    {
        " Binary search tree": "binary search tree"
    },
    {
        " Binary tree": "binary tree"
    },
    {
        " Cartesian tree": "cartesian tree"
    },
    {
        " Conc-tree list": "conc-tree list"
    },
    {
        " Left-child right-sibling binary tree": "left-child right-sibling binary tree"
    },
    {
        " Order statistic tree": "order statistic tree"
    },
    {
        " Pagoda": "pagoda"
    },
    {
        " Randomized binary search tree": "randomized binary search tree"
    },
    {
        " Red–black tree": "red–black tree"
    },
    {
        " Rope": "rope"
    },
    {
        " Scapegoat tree": "scapegoat tree"
    },
    {
        " Self-balancing binary search tree": "self-balancing binary search tree"
    },
    {
        " Splay tree": "splay tree"
    },
    {
        " T-tree": "t-tree"
    },
    {
        " Tango tree": "tango tree"
    },
    {
        " Threaded binary tree": "threaded binary tree"
    },
    {
        " Top tree": "top tree"
    },
    {
        " Treap": "treap"
    },
    {
        " WAVL tree": "wavl tree"
    },
    {
        " Weight-balanced tree": "weight-balanced tree"
    },
    {
        " B-tree": "b-tree"
    },
    {
        " B+ tree": "b+ tree"
    },
    {
        " B-tree": "b-tree"
    },
    {
        " B sharp tree": "b sharp tree"
    },
    {
        " Dancing tree": "dancing tree"
    },
    {
        " 4242 tree": "2-3 tree"
    },
    {
        " 424242 tree": "2-3-4 tree"
    },
    {
        " Queap": "queap"
    },
    {
        " Fusion tree": "fusion tree"
    },
    {
        " Bx-tree": "bx-tree moving object index"
    },
    {
        " AList": "alist"
    },
    {
        " Heap": "heap"
    },
    {
        " Binary heap": "binary heap"
    },
    {
        " B-heap": "b-heap"
    },
    {
        " Weak heap": "weak heap"
    },
    {
        " Binomial heap": "binomial heap"
    },
    {
        " Fibonacci heap": "fibonacci heap"
    },
    {
        " AF-heap": "af-heap"
    },
    {
        " Leonardo Heap": "smoothsort"
    },
    {
        " 4242 heap": "2-3 heap"
    },
    {
        " Soft heap": "soft heap"
    },
    {
        " Pairing heap": "pairing heap"
    },
    {
        " Leftist heap": "leftist tree"
    },
    {
        " Treap": "treap"
    },
    {
        " Beap": "beap"
    },
    {
        " Skew heap": "skew heap"
    },
    {
        " Ternary heap": "ternary heap"
    },
    {
        " D-ary heap": "d-ary heap"
    },
    {
        " Brodal queue": "brodal queue"
    },
    {
        "       In these data structures each tree node compares a bit slice of key values.   ": null
    },
    {
        "Tree ": "tree"
    },
    {
        " Radix tree": "radix tree"
    },
    {
        " Suffix tree": "suffix tree"
    },
    {
        " Suffix array": "suffix array"
    },
    {
        " Compressed suffix array": "compressed suffix array"
    },
    {
        " FM-index": "fm-index"
    },
    {
        " Generalised suffix tree": "generalised suffix tree"
    },
    {
        " B-tree": "b-tree"
    },
    {
        " Judy array": "judy array"
    },
    {
        " X-fast tree": "x-fast tree"
    },
    {
        " Y-fast tree": "y-fast tree"
    },
    {
        " Merkle tree": "merkle tree"
    },
    {
        " Ctree": "ctree"
    },
    {
        " Ternary tree": "ternary tree"
    },
    {
        " K-ary tree": "k-ary tree"
    },
    {
        " And–or tree": "and–or tree"
    },
    {
        " -tree": "-tree"
    },
    {
        " Link/cut tree": "link/cut tree"
    },
    {
        " SPQR-tree": "spqr-tree"
    },
    {
        " Spaghetti stack": "spaghetti stack"
    },
    {
        " Disjoint-set data structure": "disjoint-set data structure"
    },
    {
        " Fusion tree": "fusion tree"
    },
    {
        " Enfilade": "enfilade"
    },
    {
        " Exponential tree": "exponential tree"
    },
    {
        " Fenwick tree": "fenwick tree"
    },
    {
        " Van Emde Boas tree": "van emde boas tree"
    },
    {
        " Rose tree": "rose tree"
    },
    {
        "       These are data structures used for ": null
    },
    {
        "space partitioning": "space partitioning"
    },
    {
        " or ": null
    },
    {
        "binary space partitioning": "binary space partitioning"
    },
    {
        ".   ": null
    },
    {
        "Segment tree": "segment tree"
    },
    {
        " Interval tree": "interval tree"
    },
    {
        " Range tree": "range tree"
    },
    {
        " Bin": "bin"
    },
    {
        " K-d tree": "k-d tree"
    },
    {
        " Implicit k-d tree": "implicit k-d tree"
    },
    {
        " Min/max k-d tree": "min/max kd-tree"
    },
    {
        " Relaxed k-d tree": "relaxed k-d tree"
    },
    {
        " Adaptive k-d tree": "adaptive k-d tree"
    },
    {
        " Quadtree": "quadtree"
    },
    {
        " Octree": "octree"
    },
    {
        " Linear octree": "linear octree"
    },
    {
        " Z-order": "z-order"
    },
    {
        " UB-tree": "ub-tree"
    },
    {
        " R-tree": "r-tree"
    },
    {
        " R+ tree": "r+ tree"
    },
    {
        " R tree": "r tree"
    },
    {
        " Hilbert R-tree": "hilbert r-tree"
    },
    {
        " X-tree": "x-tree"
    },
    {
        " Metric tree": "metric tree"
    },
    {
        " Cover tree": "cover tree"
    },
    {
        " M-tree": "m-tree"
    },
    {
        " VP-tree": "vp-tree"
    },
    {
        " BK-tree": "bk-tree"
    },
    {
        " Bounding interval hierarchy": "bounding interval hierarchy"
    },
    {
        " Bounding volume hierarchy": "bounding volume hierarchy"
    },
    {
        " BSP tree": "bsp tree"
    },
    {
        " Rapidly exploring random tree": "rapidly exploring random tree"
    },
    {
        " Abstract syntax tree": "abstract syntax tree"
    },
    {
        " Parse tree": "parse tree"
    },
    {
        " Decision tree": "decision tree"
    },
    {
        " Alternating decision tree": "alternating decision tree"
    },
    {
        " Minimax tree": "minmax"
    },
    {
        " Expectiminimax tree": "expectiminimax tree"
    },
    {
        " Finger tree": "finger tree"
    },
    {
        " Expression tree": "expression tree"
    },
    {
        " Log-structured merge-tree": "log-structured merge-tree"
    },
    {
        " Lexicographic Search Tree": "lexicographic search tree"
    },
    {
        "     Hash-based structures ": null
    },
    {
        "Bloom filter": "bloom filter"
    },
    {
        " Count-Min sketch": "count-min sketch"
    },
    {
        " Distributed hash table": "distributed hash table"
    },
    {
        " Double hashing": "double hashing"
    },
    {
        " Dynamic perfect hash table": "dynamic perfect hashing"
    },
    {
        " Hash array mapped trie": "hash array mapped trie"
    },
    {
        " Hash list": "hash list"
    },
    {
        " Hash table": "hash table"
    },
    {
        " Hash tree": "hash tree"
    },
    {
        " Hash trie": "hash trie"
    },
    {
        " Koorde": "koorde"
    },
    {
        " Prefix hash tree": "prefix hash tree"
    },
    {
        " Rolling hash": "rolling hash"
    },
    {
        " MinHash": "minhash"
    },
    {
        " Quotient filter": "quotient filter"
    },
    {
        " Ctrie": "ctrie"
    },
    {
        "       Many ": null
    },
    {
        "graph": "graph"
    },
    {
        "-based data structures are used in computer science and related fields:     ": null
    },
    {
        "Graph": "graph"
    },
    {
        " Adjacency list": "adjacency list"
    },
    {
        " Adjacency matrix": "adjacency matrix"
    },
    {
        " Graph-structured stack": "graph-structured stack"
    },
    {
        " Scene graph": "scene graph"
    },
    {
        " Decision tree": "decision tree"
    },
    {
        " Binary decision diagram": "binary decision diagram"
    },
    {
        " Zero-suppressed decision diagram": "zero-suppressed decision diagram"
    },
    {
        " And-inverter graph": "and-inverter graph"
    },
    {
        " Directed graph": "directed graph"
    },
    {
        " Directed acyclic graph": "directed acyclic graph"
    },
    {
        " Propositional directed acyclic graph": "propositional directed acyclic graph"
    },
    {
        " Multigraph": "multigraph"
    },
    {
        " Hypergraph": "hypergraph"
    },
    {
        " Lightmap": "lightmap"
    },
    {
        " Winged edge": "winged edge"
    },
    {
        " Quad-edge": "quad-edge"
    },
    {
        " Routing table": "routing table"
    },
    {
        " Symbol table": "symbol table"
    }
]