[
    {
        "An integrated development environment  is a ": null
    },
    {
        "software application": "Application Software"
    },
    {
        " that provides comprehensive facilities to ": null
    },
    {
        "computer programmers": "Computer Programmer"
    },
    {
        "for ": null
    },
    {
        "software development": "Software Development"
    },
    {
        ". An IDE normally consists of at least a ": null
    },
    {
        "source code editor": "Source Code Editor"
    },
    {
        ", ": null
    },
    {
        "build automation": "Build Automation"
    },
    {
        " tools, and a ": null
    },
    {
        "debugger": "Debugger"
    },
    {
        ". Some IDEs, such as ": null
    },
    {
        "NetBeans": "Netbeans"
    },
    {
        " and ": null
    },
    {
        "Eclipse": "Eclipse"
    },
    {
        ", contain the necessary ": null
    },
    {
        "compiler": "Compiler"
    },
    {
        ", ": null
    },
    {
        "interpreter": "Interpreter"
    },
    {
        ", or both; others, such as ": null
    },
    {
        "SharpDevelop": "Sharpdevelop"
    },
    {
        " and ": null
    },
    {
        "Lazarus": "Lazarus"
    },
    {
        ", do not.     The boundary between an IDE and other parts of the broader software development environment is not well-defined; sometimes a ": null
    },
    {
        "version control system": "Version Control System"
    },
    {
        " or various tools to simplify the construction of a ": null
    },
    {
        "graphical user interface": "Graphical User Interface"
    },
    {
        " are integrated. Many modern IDEs also have a ": null
    },
    {
        "class browser": "Class Browser"
    },
    {
        ", an ": null
    },
    {
        "object browser": "Object Browser"
    },
    {
        ", and a ": null
    },
    {
        "class hierarchy diagram": "Class Diagram"
    },
    {
        " for use in ": null
    },
    {
        "object-oriented software development": "Object-Oriented Programming"
    },
    {
        ".       Integrated development environments are designed to maximize programmer productivity by providing tight-knit components with similar ": null
    },
    {
        "user interface": "User Interface"
    },
    {
        "s. IDEs present a single program in which all development is done. This program typically provides many features for authoring, modifying, compiling, deploying and debugging software. This contrasts with software development using unrelated tools, such as ": null
    },
    {
        "vi": "Vi"
    },
    {
        ", ": null
    },
    {
        "GCC": "Gnu Compiler Collection"
    },
    {
        " or ": null
    },
    {
        "make": "Make"
    },
    {
        ".     One aim of the IDE is to reduce the configuration necessary to piece together multiple development utilities, instead it provides the same set of capabilities as one cohesive unit. Reducing setup time can increase developer productivity, especially in cases where learning to use the IDE is faster than manually integrating and learning all of the individual tools. Tighter integration of all development tasks has the potential to improve overall productivity beyond just helping with setup tasks. For example, code can be continuously parsed while it is being edited, providing instant feedback when syntax errors are introduced. Allowing developers to debug code much faster and easier with an IDE.     Some IDEs are dedicated to a specific ": null
    },
    {
        "programming language": "Programming Language"
    },
    {
        ", allowing a feature set that most closely matches the ": null
    },
    {
        "programming paradigms": "Programming Paradigm"
    },
    {
        "of the language. However, there are many multiple-language IDEs.     While most modern IDEs are graphical, text-based IDEs such as ": null
    },
    {
        "Turbo Pascal": "Turbo Pascal"
    },
    {
        " were in popular use before the availability of windowing systems like ": null
    },
    {
        "Microsoft Windows": "Microsoft Windows"
    },
    {
        " and the ": null
    },
    {
        "X Window System": "X Window System"
    },
    {
        " . They commonly use function keys or ": null
    },
    {
        "hotkeys": "Keyboard Shortcut"
    },
    {
        " to execute frequently used commands or macros.            IDEs initially became possible when developing via a ": null
    },
    {
        "console": "System Console"
    },
    {
        " or ": null
    },
    {
        "terminal": "Computer Terminal"
    },
    {
        ". Early systems could not support one, since programs were prepared using flowcharts, entering programs with ": null
    },
    {
        "punched cards": "Punched Card"
    },
    {
        " before submitting them to a ": null
    },
    {
        "compiler": "Compiler"
    },
    {
        ". ": null
    },
    {
        "Dartmouth BASIC": "Dartmouth Basic"
    },
    {
        " was the first language to be created with an IDE . Its IDE  was command-based, and therefore did not look much like the menu-driven, graphical IDEs popular after the advent of the ": null
    },
    {
        "Graphical User Interface": "Graphical User Interface"
    },
    {
        ". However it integrated editing, file management, compilation, debugging and execution in a manner consistent with a modern IDE.     See also ": null
    },
    {
        "Structured Programming Facility": "Structured Programming Facility"
    },
    {
        " from IBM .     ": null
    },
    {
        "Maestro I": "Maestro I"
    },
    {
        " is a product from Softlab Munich and was the worlds first integrated development environment  from Computerwoche  for software. ": null
    },
    {
        "Maestro I": "Maestro I"
    },
    {
        " was installed for 22,000 programmers worldwide. Until 1989, 6,000 installations existed in the ": null
    },
    {
        "Federal Republic of Germany": "West Germany"
    },
    {
        ". Maestro was arguably the world leader in this field during the 1970s and 1980s. Today one of the last Maestro I can be found in the Museum of Information Technology at Arlington.     One of the first IDEs with a plug-in concept was ": null
    },
    {
        "Softbench": "Softbench"
    },
    {
        ". In 1995 Computerwoche commented that the use of an IDE was not well received by developers since it would fence in their creativity.     As of March 2015, the most popular IDEs are ": null
    },
    {
        "Eclipse": "Eclipse"
    },
    {
        " and ": null
    },
    {
        "Visual Studio": "Visual Studio"
    },
    {
        ".              The IDE editor usually provides ": null
    },
    {
        "syntax highlighting": "Syntax Highlighting"
    },
    {
        ", it can show both the structures, the language keywords and the syntax errors with visually distinct colors and font effects.         Code completion is an important IDE feature, meant to speed up programming, and modern IDEs even have ": null
    },
    {
        "intelligent code completion": "Intelligent Code Completion"
    },
    {
        ".         Advanced IDEs provide support for ": null
    },
    {
        "automated refactoring": "Source-To-Source Compilerrefactoring Tools"
    },
    {
        ".          An IDE is expected to provide integrated ": null
    },
    {
        "version control": "Version Control"
    },
    {
        ", in order to interact with source repositories.         IDEs are also used for debugging, using an integrated ": null
    },
    {
        "debugger": "Debugger"
    },
    {
        ", with support for setting breakpoints in the editor, visual rendering of steps, etc.          IDEs may provide advanced support for code search: in order to find class and function declarations, usages, variable and field read/write, etc. IDEs can use different kinds of user interface for code search, for example form-based widgets  and natural-language based interfaces.        ": null
    },
    {
        "Visual programming": "Visual Programming"
    },
    {
        " is a usage scenario in which an IDE is generally required. Visual Basic allows users to create new applications by moving programming, building blocks, or code nodes to create flowcharts or structure diagrams that are then compiled or interpreted. These flowcharts often are based on the ": null
    },
    {
        "Unified Modeling Language": "Unified Modeling Language"
    },
    {
        ".     This interface has been popularized with the ": null
    },
    {
        "Lego Mindstorms": "Lego Mindstorms"
    },
    {
        " system, and is being actively pursued by a number of companies wishing to capitalize on the power of custom browsers like those found at ": null
    },
    {
        "Mozilla": "Mozilla"
    },
    {
        ". ": null
    },
    {
        "KTechlab": "Ktechlab"
    },
    {
        " supports flowcode and is a popular opensource IDE and Simulator for developing software for microcontrollers. Visual programming is also responsible for the power of ": null
    },
    {
        "distributed programming": "Distributed Programming"
    },
    {
        " . An early visual programming system, ": null
    },
    {
        "Max": "Max"
    },
    {
        ", was modeled after analog ": null
    },
    {
        "synthesizer": "Synthesizer"
    },
    {
        " design and has been used to develop real-time music performance software since the 1980s. Another early example was ": null
    },
    {
        "Prograph": "Prograph"
    },
    {
        ", a ": null
    },
    {
        "dataflow": "Dataflow Programming"
    },
    {
        "-based system originally developed for the ": null
    },
    {
        "Macintosh": "Macintosh"
    },
    {
        ". The graphical programming environment Grape is used to program ": null
    },
    {
        "qfix robot kits": "Qfix Robot Kits"
    },
    {
        ".     This approach is also used in specialist software such as ": null
    },
    {
        "Openlab": "Openlab"
    },
    {
        ", where the end users want the flexibility of a full programming language, without the traditional learning curve associated with one.       Some IDEs support multiple languages, such as ": null
    },
    {
        "GNU Emacs": "Gnu Emacs"
    },
    {
        " based on ": null
    },
    {
        "C": "C"
    },
    {
        " and ": null
    },
    {
        "Emacs Lisp": "Emacs Lisp"
    },
    {
        ", and ": null
    },
    {
        "IntelliJ IDEA": "Intellij Idea"
    },
    {
        ", ": null
    },
    {
        "Eclipse": "Eclipse"
    },
    {
        ", ": null
    },
    {
        "MyEclipse": "Myeclipse"
    },
    {
        " or ": null
    },
    {
        "NetBeans": "Netbeans"
    },
    {
        ", all based on ": null
    },
    {
        "Java": "Java"
    },
    {
        ", or ": null
    },
    {
        "MonoDevelop": "Monodevelop"
    },
    {
        ", based on ": null
    },
    {
        "C": "C Sharp"
    },
    {
        ", or PlayCode.     Support for alternative languages is often provided by ": null
    },
    {
        "plugins": "Plug-In"
    },
    {
        ", allowing them to be installed on the same IDE at the same time. For example, ": null
    },
    {
        "Flycheck": "Flycheck"
    },
    {
        " is a modern on-the-fly syntax checking extension for ": null
    },
    {
        "GNU Emacs": "Gnu Emacs"
    },
    {
        " 24 with support for 39 languages.  ": null
    },
    {
        "Eclipse": "Eclipse"
    },
    {
        ", and ": null
    },
    {
        "Netbeans": "Netbeans"
    },
    {
        " have plugins for ": null
    },
    {
        "C": "C"
    },
    {
        "/": null
    },
    {
        "C++": "C++"
    },
    {
        ", ": null
    },
    {
        "Ada": "Ada"
    },
    {
        ", ": null
    },
    {
        "GNAT": "Gnat"
    },
    {
        " , ": null
    },
    {
        "Perl": "Perl"
    },
    {
        ", ": null
    },
    {
        "Python": "Python"
    },
    {
        ", ": null
    },
    {
        "Ruby": "Ruby"
    },
    {
        ", and ": null
    },
    {
        "PHP": "Php"
    },
    {
        ", which are selected between automatically based on file extension, environment or project settings.       ": null
    },
    {
        "Unix": "Unix"
    },
    {
        " programmers can combine ": null
    },
    {
        "command-line": "Command-Line"
    },
    {
        " POSIX": "Posix"
    },
    {
        " tools into a complete development environment, capable of developing large programs such as the ": null
    },
    {
        "Linux kernel": "Linux Kernel"
    },
    {
        " and its environment.   Rehman, Christopher Paul, Christopher R. Paul.   The Linux Development Platform: Configuring, Using and Maintaining a Complete Programming Environment .   2002.      In this sense, the entire Unix system functions as an IDE.  The free software ": null
    },
    {
        "GNU": "Gnu"
    },
    {
        " tools  are available on many platforms, including Windows.   The pervasive Unix philosophy of everything is a text stream enables developers who favor ": null
    },
    {
        "command-line": "Command-Line"
    },
    {
        " oriented tools to use editors with support for many of the standard Unix and GNU build tools, building an IDE with programs like   ": null
    },
    {
        "Emacs": "Emacs"
    },
    {
        "      or ": null
    },
    {
        "Vim": "Vim"
    },
    {
        ". ": null
    },
    {
        "Data Display Debugger": "Data Display Debugger"
    },
    {
        " is intended to be an advanced graphical front-end for many text-based ": null
    },
    {
        "debugger": "Debugger"
    },
    {
        " standard tools. Some programmers prefer managing ": null
    },
    {
        "makefiles": "Makefile"
    },
    {
        "and their derivatives to the similar code building tools included in a full IDE. For example, most contributors to the ": null
    },
    {
        "PostgreSQL": "Postgresql"
    },
    {
        " database use ": null
    },
    {
        "make": "Makefile"
    },
    {
        " and ": null
    },
    {
        "gdb": "Gnu Debugger"
    },
    {
        " directly to develop new features.  Even when building PostgreSQL for ": null
    },
    {
        "Microsoft Windows": "Microsoft Windows"
    },
    {
        " using ": null
    },
    {
        "Visual C++": "Visual C++"
    },
    {
        ", ": null
    },
    {
        "Perl": "Perl"
    },
    {
        " scripts are used as a replacement for ": null
    },
    {
        "make": "Makefile"
    },
    {
        " rather than relying on any IDE features.  Some Linux IDEs such as ": null
    },
    {
        "Geany": "Geany"
    },
    {
        " attempt to provide a graphical front end to traditional build operations.     On the various ": null
    },
    {
        "Microsoft Windows": "Microsoft Windows"
    },
    {
        " platforms, command-line tools for development are seldom used. Accordingly, there are many commercial and non-commercial products. However, each has a different design commonly creating incompatibilities. Most major compiler vendors for Windows still provide free copies of their command-line tools, including ": null
    },
    {
        "Microsoft": "Microsoft"
    },
    {
        " .     IDEs have always been popular on the Apple Macintoshs ": null
    },
    {
        "classic Mac OS": "Classic Mac Os"
    },
    {
        " and ": null
    },
    {
        "macOS": "Macos"
    },
    {
        ", dating back to ": null
    },
    {
        "Macintosh Programmers Workshop": "Macintosh Programmers Workshop"
    },
    {
        ", ": null
    },
    {
        "Turbo Pascal": "Turbo Pascal"
    },
    {
        ", THINK Pascal and ": null
    },
    {
        "THINK C": "Think C"
    },
    {
        " environments of the mid-1980s. Currently macOS programmers can choose between native IDEs like ": null
    },
    {
        "Xcode": "Xcode"
    },
    {
        " and open-source tools such as ": null
    },
    {
        "Eclipse": "Eclipse"
    },
    {
        " and ": null
    },
    {
        "Netbeans": "Netbeans"
    },
    {
        ". ": null
    },
    {
        "ActiveState Komodo": "Activestate Komodo"
    },
    {
        " is a proprietary multilanguage IDE supported on macOS.         Some features of IDEs can benefit from advances in AI.  In particular, one can collect information from IDE actions across developers in order to augment IDE features.  For instance, a data-driven approach to ": null
    },
    {
        "code completion": "Code Completion"
    },
    {
        " results in ": null
    },
    {
        "intelligent code completion": "Intelligent Code Completion"
    },
    {
        ".            An ": null
    },
    {
        "web integrated development environment": "Online Integrated Development Environment"
    },
    {
        " , also known as an ": null
    },
    {
        "Online IDE": "Online Integrated Development Environment"
    },
    {
        " or Cloud IDE, is a ": null
    },
    {
        "browser": "Web Browser"
    },
    {
        " based IDE that allows for software development or web development. ": null
    }
]