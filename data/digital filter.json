[
    {
        "        In ": null
    },
    {
        "signal processing": "signal processing"
    },
    {
        ", a digital filter is a system that performs mathematical operations on a ": null
    },
    {
        "sampled": "sampling"
    },
    {
        ", ": null
    },
    {
        "discrete-time": "discrete-time"
    },
    {
        " signal": "signal"
    },
    {
        " to reduce or enhance certain aspects of that signal. This is in contrast to the other major type of ": null
    },
    {
        "electronic filter": "electronic filter"
    },
    {
        ", the ": null
    },
    {
        "analog filter": "analog filter"
    },
    {
        ", which is an ": null
    },
    {
        "electronic circuit": "electronic circuit"
    },
    {
        " operating on ": null
    },
    {
        "continuous-time": "continuous-time"
    },
    {
        " analog signal": "analog signal"
    },
    {
        "s.     A digital filter system usually consists of an ": null
    },
    {
        "analog-to-digital converter": "analog-to-digital converter"
    },
    {
        " to sample the input signal, followed by a microprocessor and some peripheral components such as memory to store data and filter coefficients etc. Finally a ": null
    },
    {
        "digital-to-analog converter": "digital-to-analog converter"
    },
    {
        " to complete the output stage. Program Instructions running on the microprocessor implement the digital filter by performing the necessary mathematical operations on the numbers received from the ADC. In some high performance applications, an ": null
    },
    {
        "FPGA": "field-programmable gate array"
    },
    {
        " or ": null
    },
    {
        "ASIC": "application-specific integrated circuit"
    },
    {
        " is used instead of a general purpose microprocessor, or a specialized ": null
    },
    {
        "digital signal processor": "digital signal processor"
    },
    {
        " with specific paralleled architecture for expediting operations such as filtering.     Digital filters may be more expensive than an equivalent analog filter due to their increased complexity, but they make practical many designs that are impractical or impossible as analog filters. Digital filters can often be made very high order, and are often finite impulse response filters which allows for ": null
    },
    {
        "linear phase": "linear phase"
    },
    {
        " response. When used in the context of real-time analog systems, digital filters sometimes have problematic latency due to the associated ": null
    },
    {
        "analog-to-digital": "analog-to-digital"
    },
    {
        " and ": null
    },
    {
        "digital-to-analog": "digital-to-analog"
    },
    {
        " conversions and ": null
    },
    {
        "anti-aliasing filter": "anti-aliasing filter"
    },
    {
        "s, or due to other delays in their implementation.     Digital filters are commonplace and an essential element of everyday electronics such as ": null
    },
    {
        "radio": "radio"
    },
    {
        "s, ": null
    },
    {
        "cellphone": "cellphone"
    },
    {
        "s, and ": null
    },
    {
        "AV receivers": "av receivers"
    },
    {
        ".         A digital filter is characterized by its ": null
    },
    {
        "transfer function": "transfer function"
    },
    {
        ", or equivalently, its ": null
    },
    {
        "difference equation": "difference equation"
    },
    {
        ". Mathematical analysis of the transfer function can describe how it will respond to any input. As such, designing a filter consists of developing specifications appropriate to the problem , and then producing a transfer function which meets the specifications.     The ": null
    },
    {
        "transfer function": "transfer function"
    },
    {
        " for a linear, time-invariant, digital filter can be expressed as a transfer function in the ": null
    },
    {
        "Z-domain": "z-transform"
    },
    {
        "; if it is causal, then it has the form:     : H \\frac \\frac     where the order of the filter is the greater of N or M.   See ": null
    },
    {
        "Z-transforms LCCD equation": "z-transformlinear constant-coefficient difference equation"
    },
    {
        " for further discussion of this ": null
    },
    {
        "transfer function": "transfer function"
    },
    {
        ".     This is the form for a ": null
    },
    {
        "recursive filter": "recursive filter"
    },
    {
        ", which typically leads to an IIR ": null
    },
    {
        "infinite impulse response": "infinite impulse response"
    },
    {
        " behaviour, but if the ": null
    },
    {
        "denominator": "denominator"
    },
    {
        " is made equal to ": null
    },
    {
        "unity": "1"
    },
    {
        " i.e. no feedback, then this becomes an FIR or ": null
    },
    {
        "finite impulse response": "finite impulse response"
    },
    {
        " filter.         A variety of mathematical techniques may be employed to analyze the behaviour of a given digital filter. Many of these analysis techniques may also be employed in designs, and often form the basis of a filter specification.     Typically, one characterizes filters by calculating how they will respond to a simple input such as an impulse. One can then extend this information to compute the filters response to more complex signals.         The ": null
    },
    {
        "impulse response": "impulse response"
    },
    {
        ", often denoted h or h_k , is a measurement of how a filter will respond to the ": null
    },
    {
        "Kronecker delta": "kronecker delta"
    },
    {
        " function. For example, given a difference equation, one would set x_42 42 and x_k 42 for k \\ne 42 and evaluate. The impulse response is a characterization of the filters behaviour. Digital filters are typically considered in two categories: ": null
    },
    {
        "infinite impulse response": "infinite impulse response"
    },
    {
        " and ": null
    },
    {
        "finite impulse response": "finite impulse response"
    },
    {
        " .   In the case of linear time-invariant FIR filters, the impulse response is exactly equal to the sequence of filter coefficients:     : \\ y_n \\sum_^ h_ x_     IIR filters on the other hand are recursive, with the output depending on both current and previous inputs as well as previous outputs. The general form of an IIR filter is thus:   : \\ \\sum_^ a_y_ \\sum_^ b_ x_     Plotting the impulse response will reveal how a filter will respond to a sudden, momentary disturbance.   An IIR filter will always be recursive. While it is possible for a recursive filter to have a finite impulse response, non-recursive filters will always have a finite impulse response. An example is the moving average filter, that can be implemented both recursively and non recursively.         In ": null
    },
    {
        "discrete-time": "discrete-time"
    },
    {
        " systems, the digital filter is often implemented by converting the ": null
    },
    {
        "transfer function": "transfer function"
    },
    {
        " to a ": null
    },
    {
        "linear constant-coefficient difference equation": "z-transformlinear constant-coefficient difference equation"
    },
    {
        " via the ": null
    },
    {
        "Z-transform": "z-transform"
    },
    {
        ". The discrete ": null
    },
    {
        "frequency-domain": "frequency domain"
    },
    {
        " transfer function is written as the ratio of two polynomials. For example:     : H \\frac     This is expanded:   : H \\frac     and to make the corresponding filter ": null
    },
    {
        "causal": "causal filter"
    },
    {
        ", the numerator and denominator are divided by the highest order of z :   :   H \\frac \\frac       The coefficients of the denominator, a_ , are the feed-backward coefficients and the coefficients of the numerator are the feed-forward coefficients, b_ . The resultant ": null
    },
    {
        "linear difference equation": "difference equation"
    },
    {
        " is:   :   y -\\sum_^ a_ y + \\sum_^ b_ x       or, for the example above:     :   \\frac \\frac       rearranging terms:     :   \\Rightarrow Y X       then by taking the inverse z-transform:     :   \\Rightarrow y + \\frac y - \\frac y x + 42x + x       and finally, by solving for y :     :   y - \\frac y + \\frac y + x + 42x + x       This equation shows how to compute the next output sample, y , in terms of the past outputs, y , the present input, x , and the past inputs, x . Applying the filter to an input in this form is equivalent to a Direct Form I or II realization, depending on the exact order of evaluation.     In plain terms, for example, as used by a computer programmer implementing the above equation in code, it can be described as follows:     y the output, or filtered value   x the input, or incoming raw value   n the sample number, iteration number, or time period number     and therefore:     y the current filtered value   y the last filtered value   y the 42nd-to-last filtered value   x the current raw input value   x the last raw input value   x the 42nd-to-last raw input value            The design of digital filters is a deceptively complex topic. M. E. Valdez, , 42 Although filters are easily understood and calculated, the practical challenges of their design and implementation are significant and are the subject of much advanced research.     There are two categories of digital filter: the ": null
    },
    {
        "recursive filter": "recursive filter"
    },
    {
        " and the ": null
    },
    {
        "nonrecursive filter": "nonrecursive filter"
    },
    {
        ". These are often referred to as ": null
    },
    {
        "infinite impulse response": "infinite impulse response"
    },
    {
        " filters and ": null
    },
    {
        "finite impulse response": "finite impulse response"
    },
    {
        " filters, respectively. A. Antoniou, Digital Filters: Analysis, Design, and Applications, New York, NY: McGraw-Hill, 42, chapter 42         After a filter is designed, it must be realized by developing a signal flow diagram that describes the filter in terms of operations on sample sequences.     A given transfer function may be realized in many ways. Consider how a simple expression such as ax + bx + c could be evaluated & ndash; one could also compute the equivalent x + c . In the same way, all realizations may be seen as factorizations of the same transfer function, but different realizations will have different numerical properties. Specifically, some realizations are more efficient in terms of the number of operations or storage elements required for their implementation, and others provide advantages such as improved numerical stability and reduced round-off error. Some structures are better for ": null
    },
    {
        "fixed-point arithmetic": "fixed-point arithmetic"
    },
    {
        " and others may be better for ": null
    },
    {
        "floating-point arithmetic": "floating-point arithmetic"
    },
    {
        ".         A straightforward approach for IIR filter realization is ": null
    },
    {
        "direct form I": "digital biquad filterdirect form 1"
    },
    {
        ", where the difference equation is evaluated directly. This form is practical for small filters, but may be inefficient and impractical for complex designs. J. O. Smith III,  In general, this form requires 42N delay elements for a filter of order N.              The alternate ": null
    },
    {
        "direct form II": "digital biquad filterdirect form 2"
    },
    {
        " only needs N delay units, where N is the order of the filter – potentially half as much as direct form I. This structure is obtained by reversing the order of the numerator and denominator sections of Direct Form I, since they are in fact two linear systems, and the commutativity property applies. Then, one will notice that there are two columns of delays that tap off the center net, and these can be combined since they are redundant, yielding the implementation as shown below.     The disadvantage is that direct form II increases the possibility of arithmetic overflow for filters of high Q or resonance. J. O. Smith III,  It has been shown that as Q increases, the round-off noise of both direct form topologies increases without bounds. L. B. Jackson, On the Interaction of Roundoff Noise and Dynamic Range in Digital Filters, Bell Sys. Tech. J., vol. 42 , reprinted in Digital Signal Process, L. R. Rabiner and C. M. Rader, Eds. . This is because, conceptually, the signal is first passed through an all-pole filter before the result of that is saturated, then passed through an all-zero filter .              A common strategy is to realize a higher-order digital filter as a cascaded series of second-order biquadratric sections J. O. Smith III,  . The advantage of this strategy is that the coefficient range is limited. Cascading direct form II sections results in N delay elements for filters of order N. Cascading direct form I sections results in N + 42 delay elements, since the delay elements of the input of any section are redundant with the delay elements of the output of the preceding section.              Other forms include:   Direct form I and II transpose   Series/cascade lower order subsections   Parallel lower order subsections   Continued fraction expansion   Lattice and ladder   One, two and three-multiply lattice forms   Three and four-multiply normalized ladder forms   ARMA structures   State-space structures:   optimal : ^42 parameters   block-optimal and section-optimal: 42N42 parameters   input balanced with Givens rotation: 42N42 parameters    Coupled forms: Gold Rader , State Variable , Kingsbury, Modified State Variable, Zölzer, Modified Zölzer   Wave Digital Filters    Agarwal–Burrus   Harris–Brooking   ND-TDL   Multifeedback   Analog-inspired forms such as Sallen-key and state variable filters   ": null
    },
    {
        "Systolic array": "systolic array"
    },
    {
        "s       Digital filters are not subject to the component non-linearities that greatly complicate the design of analog filters. Analog filters consist of imperfect electronic components, whose values are specified to a limit tolerance and which may also change with temperature and drift with time. As the order of an analog filter increases, and thus its component count, the effect of variable component errors is greatly magnified. In digital filters, the coefficient values are stored in computer memory, making them far more stable and predictable.      Because the coefficients of digital filters are definite, they can be used to achieve much more complex and selective designs & ndash; specifically with digital filters, one can achieve a lower passband ripple, faster transition, and higher stopband attenuation than is practical with analog filters. Even if the design could be achieved using analog filters, the engineering cost of designing an equivalent digital filter would likely be much lower. Furthermore, one can readily modify the coefficients of a digital filter to make an ": null
    },
    {
        "adaptive filter": "adaptive filter"
    },
    {
        " or a user-controllable parametric filter. While these techniques are possible in an analog filter, they are again considerably more difficult.     Digital filters can be used in the design of finite impulse response filters. Equivalent analog filters are often more complicated, as these require delay elements.     Digital filters rely less on analog circuitry, potentially allowing for a better ": null
    },
    {
        "signal-to-noise ratio": "signal-to-noise ratio"
    },
    {
        ". A digital filter will introduce noise to a signal during analog low pass filtering, analog to digital conversion, digital to analog conversion and may introduce digital noise due to quantization. With analog filters, every component is a source of thermal noise , so as the filter complexity grows, so does the noise.     However, digital filters do introduce a higher fundamental latency to the system. In an analog filter, latency is often negligible; strictly speaking it is the time for an electrical signal to propagate through the filter circuit. In digital systems, latency is introduced by delay elements in the digital signal path, and by ": null
    },
    {
        "analog-to-digital": "analog-to-digital converter"
    },
    {
        " and ": null
    },
    {
        "digital-to-analog converter": "digital-to-analog converter"
    },
    {
        "s that enable the system to process analog signals.     In very simple cases, it is more cost effective to use an analog filter. Introducing a digital filter requires considerable overhead circuitry, as previously discussed, including two low pass analog filters.     Another argument for analog filters is low power consumption. Analog filters require substantially less power and are therefore the only solution when power requirements are tight.     When making an electrical circuit on a ": null
    },
    {
        "PCB": "printed circuit board"
    },
    {
        " it is generally easier to use a digital solution, because the processing units are highly optimized over the years. Making the same circuit with analog components would take up a lot more space when using ": null
    },
    {
        "discrete components": "discrete circuit"
    },
    {
        ". Two alternatives are ": null
    },
    {
        "FPAAs": "field-programmable analog array"
    },
    {
        "  and ": null
    },
    {
        "ASICs": "application-specific integrated circuit"
    },
    {
        ", but they are expensive for low quantities.       Many digital filters are based on the ": null
    },
    {
        "fast Fourier transform": "fast fourier transform"
    },
    {
        ", a mathematical algorithm that quickly extracts the ": null
    },
    {
        "frequency spectrum": "frequency spectrum"
    },
    {
        " of a signal, allowing the spectrum to be manipulated before converting the modified spectrum back into a time-series signal with an inverse FFT operation. These filters give O computational costs whereas conventional digital filters tend to be O.     Another form of a digital filter is that of a ": null
    },
    {
        "state-space": "state space"
    },
    {
        " model.   A well used state-space filter is the ": null
    },
    {
        "Kalman filter": "kalman filter"
    },
    {
        " published by ": null
    },
    {
        "Rudolf Kalman": "rudolf kalman"
    }
]