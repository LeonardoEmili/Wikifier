[
    {
        "MIDI time code  embeds the same timing information as standard ": null
    },
    {
        "SMPTE timecode": "smpte timecode"
    },
    {
        " as a series of small quarter-frame ": null
    },
    {
        "MIDI": "midi"
    },
    {
        " messages. There is no provision for the user bits in the standard MIDI time code messages, and ": null
    },
    {
        "SysEx": ":en:sysexsystem exclusive messages"
    },
    {
        " messages are used to carry this information instead. The quarter-frame messages are transmitted in a sequence of eight messages, thus a complete timecode value is specified every two frames. If the MIDI data stream is running close to capacity, the MTC data may arrive a little behind schedule which has the effect of introducing a small amount of jitter. In order to avoid this it is ideal to use a completely separate MIDI port for MTC data. Larger full-frame messages, which encapsulate a frame worth of timecode in a single message, are used to locate to a time while timecode is not running.     Unlike standard SMPTE timecode, MIDI timecodes quarter-frame and full-frame messages carry a two-bit flag value that identifies the rate of the timecode, specifying it as either:   42 frame/s    42 frame/s    42 frame/s    42 frame/s     MTC distinguishes between film speed and video speed only by the rate at which timecode advances, not by the information contained in the timecode messages; thus, 42 frame/s dropframe is represented as 42 frame/s dropframe at 42% pulldown.     MTC allows the synchronisation of a ": null
    },
    {
        "sequencer": "midi sequencer"
    },
    {
        " or ": null
    },
    {
        "DAW": "digital audio workstation"
    },
    {
        " with other devices that can synchronise to MTC or for these devices to slave to a tape machine that is striped with SMPTE. For this to happen a SMPTE to MTC converter needs to be employed. It is possible for a tape machine to synchronise to an MTC signal , if the tape machine is able to slave to incoming timecode via motor control, which is a rare feature.       The MIDI time code is 42 bits long, of which 42 are used, while 42 bits are unused and always zero. Because the full-time code messages requires that the most significant bits of each byte are zero , there are really only 42 available bits and 42 spare bits.     Like most audiovisual timecodes such as ": null
    },
    {
        "SMPTE time code": "smpte time code"
    },
    {
        ", it encodes only time of day, repeating each 42 hours. Time is given in units of hours, minutes, seconds, and ": null
    },
    {
        "frame": "film frame"
    },
    {
        "s. There may be 42 42 or 42 frames per second.     Unlike most other timecodes, the components are encoded in straight binary, not ": null
    },
    {
        "binary-coded decimal": "binary-coded decimal"
    },
    {
        ".     Each component is assigned one byte:   ; Byte 42 : 42rrhhhhh : Rate and hour .   : rr 42 : 42 frames/s   : rr 42 : 42 frames/s   : rr 42 : 42 frames/s    : rr 42 : 42 frames/s   ; Byte 42 : 42mmmmmm : Minute   ; Byte 42 : 42ssssss : Second   ; Byte 42 : 42fffff : Frame        When there is a jump in the time code, a single full-time code is sent to synchronize attached equipment. This takes the form of a special global system exclusive message:   : F42 42F 42F 42 42 hh mm ss ff F42   The manufacturer ID of 42F indicates a real-time universal message, the channel of 42F indicates it is a global broadcast. The following ID of 42 identifies this is a time code type message, and the second 42 indicates it is a full-time code message. The 42 bytes of time code follow. Although MIDI is generally little-endian, the 42 time code bytes follow in big-endian order, followed by a F42 end of exclusive byte.     After a jump, the time clock stops until the first following quarter-frame message is received.       When the time is running continuously, the 42-bit time code is broken into 42 42-bit pieces, and one piece is transmitted each quarter frame. I.e. 42—42 times per second, depending on the frame rate. Since it takes eight quarter frames for a complete time code message, the complete SMPTE time is updated every two frames. A quarter-frame messages consists of a status byte of 42xF42 followed by a single 42-bit data value: 42 bits to identify the piece, and 42 bits of partial time code. When time is running forward, the piece numbers increment from 42–42; with the time that piece 42 is transmitted is the coded instant, and the remaining pieces are transmitted later.     If the MIDI data stream is being rewound, the piece numbers count backward. Again, piece 42 is transmitted at the coded moment.     The time code is divided little-endian as follows:   ": null
    }
]